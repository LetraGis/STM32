
sd_card_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070bc  080070bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080070bc  080070bc  000170bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c4  080070c4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004650  20000088  08007154  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046d8  08007154  000246d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016074  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d0a  00000000  00000000  0003612c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00038e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  00039fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024546  00000000  00000000  0003b020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010481  00000000  00000000  0005f566  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3b50  00000000  00000000  0006f9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  001435b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ffc 	.word	0x08006ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08006ffc 	.word	0x08006ffc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <SELECT+0x14>)
 80005ca:	f001 fe5b 	bl	8002284 <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020400 	.word	0x40020400

080005d8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2101      	movs	r1, #1
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <DESELECT+0x14>)
 80005e2:	f001 fe4f 	bl	8002284 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005fa:	bf00      	nop
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <SPI_TxByte+0x30>)
 80005fe:	f004 fdc3 	bl	8005188 <HAL_SPI_GetState>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d1f9      	bne.n	80005fc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000608:	1df9      	adds	r1, r7, #7
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	2201      	movs	r2, #1
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <SPI_TxByte+0x30>)
 8000612:	f004 fae3 	bl	8004bdc <HAL_SPI_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20001590 	.word	0x20001590

08000624 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000632:	bf00      	nop
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <SPI_RxByte+0x38>)
 8000636:	f004 fda7 	bl	8005188 <HAL_SPI_GetState>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1f9      	bne.n	8000634 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000640:	1dba      	adds	r2, r7, #6
 8000642:	1df9      	adds	r1, r7, #7
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <SPI_RxByte+0x38>)
 800064e:	f004 fbf9 	bl	8004e44 <HAL_SPI_TransmitReceive>
  
  return data;
 8000652:	79bb      	ldrb	r3, [r7, #6]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20001590 	.word	0x20001590

08000660 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000668:	f7ff ffdc 	bl	8000624 <SPI_RxByte>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <SD_ReadyWait+0x34>)
 8000684:	2232      	movs	r2, #50	; 0x32
 8000686:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000688:	f7ff ffcc 	bl	8000624 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800068c:	f7ff ffca 	bl	8000624 <SPI_RxByte>
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2bff      	cmp	r3, #255	; 0xff
 8000698:	d004      	beq.n	80006a4 <SD_ReadyWait+0x28>
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SD_ReadyWait+0x34>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f3      	bne.n	800068c <SD_ReadyWait+0x10>
  
  return res;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000265c 	.word	0x2000265c

080006b4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006be:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80006c0:	f7ff ff8a 	bl	80005d8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	e005      	b.n	80006d6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	f7ff ff90 	bl	80005f0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3301      	adds	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	ddf6      	ble.n	80006ca <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80006dc:	f7ff ff70 	bl	80005c0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006f4:	2395      	movs	r3, #149	; 0x95
 80006f6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e009      	b.n	8000712 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006fe:	1d3a      	adds	r2, r7, #4
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff72 	bl	80005f0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b05      	cmp	r3, #5
 8000716:	ddf2      	ble.n	80006fe <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000718:	e002      	b.n	8000720 <SD_PowerOn+0x6c>
  {
    Count--;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3b01      	subs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000720:	f7ff ff80 	bl	8000624 <SPI_RxByte>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d002      	beq.n	8000730 <SD_PowerOn+0x7c>
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1f4      	bne.n	800071a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000730:	f7ff ff52 	bl	80005d8 <DESELECT>
  SPI_TxByte(0XFF);
 8000734:	20ff      	movs	r0, #255	; 0xff
 8000736:	f7ff ff5b 	bl	80005f0 <SPI_TxByte>
  
  PowerFlag = 1;
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <SD_PowerOn+0x94>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000a5 	.word	0x200000a5

0800074c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <SD_PowerOff+0x14>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	200000a5 	.word	0x200000a5

08000764 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <SD_CheckPower+0x14>)
 800076a:	781b      	ldrb	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200000a5 	.word	0x200000a5

0800077c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <SD_RxDataBlock+0x68>)
 8000788:	220a      	movs	r2, #10
 800078a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800078c:	f7ff ff4a 	bl	8000624 <SPI_RxByte>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	d104      	bne.n	80007a4 <SD_RxDataBlock+0x28>
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <SD_RxDataBlock+0x68>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f3      	bne.n	800078c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2bfe      	cmp	r3, #254	; 0xfe
 80007a8:	d001      	beq.n	80007ae <SD_RxDataBlock+0x32>
    return FALSE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e016      	b.n	80007dc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff53 	bl	8000660 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff4d 	bl	8000660 <SPI_RxBytePtr>
  } while(btr -= 2);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3b02      	subs	r3, #2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1ed      	bne.n	80007ae <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80007d2:	f7ff ff27 	bl	8000624 <SPI_RxByte>
  SPI_RxByte();
 80007d6:	f7ff ff25 	bl	8000624 <SPI_RxByte>
  
  return TRUE;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000265d 	.word	0x2000265d

080007e8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007f8:	f7ff ff40 	bl	800067c <SD_ReadyWait>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d001      	beq.n	8000806 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000802:	2300      	movs	r3, #0
 8000804:	e040      	b.n	8000888 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fef1 	bl	80005f0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	2bfd      	cmp	r3, #253	; 0xfd
 8000812:	d031      	beq.n	8000878 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fee5 	bl	80005f0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fede 	bl	80005f0 <SPI_TxByte>
    } while (--wc);
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	3b01      	subs	r3, #1
 8000838:	73bb      	strb	r3, [r7, #14]
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1eb      	bne.n	8000818 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000840:	f7ff fef0 	bl	8000624 <SPI_RxByte>
    SPI_RxByte();
 8000844:	f7ff feee 	bl	8000624 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000848:	e00b      	b.n	8000862 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800084a:	f7ff feeb 	bl	8000624 <SPI_RxByte>
 800084e:	4603      	mov	r3, r0
 8000850:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f003 031f 	and.w	r3, r3, #31
 8000858:	2b05      	cmp	r3, #5
 800085a:	d006      	beq.n	800086a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	3301      	adds	r3, #1
 8000860:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000862:	7b7b      	ldrb	r3, [r7, #13]
 8000864:	2b40      	cmp	r3, #64	; 0x40
 8000866:	d9f0      	bls.n	800084a <SD_TxDataBlock+0x62>
 8000868:	e000      	b.n	800086c <SD_TxDataBlock+0x84>
        break;
 800086a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800086c:	bf00      	nop
 800086e:	f7ff fed9 	bl	8000624 <SPI_RxByte>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d0fa      	beq.n	800086e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f003 031f 	and.w	r3, r3, #31
 800087e:	2b05      	cmp	r3, #5
 8000880:	d101      	bne.n	8000886 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800089c:	f7ff feee 	bl	800067c <SD_ReadyWait>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2bff      	cmp	r3, #255	; 0xff
 80008a4:	d001      	beq.n	80008aa <SD_SendCmd+0x1a>
    return 0xFF;
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	e040      	b.n	800092c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe9f 	bl	80005f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	0e1b      	lsrs	r3, r3, #24
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe99 	bl	80005f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	0c1b      	lsrs	r3, r3, #16
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe93 	bl	80005f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe8d 	bl	80005f0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe88 	bl	80005f0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b40      	cmp	r3, #64	; 0x40
 80008e8:	d101      	bne.n	80008ee <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80008ea:	2395      	movs	r3, #149	; 0x95
 80008ec:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b48      	cmp	r3, #72	; 0x48
 80008f2:	d101      	bne.n	80008f8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008f4:	2387      	movs	r3, #135	; 0x87
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe78 	bl	80005f0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b4c      	cmp	r3, #76	; 0x4c
 8000904:	d101      	bne.n	800090a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000906:	f7ff fe8d 	bl	8000624 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800090a:	230a      	movs	r3, #10
 800090c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800090e:	f7ff fe89 	bl	8000624 <SPI_RxByte>
 8000912:	4603      	mov	r3, r0
 8000914:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000916:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da05      	bge.n	800092a <SD_SendCmd+0x9a>
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	3b01      	subs	r3, #1
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f1      	bne.n	800090e <SD_SendCmd+0x7e>
  
  return res;
 800092a:	7b7b      	ldrb	r3, [r7, #13]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000944:	2301      	movs	r3, #1
 8000946:	e0d5      	b.n	8000af4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000948:	4b6c      	ldr	r3, [pc, #432]	; (8000afc <SD_disk_initialize+0x1c8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <SD_disk_initialize+0x2a>
    return Stat;        
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <SD_disk_initialize+0x1c8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	e0ca      	b.n	8000af4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800095e:	f7ff fea9 	bl	80006b4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000962:	f7ff fe2d 	bl	80005c0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800096a:	2100      	movs	r1, #0
 800096c:	2040      	movs	r0, #64	; 0x40
 800096e:	f7ff ff8f 	bl	8000890 <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	f040 80a5 	bne.w	8000ac4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800097a:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <SD_disk_initialize+0x1cc>)
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000980:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000984:	2048      	movs	r0, #72	; 0x48
 8000986:	f7ff ff83 	bl	8000890 <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d158      	bne.n	8000a42 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e00c      	b.n	80009b0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000996:	7bfc      	ldrb	r4, [r7, #15]
 8000998:	f7ff fe44 	bl	8000624 <SPI_RxByte>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4423      	add	r3, r4
 80009a6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	3301      	adds	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d9ef      	bls.n	8000996 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80009b6:	7abb      	ldrb	r3, [r7, #10]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8083 	bne.w	8000ac4 <SD_disk_initialize+0x190>
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	2baa      	cmp	r3, #170	; 0xaa
 80009c2:	d17f      	bne.n	8000ac4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009c4:	2100      	movs	r1, #0
 80009c6:	2077      	movs	r0, #119	; 0x77
 80009c8:	f7ff ff62 	bl	8000890 <SD_SendCmd>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d807      	bhi.n	80009e2 <SD_disk_initialize+0xae>
 80009d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009d6:	2069      	movs	r0, #105	; 0x69
 80009d8:	f7ff ff5a 	bl	8000890 <SD_SendCmd>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d005      	beq.n	80009ee <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <SD_disk_initialize+0x1cc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1eb      	bne.n	80009c4 <SD_disk_initialize+0x90>
 80009ec:	e000      	b.n	80009f0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009ee:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <SD_disk_initialize+0x1cc>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d064      	beq.n	8000ac4 <SD_disk_initialize+0x190>
 80009fa:	2100      	movs	r1, #0
 80009fc:	207a      	movs	r0, #122	; 0x7a
 80009fe:	f7ff ff47 	bl	8000890 <SD_SendCmd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d15d      	bne.n	8000ac4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e00c      	b.n	8000a28 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a0e:	7bfc      	ldrb	r4, [r7, #15]
 8000a10:	f7ff fe08 	bl	8000624 <SPI_RxByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4423      	add	r3, r4
 8000a1e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	3301      	adds	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9ef      	bls.n	8000a0e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a2e:	7a3b      	ldrb	r3, [r7, #8]
 8000a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SD_disk_initialize+0x108>
 8000a38:	2306      	movs	r3, #6
 8000a3a:	e000      	b.n	8000a3e <SD_disk_initialize+0x10a>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	73bb      	strb	r3, [r7, #14]
 8000a40:	e040      	b.n	8000ac4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a42:	2100      	movs	r1, #0
 8000a44:	2077      	movs	r0, #119	; 0x77
 8000a46:	f7ff ff23 	bl	8000890 <SD_SendCmd>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d808      	bhi.n	8000a62 <SD_disk_initialize+0x12e>
 8000a50:	2100      	movs	r1, #0
 8000a52:	2069      	movs	r0, #105	; 0x69
 8000a54:	f7ff ff1c 	bl	8000890 <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d801      	bhi.n	8000a62 <SD_disk_initialize+0x12e>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e000      	b.n	8000a64 <SD_disk_initialize+0x130>
 8000a62:	2301      	movs	r3, #1
 8000a64:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d10e      	bne.n	8000a8a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2077      	movs	r0, #119	; 0x77
 8000a70:	f7ff ff0e 	bl	8000890 <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d80e      	bhi.n	8000a98 <SD_disk_initialize+0x164>
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2069      	movs	r0, #105	; 0x69
 8000a7e:	f7ff ff07 	bl	8000890 <SD_SendCmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a88:	e00d      	b.n	8000aa6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2041      	movs	r0, #65	; 0x41
 8000a8e:	f7ff feff 	bl	8000890 <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <SD_disk_initialize+0x1cc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e1      	bne.n	8000a66 <SD_disk_initialize+0x132>
 8000aa2:	e000      	b.n	8000aa6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000aa4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <SD_disk_initialize+0x1cc>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <SD_disk_initialize+0x18c>
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	2050      	movs	r0, #80	; 0x50
 8000ab6:	f7ff feeb 	bl	8000890 <SD_SendCmd>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <SD_disk_initialize+0x1d0>)
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000aca:	f7ff fd85 	bl	80005d8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000ace:	f7ff fda9 	bl	8000624 <SPI_RxByte>
  
  if (type) 
 8000ad2:	7bbb      	ldrb	r3, [r7, #14]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SD_disk_initialize+0x1c8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SD_disk_initialize+0x1c8>)
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e001      	b.n	8000aee <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000aea:	f7ff fe2f 	bl	800074c <SD_PowerOff>
  }
  
  return Stat;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <SD_disk_initialize+0x1c8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	2000265d 	.word	0x2000265d
 8000b04:	200000a4 	.word	0x200000a4

08000b08 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e002      	b.n	8000b22 <SD_disk_status+0x1a>
  
  return Stat;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SD_disk_status+0x28>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000

08000b34 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4603      	mov	r3, r0
 8000b42:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <SD_disk_read+0x1c>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b50:	2304      	movs	r3, #4
 8000b52:	e051      	b.n	8000bf8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <SD_disk_read+0xcc>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e048      	b.n	8000bf8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <SD_disk_read+0xd0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000b78:	f7ff fd22 	bl	80005c0 <SELECT>
  
  if (count == 1) 
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d111      	bne.n	8000ba6 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2051      	movs	r0, #81	; 0x51
 8000b86:	f7ff fe83 	bl	8000890 <SD_SendCmd>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d129      	bne.n	8000be4 <SD_disk_read+0xb0>
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	f7ff fdf1 	bl	800077c <SD_RxDataBlock>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d021      	beq.n	8000be4 <SD_disk_read+0xb0>
      count = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	e01e      	b.n	8000be4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2052      	movs	r0, #82	; 0x52
 8000baa:	f7ff fe71 	bl	8000890 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d117      	bne.n	8000be4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f7ff fddf 	bl	800077c <SD_RxDataBlock>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00a      	beq.n	8000bda <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1ed      	bne.n	8000bb4 <SD_disk_read+0x80>
 8000bd8:	e000      	b.n	8000bdc <SD_disk_read+0xa8>
          break;
 8000bda:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000bdc:	2100      	movs	r1, #0
 8000bde:	204c      	movs	r0, #76	; 0x4c
 8000be0:	f7ff fe56 	bl	8000890 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000be4:	f7ff fcf8 	bl	80005d8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000be8:	f7ff fd1c 	bl	8000624 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200000a4 	.word	0x200000a4

08000c08 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <SD_disk_write+0x1c>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c24:	2304      	movs	r3, #4
 8000c26:	e06b      	b.n	8000d00 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <SD_disk_write+0x100>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e062      	b.n	8000d00 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <SD_disk_write+0x100>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e059      	b.n	8000d00 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <SD_disk_write+0x104>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000c5e:	f7ff fcaf 	bl	80005c0 <SELECT>
  
  if (count == 1) 
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d110      	bne.n	8000c8a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	2058      	movs	r0, #88	; 0x58
 8000c6c:	f7ff fe10 	bl	8000890 <SD_SendCmd>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d13a      	bne.n	8000cec <SD_disk_write+0xe4>
 8000c76:	21fe      	movs	r1, #254	; 0xfe
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff fdb5 	bl	80007e8 <SD_TxDataBlock>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d033      	beq.n	8000cec <SD_disk_write+0xe4>
      count = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	e030      	b.n	8000cec <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <SD_disk_write+0x104>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c96:	2100      	movs	r1, #0
 8000c98:	2077      	movs	r0, #119	; 0x77
 8000c9a:	f7ff fdf9 	bl	8000890 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	2057      	movs	r0, #87	; 0x57
 8000ca2:	f7ff fdf5 	bl	8000890 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2059      	movs	r0, #89	; 0x59
 8000caa:	f7ff fdf1 	bl	8000890 <SD_SendCmd>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d11b      	bne.n	8000cec <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000cb4:	21fc      	movs	r1, #252	; 0xfc
 8000cb6:	68b8      	ldr	r0, [r7, #8]
 8000cb8:	f7ff fd96 	bl	80007e8 <SD_TxDataBlock>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00a      	beq.n	8000cd8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cc8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1ee      	bne.n	8000cb4 <SD_disk_write+0xac>
 8000cd6:	e000      	b.n	8000cda <SD_disk_write+0xd2>
          break;
 8000cd8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000cda:	21fd      	movs	r1, #253	; 0xfd
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fd83 	bl	80007e8 <SD_TxDataBlock>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <SD_disk_write+0xe4>
      {        
        count = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000cec:	f7ff fc74 	bl	80005d8 <DESELECT>
  SPI_RxByte();
 8000cf0:	f7ff fc98 	bl	8000624 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf14      	ite	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	200000a4 	.word	0x200000a4

08000d10 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b08b      	sub	sp, #44	; 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	603a      	str	r2, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e117      	b.n	8000f5e <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d126      	bne.n	8000d88 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d00e      	beq.n	8000d60 <SD_disk_ioctl+0x50>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d012      	beq.n	8000d6c <SD_disk_ioctl+0x5c>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d11a      	bne.n	8000d80 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000d4a:	f7ff fd0b 	bl	8000764 <SD_CheckPower>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000d54:	f7ff fcfa 	bl	800074c <SD_PowerOff>
      res = RES_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d5e:	e0fc      	b.n	8000f5a <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d60:	f7ff fca8 	bl	80006b4 <SD_PowerOn>
      res = RES_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d6a:	e0f6      	b.n	8000f5a <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	1c5c      	adds	r4, r3, #1
 8000d70:	f7ff fcf8 	bl	8000764 <SD_CheckPower>
 8000d74:	4603      	mov	r3, r0
 8000d76:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d7e:	e0ec      	b.n	8000f5a <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000d80:	2304      	movs	r3, #4
 8000d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d86:	e0e8      	b.n	8000f5a <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000d88:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <SD_disk_ioctl+0x258>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e0e1      	b.n	8000f5e <SD_disk_ioctl+0x24e>
    
    SELECT();
 8000d9a:	f7ff fc11 	bl	80005c0 <SELECT>
    
    switch (ctrl) 
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	f200 80cb 	bhi.w	8000f3c <SD_disk_ioctl+0x22c>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <SD_disk_ioctl+0x9c>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000ea7 	.word	0x08000ea7
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000e97 	.word	0x08000e97
 8000db8:	08000f3d 	.word	0x08000f3d
 8000dbc:	08000f3d 	.word	0x08000f3d
 8000dc0:	08000f3d 	.word	0x08000f3d
 8000dc4:	08000f3d 	.word	0x08000f3d
 8000dc8:	08000f3d 	.word	0x08000f3d
 8000dcc:	08000f3d 	.word	0x08000f3d
 8000dd0:	08000f3d 	.word	0x08000f3d
 8000dd4:	08000f3d 	.word	0x08000f3d
 8000dd8:	08000eb9 	.word	0x08000eb9
 8000ddc:	08000edd 	.word	0x08000edd
 8000de0:	08000f01 	.word	0x08000f01
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000de4:	2100      	movs	r1, #0
 8000de6:	2049      	movs	r0, #73	; 0x49
 8000de8:	f7ff fd52 	bl	8000890 <SD_SendCmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 80a8 	bne.w	8000f44 <SD_disk_ioctl+0x234>
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fcbe 	bl	800077c <SD_RxDataBlock>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 809e 	beq.w	8000f44 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10e      	bne.n	8000e30 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e12:	7d7b      	ldrb	r3, [r7, #21]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	7d3b      	ldrb	r3, [r7, #20]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e26:	8bfb      	ldrh	r3, [r7, #30]
 8000e28:	029a      	lsls	r2, r3, #10
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e02e      	b.n	8000e8e <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e30:	7c7b      	ldrb	r3, [r7, #17]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	7dbb      	ldrb	r3, [r7, #22]
 8000e3a:	09db      	lsrs	r3, r3, #7
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	7d7b      	ldrb	r3, [r7, #21]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	f003 0306 	and.w	r3, r3, #6
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3302      	adds	r3, #2
 8000e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e58:	7d3b      	ldrb	r3, [r7, #20]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	7cfb      	ldrb	r3, [r7, #19]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	7cbb      	ldrb	r3, [r7, #18]
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e80:	8bfa      	ldrh	r2, [r7, #30]
 8000e82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e86:	3b09      	subs	r3, #9
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e94:	e056      	b.n	8000f44 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ea4:	e055      	b.n	8000f52 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000ea6:	f7ff fbe9 	bl	800067c <SD_ReadyWait>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d14b      	bne.n	8000f48 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eb6:	e047      	b.n	8000f48 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2049      	movs	r0, #73	; 0x49
 8000ebc:	f7ff fce8 	bl	8000890 <SD_SendCmd>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d142      	bne.n	8000f4c <SD_disk_ioctl+0x23c>
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	6a38      	ldr	r0, [r7, #32]
 8000eca:	f7ff fc57 	bl	800077c <SD_RxDataBlock>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d03b      	beq.n	8000f4c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eda:	e037      	b.n	8000f4c <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000edc:	2100      	movs	r1, #0
 8000ede:	204a      	movs	r0, #74	; 0x4a
 8000ee0:	f7ff fcd6 	bl	8000890 <SD_SendCmd>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d132      	bne.n	8000f50 <SD_disk_ioctl+0x240>
 8000eea:	2110      	movs	r1, #16
 8000eec:	6a38      	ldr	r0, [r7, #32]
 8000eee:	f7ff fc45 	bl	800077c <SD_RxDataBlock>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02b      	beq.n	8000f50 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000efe:	e027      	b.n	8000f50 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000f00:	2100      	movs	r1, #0
 8000f02:	207a      	movs	r0, #122	; 0x7a
 8000f04:	f7ff fcc4 	bl	8000890 <SD_SendCmd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d116      	bne.n	8000f3c <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f14:	e00b      	b.n	8000f2e <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000f16:	6a3c      	ldr	r4, [r7, #32]
 8000f18:	1c63      	adds	r3, r4, #1
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	f7ff fb82 	bl	8000624 <SPI_RxByte>
 8000f20:	4603      	mov	r3, r0
 8000f22:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d9ef      	bls.n	8000f16 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f42:	e006      	b.n	8000f52 <SD_disk_ioctl+0x242>
      break;
 8000f44:	bf00      	nop
 8000f46:	e004      	b.n	8000f52 <SD_disk_ioctl+0x242>
      break;
 8000f48:	bf00      	nop
 8000f4a:	e002      	b.n	8000f52 <SD_disk_ioctl+0x242>
      break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <SD_disk_ioctl+0x242>
      break;
 8000f50:	bf00      	nop
    }
    
    DESELECT();
 8000f52:	f7ff fb41 	bl	80005d8 <DESELECT>
    SPI_RxByte();
 8000f56:	f7ff fb65 	bl	8000624 <SPI_RxByte>
  }
  
  return res;
 8000f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	372c      	adds	r7, #44	; 0x2c
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000

08000f6c <Clear_Buffer>:
//======================================================================================
/*
 * Clears data buffer.
 */
void Clear_Buffer(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	e007      	b.n	8000f88 <Clear_Buffer+0x1c>
		buffer[i] = '\0';
 8000f78:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <Clear_Buffer+0x30>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3301      	adds	r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8c:	ddf4      	ble.n	8000f78 <Clear_Buffer+0xc>
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200014d8 	.word	0x200014d8

08000fa0 <Send_Uart>:
/*
 * Sends a string through serial port.
 * @param string: a pointer to char array.
 */
void Send_Uart(char * string)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff f931 	bl	8000210 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  //Blocking mode transmit
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <Send_Uart+0x2c>)
 8000fbe:	f004 f9ea 	bl	8005396 <HAL_UART_Transmit>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20001498 	.word	0x20001498

08000fd0 <HAL_RTC_AlarmAEventCallback>:
//======================================================================================
/*
 * Alarm event handler. Interrupt happens when actual time is equals to alarm
 */
void HAL_RTC_AlarmAEventCallback (RTC_HandleTypeDef * hrtc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
//	f_close(&fil);

//	uint8_t alarmArray[] = "Alarm!\n";
//	HAL_UART_Transmit(&huart1, alarmArray, sizeof(alarmArray), 200);

	alarmFlag = 1;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]

	return;
 8000fde:	bf00      	nop
}
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200000a6 	.word	0x200000a6

08000ff0 <decToBcd>:
//======================================================================================
//======================================================================================
static uint8_t decToBcd(int val)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <decToBcd+0x48>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1092      	asrs	r2, r2, #2
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	b2d8      	uxtb	r0, r3
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <decToBcd+0x48>)
 8001010:	fb83 1302 	smull	r1, r3, r3, r2
 8001014:	1099      	asrs	r1, r3, #2
 8001016:	17d3      	asrs	r3, r2, #31
 8001018:	1ac9      	subs	r1, r1, r3
 800101a:	460b      	mov	r3, r1
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	1ad1      	subs	r1, r2, r3
 8001024:	b2cb      	uxtb	r3, r1
 8001026:	4403      	add	r3, r0
 8001028:	b2db      	uxtb	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	66666667 	.word	0x66666667

0800103c <bcdToDec>:
//======================================================================================
//======================================================================================
static int bcdToDec(uint8_t val)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	b2db      	uxtb	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	461a      	mov	r2, r3
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	4413      	add	r3, r2
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <Set_Time_External>:
//======================================================================================
//======================================================================================
static void Set_Time_External(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af04      	add	r7, sp, #16
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4623      	mov	r3, r4
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	4603      	mov	r3, r0
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffaf 	bl	8000ff0 <decToBcd>
 8001092:	4603      	mov	r3, r0
 8001094:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffa9 	bl	8000ff0 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 80010a2:	797b      	ldrb	r3, [r7, #5]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffa3 	bl	8000ff0 <decToBcd>
 80010aa:	4603      	mov	r3, r0
 80010ac:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 80010ae:	793b      	ldrb	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff9d 	bl	8000ff0 <decToBcd>
 80010b6:	4603      	mov	r3, r0
 80010b8:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 80010ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff96 	bl	8000ff0 <decToBcd>
 80010c4:	4603      	mov	r3, r0
 80010c6:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 80010c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff8f 	bl	8000ff0 <decToBcd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 80010d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff88 	bl	8000ff0 <decToBcd>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2307      	movs	r3, #7
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2200      	movs	r2, #0
 80010f8:	21d0      	movs	r1, #208	; 0xd0
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <Set_Time_External+0x9c>)
 80010fc:	f001 fa14 	bl	8002528 <HAL_I2C_Mem_Write>
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	2000143c 	.word	0x2000143c

0800110c <Get_Time_External>:
//======================================================================================
//======================================================================================
static void Get_Time_External(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2307      	movs	r3, #7
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	463b      	mov	r3, r7
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2200      	movs	r2, #0
 8001124:	21d0      	movs	r1, #208	; 0xd0
 8001126:	481f      	ldr	r0, [pc, #124]	; (80011a4 <Get_Time_External+0x98>)
 8001128:	f001 faf8 	bl	800271c <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 800112c:	783b      	ldrb	r3, [r7, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff84 	bl	800103c <bcdToDec>
 8001134:	4603      	mov	r3, r0
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <Get_Time_External+0x9c>)
 800113a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff7c 	bl	800103c <bcdToDec>
 8001144:	4603      	mov	r3, r0
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <Get_Time_External+0x9c>)
 800114a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff74 	bl	800103c <bcdToDec>
 8001154:	4603      	mov	r3, r0
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <Get_Time_External+0x9c>)
 800115a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff6c 	bl	800103c <bcdToDec>
 8001164:	4603      	mov	r3, r0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <Get_Time_External+0x9c>)
 800116a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff64 	bl	800103c <bcdToDec>
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <Get_Time_External+0x9c>)
 800117a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff5c 	bl	800103c <bcdToDec>
 8001184:	4603      	mov	r3, r0
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <Get_Time_External+0x9c>)
 800118a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <bcdToDec>
 8001194:	4603      	mov	r3, r0
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <Get_Time_External+0x9c>)
 800119a:	719a      	strb	r2, [r3, #6]
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000143c 	.word	0x2000143c
 80011a8:	2000157c 	.word	0x2000157c

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fd2f 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f87b 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 fa53 	bl	8001664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011be:	f000 fa27 	bl	8001610 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80011c2:	f000 f9c5 	bl	8001550 <MX_SPI1_Init>
  MX_FATFS_Init();
 80011c6:	f004 fd45 	bl	8005c54 <MX_FATFS_Init>
  MX_I2C1_Init();
 80011ca:	f000 f907 	bl	80013dc <MX_I2C1_Init>
  MX_RTC_Init();
 80011ce:	f000 f933 	bl	8001438 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80011d2:	f000 f9f3 	bl	80015bc <MX_USART1_UART_Init>
//  Set_Alarm();

  /*
   *
   */
  fresult = f_mount(&fs, "/", 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	492b      	ldr	r1, [pc, #172]	; (8001288 <main+0xdc>)
 80011da:	482c      	ldr	r0, [pc, #176]	; (800128c <main+0xe0>)
 80011dc:	f005 fa34 	bl	8006648 <f_mount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <main+0xe4>)
 80011e6:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <main+0xe4>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <main+0x4c>
	  Send_Uart("Error in mounting SD CARD.\n\n");
 80011f0:	4828      	ldr	r0, [pc, #160]	; (8001294 <main+0xe8>)
 80011f2:	f7ff fed5 	bl	8000fa0 <Send_Uart>
 80011f6:	e002      	b.n	80011fe <main+0x52>
  else
	  Send_Uart("SD CARD mounted successfully.\n\n");
 80011f8:	4827      	ldr	r0, [pc, #156]	; (8001298 <main+0xec>)
 80011fa:	f7ff fed1 	bl	8000fa0 <Send_Uart>

  Set_Time_External(0, 0, 0, 5, 3, 1, 19);
 80011fe:	2313      	movs	r3, #19
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2303      	movs	r3, #3
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2305      	movs	r3, #5
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff2b 	bl	800106c <Set_Time_External>
//
//  	  //Function call to store as string second argument into first argument. Returns number of bytes of string copied.
//  	  uint8_t timeSizeBuffer = sprintf((char *)time, "%02u:%02u:%02u\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
//	  uint8_t dateSizeBuffer = sprintf((char *)date, "%02u-%02u-%02u ", gDate.Date, gDate.Month, gDate.Year);

	  Get_Time_External();
 8001216:	f7ff ff79 	bl	800110c <Get_Time_External>
	  uint8_t timeSizeBuffer = sprintf(timeToSend, "%02d:%02d:%02d\n", time.hour, time.minutes, time.seconds);
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <main+0xf0>)
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	461a      	mov	r2, r3
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <main+0xf0>)
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	4619      	mov	r1, r3
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <main+0xf0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	f107 0018 	add.w	r0, r7, #24
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	460b      	mov	r3, r1
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <main+0xf4>)
 8001234:	f005 fadc 	bl	80067f0 <siprintf>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	  f_close(&fil);
//
//    Clear_Buffer();

  	  //Function call to transmit time array through serial port
   	  HAL_UART_Transmit(&huart1, timeToSend, timeSizeBuffer, 500);
 800123e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001242:	b29a      	uxth	r2, r3
 8001244:	f107 0118 	add.w	r1, r7, #24
 8001248:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800124c:	4815      	ldr	r0, [pc, #84]	; (80012a4 <main+0xf8>)
 800124e:	f004 f8a2 	bl	8005396 <HAL_UART_Transmit>

   	  if(alarmFlag)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <main+0xfc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <main+0xce>
   	  {
   		  alarmFlag = 0;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <main+0xfc>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
   		  uint8_t alarmArray[] = "Alarm!\n";
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <main+0x100>)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126a:	e883 0003 	stmia.w	r3, {r0, r1}
   		  HAL_UART_Transmit(&huart1, alarmArray, sizeof(alarmArray), 200);
 800126e:	1d39      	adds	r1, r7, #4
 8001270:	23c8      	movs	r3, #200	; 0xc8
 8001272:	2208      	movs	r2, #8
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <main+0xf8>)
 8001276:	f004 f88e 	bl	8005396 <HAL_UART_Transmit>
   	  }

   	  Clear_Buffer();
 800127a:	f7ff fe77 	bl	8000f6c <Clear_Buffer>
   	  HAL_Delay(1000);
 800127e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001282:	f000 fd39 	bl	8001cf8 <HAL_Delay>
  {
 8001286:	e7c6      	b.n	8001216 <main+0x6a>
 8001288:	08007014 	.word	0x08007014
 800128c:	20000404 	.word	0x20000404
 8001290:	2000158c 	.word	0x2000158c
 8001294:	08007018 	.word	0x08007018
 8001298:	08007038 	.word	0x08007038
 800129c:	2000157c 	.word	0x2000157c
 80012a0:	08007058 	.word	0x08007058
 80012a4:	20001498 	.word	0x20001498
 80012a8:	200000a6 	.word	0x200000a6
 80012ac:	08007068 	.word	0x08007068

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ac      	sub	sp, #176	; 0xb0
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012ba:	2234      	movs	r2, #52	; 0x34
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fa8e 	bl	80067e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	225c      	movs	r2, #92	; 0x5c
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 fa7f 	bl	80067e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <SystemClock_Config+0x124>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <SystemClock_Config+0x124>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <SystemClock_Config+0x124>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <SystemClock_Config+0x128>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <SystemClock_Config+0x128>)
 8001308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <SystemClock_Config+0x128>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800131a:	2309      	movs	r3, #9
 800131c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001346:	23b4      	movs	r3, #180	; 0xb4
 8001348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fd8c 	bl	8003e80 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800136e:	f000 f9fd 	bl	800176c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001372:	f001 ff51 	bl	8003218 <HAL_PWREx_EnableOverDrive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800137c:	f000 f9f6 	bl	800176c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001398:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800139c:	2105      	movs	r1, #5
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 ff8a 	bl	80032b8 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80013aa:	f000 f9df 	bl	800176c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013ae:	2320      	movs	r3, #32
 80013b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f895 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80013c8:	f000 f9d0 	bl	800176c <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	37b0      	adds	r7, #176	; 0xb0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C1_Init+0x50>)
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <MX_I2C1_Init+0x54>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_I2C1_Init+0x50>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_I2C1_Init+0x58>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_I2C1_Init+0x50>)
 80013fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2C1_Init+0x50>)
 800141a:	f000 ff4d 	bl	80022b8 <HAL_I2C_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 f9a2 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000143c 	.word	0x2000143c
 8001430:	40005400 	.word	0x40005400
 8001434:	000186a0 	.word	0x000186a0

08001438 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800143e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2228      	movs	r2, #40	; 0x28
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f005 f9c1 	bl	80067e0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_RTC_Init+0x110>)
 8001460:	4a3a      	ldr	r2, [pc, #232]	; (800154c <MX_RTC_Init+0x114>)
 8001462:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <MX_RTC_Init+0x110>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_RTC_Init+0x110>)
 800146c:	227f      	movs	r2, #127	; 0x7f
 800146e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <MX_RTC_Init+0x110>)
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <MX_RTC_Init+0x110>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <MX_RTC_Init+0x110>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MX_RTC_Init+0x110>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001488:	482f      	ldr	r0, [pc, #188]	; (8001548 <MX_RTC_Init+0x110>)
 800148a:	f002 ff53 	bl	8004334 <HAL_RTC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001494:	f000 f96a 	bl	800176c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x5;
 8001498:	2305      	movs	r3, #5
 800149a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x40;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	4823      	ldr	r0, [pc, #140]	; (8001548 <MX_RTC_Init+0x110>)
 80014bc:	f002 ffcb 	bl	8004456 <HAL_RTC_SetTime>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80014c6:	f000 f951 	bl	800176c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80014ca:	2305      	movs	r3, #5
 80014cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MAY;
 80014d0:	2305      	movs	r3, #5
 80014d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x22;
 80014d6:	2322      	movs	r3, #34	; 0x22
 80014d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x20;
 80014dc:	2320      	movs	r3, #32
 80014de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2201      	movs	r2, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	4817      	ldr	r0, [pc, #92]	; (8001548 <MX_RTC_Init+0x110>)
 80014ec:	f003 f870 	bl	80045d0 <HAL_RTC_SetDate>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80014f6:	f000 f939 	bl	800176c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x5;
 80014fa:	2305      	movs	r3, #5
 80014fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x45;
 80014fe:	2345      	movs	r3, #69	; 0x45
 8001500:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001502:	2300      	movs	r3, #0
 8001504:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800151e:	2301      	movs	r3, #1
 8001520:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_RTC_Init+0x110>)
 8001532:	f003 f8f5 	bl	8004720 <HAL_RTC_SetAlarm_IT>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800153c:	f000 f916 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3740      	adds	r7, #64	; 0x40
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000155c 	.word	0x2000155c
 800154c:	40002800 	.word	0x40002800

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <MX_SPI1_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001584:	2210      	movs	r2, #16
 8001586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI1_Init+0x64>)
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_SPI1_Init+0x64>)
 80015a2:	f003 fab7 	bl	8004b14 <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ac:	f000 f8de 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20001590 	.word	0x20001590
 80015b8:	40013000 	.word	0x40013000

080015bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART1_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART1_UART_Init+0x4c>)
 80015f4:	f003 fe82 	bl	80052fc <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f000 f8b5 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20001498 	.word	0x20001498
 800160c:	40011000 	.word	0x40011000

08001610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_USART2_UART_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_USART2_UART_Init+0x4c>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_USART2_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_USART2_UART_Init+0x4c>)
 8001648:	f003 fe58 	bl	80052fc <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 f88b 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200015e8 	.word	0x200015e8
 8001660:	40004400 	.word	0x40004400

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <MX_GPIO_Init+0xf4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a35      	ldr	r2, [pc, #212]	; (8001758 <MX_GPIO_Init+0xf4>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <MX_GPIO_Init+0xf4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_GPIO_Init+0xf4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a27      	ldr	r2, [pc, #156]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	481b      	ldr	r0, [pc, #108]	; (800175c <MX_GPIO_Init+0xf8>)
 80016f0:	f000 fdc8 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2101      	movs	r1, #1
 80016f8:	4819      	ldr	r0, [pc, #100]	; (8001760 <MX_GPIO_Init+0xfc>)
 80016fa:	f000 fdc3 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_GPIO_Init+0x100>)
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <MX_GPIO_Init+0x104>)
 8001714:	f000 fc24 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001718:	2320      	movs	r3, #32
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <MX_GPIO_Init+0xf8>)
 8001730:	f000 fc16 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0xfc>)
 800174c:	f000 fc08 	bl	8001f60 <HAL_GPIO_Init>

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	10210000 	.word	0x10210000
 8001768:	40020800 	.word	0x40020800

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <HAL_MspInit+0x4c>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_MspInit+0x4c>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ba:	2007      	movs	r0, #7
 80017bc:	f000 fb8e 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	; (8001850 <HAL_I2C_MspInit+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12b      	bne.n	8001846 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_I2C_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_I2C_MspInit+0x88>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_I2C_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180e:	2312      	movs	r3, #18
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181a:	2304      	movs	r3, #4
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <HAL_I2C_MspInit+0x8c>)
 8001826:	f000 fb9b 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_I2C_MspInit+0x88>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <HAL_I2C_MspInit+0x88>)
 8001834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_I2C_MspInit+0x88>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40005400 	.word	0x40005400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400

0800185c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_RTC_MspInit+0x30>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10a      	bne.n	8001884 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_RTC_MspInit+0x34>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2029      	movs	r0, #41	; 0x29
 800187a:	f000 fb3a 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800187e:	2029      	movs	r0, #41	; 0x29
 8001880:	f000 fb53 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40002800 	.word	0x40002800
 8001890:	42470e3c 	.word	0x42470e3c

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_SPI_MspInit+0xc0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d149      	bne.n	800194a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_SPI_MspInit+0xc4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191a:	2305      	movs	r3, #5
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <HAL_SPI_MspInit+0xc8>)
 8001926:	f000 fb1b 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800192a:	2308      	movs	r3, #8
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_SPI_MspInit+0xcc>)
 8001946:	f000 fb0b 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40013000 	.word	0x40013000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400

08001964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <HAL_UART_MspInit+0xe8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12d      	bne.n	80019e2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_UART_MspInit+0xec>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a30      	ldr	r2, [pc, #192]	; (8001a50 <HAL_UART_MspInit+0xec>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_UART_MspInit+0xec>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d0:	2307      	movs	r3, #7
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <HAL_UART_MspInit+0xf0>)
 80019dc:	f000 fac0 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e0:	e030      	b.n	8001a44 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_UART_MspInit+0xf4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d12b      	bne.n	8001a44 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0xec>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0xec>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_UART_MspInit+0xec>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6313      	str	r3, [r2, #48]	; 0x30
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_UART_MspInit+0xec>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a24:	230c      	movs	r3, #12
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a34:	2307      	movs	r3, #7
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0xf0>)
 8001a40:	f000 fa8e 	bl	8001f60 <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40004400 	.word	0x40004400

08001a5c <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <SDTimer_Handler+0x40>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <SDTimer_Handler+0x40>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <SDTimer_Handler+0x40>)
 8001a76:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <SDTimer_Handler+0x44>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <SDTimer_Handler+0x34>
    Timer2--;
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <SDTimer_Handler+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SDTimer_Handler+0x44>)
 8001a8e:	701a      	strb	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000265d 	.word	0x2000265d
 8001aa0:	2000265c 	.word	0x2000265c

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <SysTick_Handler+0x30>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SysTick_Handler+0x30>)
 8001b04:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <SysTick_Handler+0x30>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d904      	bls.n	8001b1a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Handler+0x30>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001b16:	f7ff ffa1 	bl	8001a5c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1a:	f000 f8cd 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200000a7 	.word	0x200000a7

08001b28 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <RTC_Alarm_IRQHandler+0x10>)
 8001b2e:	f002 ff2f 	bl	8004990 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000155c 	.word	0x2000155c

08001b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x50>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x16>
		heap_end = &end;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_sbrk+0x50>)
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <_sbrk+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <_sbrk+0x50>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <_sbrk+0x50>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	466a      	mov	r2, sp
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d907      	bls.n	8001b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b66:	f004 fe11 	bl	800678c <__errno>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e006      	b.n	8001b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <_sbrk+0x50>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <_sbrk+0x50>)
 8001b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200000a8 	.word	0x200000a8
 8001b90:	200046d8 	.word	0x200046d8

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <SystemInit+0x28>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <SystemInit+0x28>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SystemInit+0x28>)
 8001baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bae:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bc6:	e003      	b.n	8001bd0 <LoopCopyDataInit>

08001bc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bce:	3104      	adds	r1, #4

08001bd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd8:	d3f6      	bcc.n	8001bc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bda:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bdc:	e002      	b.n	8001be4 <LoopFillZerobss>

08001bde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001be0:	f842 3b04 	str.w	r3, [r2], #4

08001be4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001be6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be8:	d3f9      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bea:	f7ff ffd3 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f004 fdd3 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7ff fadb 	bl	80011ac <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bfc:	080070cc 	.word	0x080070cc
  ldr  r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c04:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001c08:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001c0c:	200046d8 	.word	0x200046d8

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f94d 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fd98 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f965 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f92d 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	2000000c 	.word	0x2000000c
 8001cdc:	20002660 	.word	0x20002660

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20002660 	.word	0x20002660

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_Delay+0x40>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000000c 	.word	0x2000000c

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff29 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff3e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff31 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e165      	b.n	8002248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 8154 	bne.w	8002242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00b      	beq.n	8001fba <HAL_GPIO_Init+0x5a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fae:	2b11      	cmp	r3, #17
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0xfc>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b12      	cmp	r3, #18
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80ae 	beq.w	8002242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <HAL_GPIO_Init+0x2fc>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a5b      	ldr	r2, [pc, #364]	; (800225c <HAL_GPIO_Init+0x2fc>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_GPIO_Init+0x2fc>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_GPIO_Init+0x300>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4e      	ldr	r2, [pc, #312]	; (8002264 <HAL_GPIO_Init+0x304>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d025      	beq.n	800217a <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_GPIO_Init+0x308>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_GPIO_Init+0x30c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_GPIO_Init+0x310>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x20e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x314>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x20a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x318>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x206>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_GPIO_Init+0x31c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x202>
 800215e:	2306      	movs	r3, #6
 8002160:	e00c      	b.n	800217c <HAL_GPIO_Init+0x21c>
 8002162:	2307      	movs	r3, #7
 8002164:	e00a      	b.n	800217c <HAL_GPIO_Init+0x21c>
 8002166:	2305      	movs	r3, #5
 8002168:	e008      	b.n	800217c <HAL_GPIO_Init+0x21c>
 800216a:	2304      	movs	r3, #4
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x21c>
 800216e:	2303      	movs	r3, #3
 8002170:	e004      	b.n	800217c <HAL_GPIO_Init+0x21c>
 8002172:	2302      	movs	r3, #2
 8002174:	e002      	b.n	800217c <HAL_GPIO_Init+0x21c>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x21c>
 800217a:	2300      	movs	r3, #0
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f002 0203 	and.w	r2, r2, #3
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	4093      	lsls	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218c:	4934      	ldr	r1, [pc, #208]	; (8002260 <HAL_GPIO_Init+0x300>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_GPIO_Init+0x320>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021be:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_GPIO_Init+0x320>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_GPIO_Init+0x320>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e8:	4a25      	ldr	r2, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x320>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_GPIO_Init+0x320>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002212:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_GPIO_Init+0x320>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_GPIO_Init+0x320>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800223c:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_GPIO_Init+0x320>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	f67f ae96 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40023800 	.word	0x40023800
 8002260:	40013800 	.word	0x40013800
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400
 800226c:	40020800 	.word	0x40020800
 8002270:	40020c00 	.word	0x40020c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40021400 	.word	0x40021400
 800227c:	40021800 	.word	0x40021800
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e11f      	b.n	800250a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fa74 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800231c:	f001 f8be 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a7b      	ldr	r2, [pc, #492]	; (8002514 <HAL_I2C_Init+0x25c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d807      	bhi.n	800233c <HAL_I2C_Init+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_I2C_Init+0x260>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e006      	b.n	800234a <HAL_I2C_Init+0x92>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_I2C_Init+0x264>)
 8002340:	4293      	cmp	r3, r2
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0db      	b.n	800250a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_I2C_Init+0x268>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a64      	ldr	r2, [pc, #400]	; (8002514 <HAL_I2C_Init+0x25c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d802      	bhi.n	800238c <HAL_I2C_Init+0xd4>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	e009      	b.n	80023a0 <HAL_I2C_Init+0xe8>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_I2C_Init+0x26c>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4956      	ldr	r1, [pc, #344]	; (8002514 <HAL_I2C_Init+0x25c>)
 80023bc:	428b      	cmp	r3, r1
 80023be:	d80d      	bhi.n	80023dc <HAL_I2C_Init+0x124>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	bf38      	it	cc
 80023d8:	2304      	movcc	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1c4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x150>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x176>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x17e>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1c4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1a4>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1c4>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4603      	mov	r3, r0
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	460b      	mov	r3, r1
 800253c:	813b      	strh	r3, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002542:	f7ff fbcd 	bl	8001ce0 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b20      	cmp	r3, #32
 8002552:	f040 80d9 	bne.w	8002708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2319      	movs	r3, #25
 800255c:	2201      	movs	r2, #1
 800255e:	496d      	ldr	r1, [pc, #436]	; (8002714 <HAL_I2C_Mem_Write+0x1ec>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fc7b 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
 800256e:	e0cc      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_I2C_Mem_Write+0x56>
 800257a:	2302      	movs	r3, #2
 800257c:	e0c5      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d007      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2221      	movs	r2, #33	; 0x21
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_I2C_Mem_Write+0x1f0>)
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e6:	88f8      	ldrh	r0, [r7, #6]
 80025e8:	893a      	ldrh	r2, [r7, #8]
 80025ea:	8979      	ldrh	r1, [r7, #10]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4603      	mov	r3, r0
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fab6 	bl	8002b68 <I2C_RequestMemoryWrite>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d052      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e081      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fcfc 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_I2C_Mem_Write+0x180>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1aa      	bne.n	8002606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fce8 	bl	800308a <I2C_WaitOnBTFFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e016      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000

0800271c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002736:	f7ff fad3 	bl	8001ce0 <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	f040 8208 	bne.w	8002b5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2319      	movs	r3, #25
 8002750:	2201      	movs	r2, #1
 8002752:	497b      	ldr	r1, [pc, #492]	; (8002940 <HAL_I2C_Mem_Read+0x224>)
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fb81 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	e1fb      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Mem_Read+0x56>
 800276e:	2302      	movs	r3, #2
 8002770:	e1f4      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d007      	beq.n	8002798 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2222      	movs	r2, #34	; 0x22
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_I2C_Mem_Read+0x228>)
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027da:	88f8      	ldrh	r0, [r7, #6]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	8979      	ldrh	r1, [r7, #10]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4603      	mov	r3, r0
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fa50 	bl	8002c90 <I2C_RequestMemoryRead>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1b0      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e184      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b01      	cmp	r3, #1
 8002830:	d11b      	bne.n	800286a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e164      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b02      	cmp	r3, #2
 8002870:	d11b      	bne.n	80028aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	e144      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c0:	e138      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	f200 80f1 	bhi.w	8002aae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d123      	bne.n	800291c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fc17 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e139      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
 800291a:	e10b      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	d14e      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2200      	movs	r2, #0
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_I2C_Mem_Read+0x22c>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa94 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e10e      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000
 8002948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c0:	e0b8      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2200      	movs	r2, #0
 80029ca:	4966      	ldr	r1, [pc, #408]	; (8002b64 <HAL_I2C_Mem_Read+0x448>)
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fa45 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0bf      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	2200      	movs	r2, #0
 8002a26:	494f      	ldr	r1, [pc, #316]	; (8002b64 <HAL_I2C_Mem_Read+0x448>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fa17 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e091      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aac:	e042      	b.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fb2a 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e04c      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d118      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f aec2 	bne.w	80028c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	00010004 	.word	0x00010004

08002b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f95c 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e05f      	b.n	8002c84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc4:	897b      	ldrh	r3, [r7, #10]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	6a3a      	ldr	r2, [r7, #32]
 8002bd8:	492c      	ldr	r1, [pc, #176]	; (8002c8c <I2C_RequestMemoryWrite+0x124>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f995 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e04c      	b.n	8002c84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	6a39      	ldr	r1, [r7, #32]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f9ff 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02b      	b.n	8002c84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c32:	893b      	ldrh	r3, [r7, #8]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	e021      	b.n	8002c82 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c3e:	893b      	ldrh	r3, [r7, #8]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	6a39      	ldr	r1, [r7, #32]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9d9 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d107      	bne.n	8002c74 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e005      	b.n	8002c84 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	00010002 	.word	0x00010002

08002c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	817b      	strh	r3, [r7, #10]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	813b      	strh	r3, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f8c0 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0a9      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfc:	897b      	ldrh	r3, [r7, #10]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	4951      	ldr	r1, [pc, #324]	; (8002e58 <I2C_RequestMemoryRead+0x1c8>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8f9 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e096      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	6a39      	ldr	r1, [r7, #32]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f963 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e075      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	e021      	b.n	8002dba <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	6a39      	ldr	r1, [r7, #32]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f93d 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d107      	bne.n	8002dac <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04f      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db0:	893b      	ldrh	r3, [r7, #8]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f922 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e034      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f82a 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e013      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <I2C_RequestMemoryRead+0x1c8>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f863 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010002 	.word	0x00010002

08002e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	e025      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe ff33 	bl	8001ce0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e023      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	e00c      	b.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d0b6      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f18:	e051      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d123      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e046      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe feb1 	bl	8001ce0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e020      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e00b      	b.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d18d      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8ce 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02d      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d021      	beq.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fe57 	bl	8001ce0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d1ca      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f88d 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e02d      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d021      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fe16 	bl	8001ce0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d1ca      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003118:	e042      	b.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d119      	bne.n	800315c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e029      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe fdc0 	bl	8001ce0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d1b5      	bne.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d11b      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_PWREx_EnableOverDrive+0x94>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003244:	f7fe fd4c 	bl	8001ce0 <HAL_GetTick>
 8003248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800324a:	e009      	b.n	8003260 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800324c:	f7fe fd48 	bl	8001ce0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800325a:	d901      	bls.n	8003260 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e01f      	b.n	80032a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d1ee      	bne.n	800324c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003274:	f7fe fd34 	bl	8001ce0 <HAL_GetTick>
 8003278:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800327a:	e009      	b.n	8003290 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800327c:	f7fe fd30 	bl	8001ce0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328a:	d901      	bls.n	8003290 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e007      	b.n	80032a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800329c:	d1ee      	bne.n	800327c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	420e0040 	.word	0x420e0040
 80032b0:	40007000 	.word	0x40007000
 80032b4:	420e0044 	.word	0x420e0044

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0cc      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d90c      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a58      	ldr	r2, [pc, #352]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a52      	ldr	r2, [pc, #328]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	494d      	ldr	r1, [pc, #308]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d044      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d119      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	2b03      	cmp	r3, #3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e067      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe fc9a 	bl	8001ce0 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe fc96 	bl	8001ce0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e04f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d20c      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4916      	ldr	r1, [pc, #88]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490e      	ldr	r1, [pc, #56]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343e:	f000 fb7f 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	fa21 f303 	lsr.w	r3, r1, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fbfa 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00
 8003474:	40023800 	.word	0x40023800
 8003478:	08007070 	.word	0x08007070
 800347c:	20000004 	.word	0x20000004
 8003480:	20000008 	.word	0x20000008

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_RCC_GetHCLKFreq+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a0:	f7ff fff0 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a4:	4601      	mov	r1, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0a9b      	lsrs	r3, r3, #10
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08007080 	.word	0x08007080

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034c8:	f7ff ffdc 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034cc:	4601      	mov	r1, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0b5b      	lsrs	r3, r3, #13
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08007080 	.word	0x08007080

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	; 0x30
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	496c      	ldr	r1, [pc, #432]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003542:	2301      	movs	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003552:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	4960      	ldr	r1, [pc, #384]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003570:	2301      	movs	r3, #1
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003580:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4955      	ldr	r1, [pc, #340]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d101      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035bc:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	4946      	ldr	r1, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035da:	d101      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 808a 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003622:	f7fe fb5d 	bl	8001ce0 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fb59 	bl	8001ce0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e278      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003648:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	429a      	cmp	r2, r3
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003670:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800367c:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d114      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fb27 	bl	8001ce0 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fe fb23 	bl	8001ce0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e240      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c4:	d114      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80036d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036da:	4902      	ldr	r1, [pc, #8]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
 80036e0:	e00c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42470e40 	.word	0x42470e40
 80036f0:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a49      	ldr	r2, [pc, #292]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800370a:	4313      	orrs	r3, r2
 800370c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003722:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003730:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	4937      	ldr	r1, [pc, #220]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003752:	4b32      	ldr	r3, [pc, #200]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	492e      	ldr	r1, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	4926      	ldr	r1, [pc, #152]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003792:	d101      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003794:	2301      	movs	r3, #1
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	491a      	ldr	r1, [pc, #104]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	4911      	ldr	r1, [pc, #68]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80037e6:	2301      	movs	r3, #1
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d005      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f8:	f040 80ff 	bne.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7fe fa6d 	bl	8001ce0 <HAL_GetTick>
 8003806:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003808:	e00e      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800380a:	f7fe fa69 	bl	8001ce0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d907      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e188      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800381c:	40023800 	.word	0x40023800
 8003820:	424711e0 	.word	0x424711e0
 8003824:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003828:	4b7e      	ldr	r3, [pc, #504]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003850:	2b00      	cmp	r3, #0
 8003852:	d028      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d124      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800385c:	4b71      	ldr	r3, [pc, #452]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	3301      	adds	r3, #1
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003874:	0e1b      	lsrs	r3, r3, #24
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	3b01      	subs	r3, #1
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	4961      	ldr	r1, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d035      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d0:	d130      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ea:	0f1b      	lsrs	r3, r3, #28
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	019b      	lsls	r3, r3, #6
 80038fc:	431a      	orrs	r2, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	071b      	lsls	r3, r3, #28
 8003914:	4943      	ldr	r1, [pc, #268]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800391c:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800391e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003922:	f023 021f 	bic.w	r2, r3, #31
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	493d      	ldr	r1, [pc, #244]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d029      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003948:	d124      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	4925      	ldr	r1, [pc, #148]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	2b00      	cmp	r3, #0
 800399e:	d016      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	4917      	ldr	r1, [pc, #92]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe f984 	bl	8001ce0 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039dc:	f7fe f980 	bl	8001ce0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e09f      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 8095 	bne.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fe f96a 	bl	8001ce0 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0e:	e00f      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a10:	f7fe f966 	bl	8001ce0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d908      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e085      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	42470068 	.word	0x42470068
 8003a2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3c:	d0e8      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d127      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003a66:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	3301      	adds	r3, #1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	431a      	orrs	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	4928      	ldr	r1, [pc, #160]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a9c:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aca:	d118      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	0e1b      	lsrs	r3, r3, #24
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	019b      	lsls	r3, r3, #6
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	4910      	ldr	r1, [pc, #64]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe f8ec 	bl	8001ce0 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b0c:	f7fe f8e8 	bl	8001ce0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e007      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2a:	d1ef      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	; 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470070 	.word	0x42470070

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5a:	4bc6      	ldr	r3, [pc, #792]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	f200 817e 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x324>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <HAL_RCC_GetSysClockFreq+0x30>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003e65 	.word	0x08003e65
 8003b78:	08003e65 	.word	0x08003e65
 8003b7c:	08003e65 	.word	0x08003e65
 8003b80:	08003bab 	.word	0x08003bab
 8003b84:	08003e65 	.word	0x08003e65
 8003b88:	08003e65 	.word	0x08003e65
 8003b8c:	08003e65 	.word	0x08003e65
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003e65 	.word	0x08003e65
 8003b98:	08003e65 	.word	0x08003e65
 8003b9c:	08003e65 	.word	0x08003e65
 8003ba0:	08003d0d 	.word	0x08003d0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4bb4      	ldr	r3, [pc, #720]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x338>)
 8003ba6:	613b      	str	r3, [r7, #16]
       break;
 8003ba8:	e15f      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003baa:	4bb4      	ldr	r3, [pc, #720]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x33c>)
 8003bac:	613b      	str	r3, [r7, #16]
      break;
 8003bae:	e15c      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb0:	4bb0      	ldr	r3, [pc, #704]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bba:	4bae      	ldr	r3, [pc, #696]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04a      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4bab      	ldr	r3, [pc, #684]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	ea03 0501 	and.w	r5, r3, r1
 8003bdc:	ea04 0602 	and.w	r6, r4, r2
 8003be0:	4629      	mov	r1, r5
 8003be2:	4632      	mov	r2, r6
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	0154      	lsls	r4, r2, #5
 8003bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bf2:	014b      	lsls	r3, r1, #5
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	1b49      	subs	r1, r1, r5
 8003bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	0194      	lsls	r4, r2, #6
 8003c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c0c:	018b      	lsls	r3, r1, #6
 8003c0e:	1a5b      	subs	r3, r3, r1
 8003c10:	eb64 0402 	sbc.w	r4, r4, r2
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	00e2      	lsls	r2, r4, #3
 8003c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c22:	00d9      	lsls	r1, r3, #3
 8003c24:	460b      	mov	r3, r1
 8003c26:	4614      	mov	r4, r2
 8003c28:	195b      	adds	r3, r3, r5
 8003c2a:	eb44 0406 	adc.w	r4, r4, r6
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	0262      	lsls	r2, r4, #9
 8003c38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c3c:	0259      	lsls	r1, r3, #9
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	4621      	mov	r1, r4
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4623      	mov	r3, r4
 8003c50:	f7fc fb36 	bl	80002c0 <__aeabi_uldivmod>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e049      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5c:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	f04f 0400 	mov.w	r4, #0
 8003c66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	ea03 0501 	and.w	r5, r3, r1
 8003c72:	ea04 0602 	and.w	r6, r4, r2
 8003c76:	4629      	mov	r1, r5
 8003c78:	4632      	mov	r2, r6
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	f04f 0400 	mov.w	r4, #0
 8003c82:	0154      	lsls	r4, r2, #5
 8003c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c88:	014b      	lsls	r3, r1, #5
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	1b49      	subs	r1, r1, r5
 8003c90:	eb62 0206 	sbc.w	r2, r2, r6
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	0194      	lsls	r4, r2, #6
 8003c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ca2:	018b      	lsls	r3, r1, #6
 8003ca4:	1a5b      	subs	r3, r3, r1
 8003ca6:	eb64 0402 	sbc.w	r4, r4, r2
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	00e2      	lsls	r2, r4, #3
 8003cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cb8:	00d9      	lsls	r1, r3, #3
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	195b      	adds	r3, r3, r5
 8003cc0:	eb44 0406 	adc.w	r4, r4, r6
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	02a2      	lsls	r2, r4, #10
 8003cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cd2:	0299      	lsls	r1, r3, #10
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4614      	mov	r4, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	4621      	mov	r1, r4
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f04f 0400 	mov.w	r4, #0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f7fc faeb 	bl	80002c0 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf0:	4b60      	ldr	r3, [pc, #384]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	613b      	str	r3, [r7, #16]
      break;
 8003d0a:	e0ae      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d16:	4b57      	ldr	r3, [pc, #348]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04a      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	f04f 0400 	mov.w	r4, #0
 8003d2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	ea03 0501 	and.w	r5, r3, r1
 8003d38:	ea04 0602 	and.w	r6, r4, r2
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4632      	mov	r2, r6
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	f04f 0400 	mov.w	r4, #0
 8003d48:	0154      	lsls	r4, r2, #5
 8003d4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d4e:	014b      	lsls	r3, r1, #5
 8003d50:	4619      	mov	r1, r3
 8003d52:	4622      	mov	r2, r4
 8003d54:	1b49      	subs	r1, r1, r5
 8003d56:	eb62 0206 	sbc.w	r2, r2, r6
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	f04f 0400 	mov.w	r4, #0
 8003d62:	0194      	lsls	r4, r2, #6
 8003d64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d68:	018b      	lsls	r3, r1, #6
 8003d6a:	1a5b      	subs	r3, r3, r1
 8003d6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	00e2      	lsls	r2, r4, #3
 8003d7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d7e:	00d9      	lsls	r1, r3, #3
 8003d80:	460b      	mov	r3, r1
 8003d82:	4614      	mov	r4, r2
 8003d84:	195b      	adds	r3, r3, r5
 8003d86:	eb44 0406 	adc.w	r4, r4, r6
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	0262      	lsls	r2, r4, #9
 8003d94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d98:	0259      	lsls	r1, r3, #9
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	4621      	mov	r1, r4
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	f7fc fa88 	bl	80002c0 <__aeabi_uldivmod>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e049      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	ea03 0501 	and.w	r5, r3, r1
 8003dce:	ea04 0602 	and.w	r6, r4, r2
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	0154      	lsls	r4, r2, #5
 8003de0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003de4:	014b      	lsls	r3, r1, #5
 8003de6:	4619      	mov	r1, r3
 8003de8:	4622      	mov	r2, r4
 8003dea:	1b49      	subs	r1, r1, r5
 8003dec:	eb62 0206 	sbc.w	r2, r2, r6
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	0194      	lsls	r4, r2, #6
 8003dfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	1a5b      	subs	r3, r3, r1
 8003e02:	eb64 0402 	sbc.w	r4, r4, r2
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	00e2      	lsls	r2, r4, #3
 8003e10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e14:	00d9      	lsls	r1, r3, #3
 8003e16:	460b      	mov	r3, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	195b      	adds	r3, r3, r5
 8003e1c:	eb44 0406 	adc.w	r4, r4, r6
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	02a2      	lsls	r2, r4, #10
 8003e2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e2e:	0299      	lsls	r1, r3, #10
 8003e30:	460b      	mov	r3, r1
 8003e32:	4614      	mov	r4, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	4621      	mov	r1, r4
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f04f 0400 	mov.w	r4, #0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	f7fc fa3d 	bl	80002c0 <__aeabi_uldivmod>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0f1b      	lsrs	r3, r3, #28
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	613b      	str	r3, [r7, #16]
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x338>)
 8003e66:	613b      	str	r3, [r7, #16]
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	693b      	ldr	r3, [r7, #16]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	007a1200 	.word	0x007a1200

08003e80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8083 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e9a:	4b95      	ldr	r3, [pc, #596]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d019      	beq.n	8003eda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ea6:	4b92      	ldr	r3, [pc, #584]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eb2:	4b8f      	ldr	r3, [pc, #572]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec0:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d112      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eda:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d05b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x11e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d157      	bne.n	8003f9e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e216      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x8a>
 8003efc:	4b7c      	ldr	r3, [pc, #496]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a7b      	ldr	r2, [pc, #492]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e01d      	b.n	8003f46 <HAL_RCC_OscConfig+0xc6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0xae>
 8003f14:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a75      	ldr	r2, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0xc6>
 8003f2e:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6c      	ldr	r2, [pc, #432]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fec7 	bl	8001ce0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f56:	f7fd fec3 	bl	8001ce0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b64      	cmp	r3, #100	; 0x64
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1db      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0xd6>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fd feb3 	bl	8001ce0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7e:	f7fd feaf 	bl	8001ce0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1c7      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0xfe>
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d06f      	beq.n	800408c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fb8:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fc4:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd0:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d11c      	bne.n	8004016 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fdc:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_OscConfig+0x180>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e18f      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4938      	ldr	r1, [pc, #224]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004014:	e03a      	b.n	800408c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401e:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0x274>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd fe5c 	bl	8001ce0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402c:	f7fd fe58 	bl	8001ce0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e170      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4925      	ldr	r1, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	e015      	b.n	800408c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_OscConfig+0x274>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fd fe3b 	bl	8001ce0 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406e:	f7fd fe37 	bl	8001ce0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e14f      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d037      	beq.n	8004108 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_RCC_OscConfig+0x278>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd fe1b 	bl	8001ce0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ae:	f7fd fe17 	bl	8001ce0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e12f      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x22e>
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_OscConfig+0x278>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fd fe04 	bl	8001ce0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040da:	e00f      	b.n	80040fc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fd fe00 	bl	8001ce0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d908      	bls.n	80040fc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e118      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b8a      	ldr	r3, [pc, #552]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e9      	bne.n	80040dc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8097 	beq.w	8004244 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b83      	ldr	r3, [pc, #524]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b7c      	ldr	r3, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b79      	ldr	r3, [pc, #484]	; (800432c <HAL_RCC_OscConfig+0x4ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d118      	bne.n	8004184 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x4ac>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415e:	f7fd fdbf 	bl	8001ce0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004166:	f7fd fdbb 	bl	8001ce0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0d3      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004178:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x4ac>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x31a>
 800418c:	4b66      	ldr	r3, [pc, #408]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a65      	ldr	r2, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x354>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x33c>
 80041a2:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0x354>
 80041bc:	4b5a      	ldr	r3, [pc, #360]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a59      	ldr	r2, [pc, #356]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	4b57      	ldr	r3, [pc, #348]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a56      	ldr	r2, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd fd80 	bl	8001ce0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd fd7c 	bl	8001ce0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e092      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ee      	beq.n	80041e4 <HAL_RCC_OscConfig+0x364>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fd fd6a 	bl	8001ce0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd fd66 	bl	8001ce0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e07c      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ee      	bne.n	8004210 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d068      	beq.n	800431e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d060      	beq.n	800431a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d145      	bne.n	80042ec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004260:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_RCC_OscConfig+0x4b0>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd fd3b 	bl	8001ce0 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd fd37 	bl	8001ce0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e04f      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	019b      	lsls	r3, r3, #6
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	071b      	lsls	r3, r3, #28
 80042b8:	491b      	ldr	r1, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042be:	4b1c      	ldr	r3, [pc, #112]	; (8004330 <HAL_RCC_OscConfig+0x4b0>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fd0c 	bl	8001ce0 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fd fd08 	bl	8001ce0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e020      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x44c>
 80042ea:	e018      	b.n	800431e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x4b0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fd fcf5 	bl	8001ce0 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fd fcf1 	bl	8001ce0 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e009      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_OscConfig+0x4a8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x47a>
 8004318:	e001      	b.n	800431e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	40007000 	.word	0x40007000
 8004330:	42470060 	.word	0x42470060

08004334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e083      	b.n	800444e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7f5b      	ldrb	r3, [r3, #29]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fa80 	bl	800185c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	22ca      	movs	r2, #202	; 0xca
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2253      	movs	r2, #83	; 0x53
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fb7a 	bl	8004a6c <RTC_EnterInitMode>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	22ff      	movs	r2, #255	; 0xff
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e05e      	b.n	800444e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800439e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6919      	ldr	r1, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb0c 	bl	8004a1c <HAL_RTC_WaitForSynchro>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2204      	movs	r2, #4
 8004416:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e018      	b.n	800444e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	22ff      	movs	r2, #255	; 0xff
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004456:	b590      	push	{r4, r7, lr}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	7f1b      	ldrb	r3, [r3, #28]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_RTC_SetTime+0x1c>
 800446e:	2302      	movs	r3, #2
 8004470:	e0aa      	b.n	80045c8 <HAL_RTC_SetTime+0x172>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2202      	movs	r2, #2
 800447c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d126      	bne.n	80044d2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb11 	bl	8004ac4 <RTC_ByteToBcd2>
 80044a2:	4603      	mov	r3, r0
 80044a4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb0a 	bl	8004ac4 <RTC_ByteToBcd2>
 80044b0:	4603      	mov	r3, r0
 80044b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80044b4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	789b      	ldrb	r3, [r3, #2]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb02 	bl	8004ac4 <RTC_ByteToBcd2>
 80044c0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80044c2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	78db      	ldrb	r3, [r3, #3]
 80044ca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e018      	b.n	8004504 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2200      	movs	r2, #0
 80044e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80044f2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80044f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	78db      	ldrb	r3, [r3, #3]
 80044fe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	22ca      	movs	r2, #202	; 0xca
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2253      	movs	r2, #83	; 0x53
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 faa9 	bl	8004a6c <RTC_EnterInitMode>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2204      	movs	r2, #4
 800452c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e047      	b.n	80045c8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004542:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004546:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004556:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d111      	bne.n	80045b2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fa44 	bl	8004a1c <HAL_RTC_WaitForSynchro>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	22ff      	movs	r2, #255	; 0xff
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2204      	movs	r2, #4
 80045a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e00a      	b.n	80045c8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	22ff      	movs	r2, #255	; 0xff
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80045c6:	2300      	movs	r3, #0
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	7f1b      	ldrb	r3, [r3, #28]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_RTC_SetDate+0x1c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e094      	b.n	8004716 <HAL_RTC_SetDate+0x146>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2202      	movs	r2, #2
 80045f6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10e      	bne.n	800461c <HAL_RTC_SetDate+0x4c>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	b2db      	uxtb	r3, r3
 8004614:	330a      	adds	r3, #10
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11c      	bne.n	800465c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	78db      	ldrb	r3, [r3, #3]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa4c 	bl	8004ac4 <RTC_ByteToBcd2>
 800462c:	4603      	mov	r3, r0
 800462e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fa45 	bl	8004ac4 <RTC_ByteToBcd2>
 800463a:	4603      	mov	r3, r0
 800463c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800463e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	789b      	ldrb	r3, [r3, #2]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa3d 	bl	8004ac4 <RTC_ByteToBcd2>
 800464a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800464c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e00e      	b.n	800467a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	78db      	ldrb	r3, [r3, #3]
 8004660:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004668:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800466e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	22ca      	movs	r2, #202	; 0xca
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2253      	movs	r2, #83	; 0x53
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f9ee 	bl	8004a6c <RTC_EnterInitMode>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2204      	movs	r2, #4
 80046a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e033      	b.n	8004716 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d111      	bne.n	8004700 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f99d 	bl	8004a1c <HAL_RTC_WaitForSynchro>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	22ff      	movs	r2, #255	; 0xff
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2204      	movs	r2, #4
 80046f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e00a      	b.n	8004716 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}
	...

08004720 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8004734:	4b93      	ldr	r3, [pc, #588]	; (8004984 <HAL_RTC_SetAlarm_IT+0x264>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a93      	ldr	r2, [pc, #588]	; (8004988 <HAL_RTC_SetAlarm_IT+0x268>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0adb      	lsrs	r3, r3, #11
 8004740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	7f1b      	ldrb	r3, [r3, #28]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_RTC_SetAlarm_IT+0x36>
 8004752:	2302      	movs	r3, #2
 8004754:	e111      	b.n	800497a <HAL_RTC_SetAlarm_IT+0x25a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2202      	movs	r2, #2
 8004760:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d137      	bne.n	80047d8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f99f 	bl	8004ac4 <RTC_ByteToBcd2>
 8004786:	4603      	mov	r3, r0
 8004788:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f998 	bl	8004ac4 <RTC_ByteToBcd2>
 8004794:	4603      	mov	r3, r0
 8004796:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004798:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	789b      	ldrb	r3, [r3, #2]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f990 	bl	8004ac4 <RTC_ByteToBcd2>
 80047a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	78db      	ldrb	r3, [r3, #3]
 80047ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80047b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f982 	bl	8004ac4 <RTC_ByteToBcd2>
 80047c0:	4603      	mov	r3, r0
 80047c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80047c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80047cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e023      	b.n	8004820 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	78db      	ldrb	r3, [r3, #3]
 8004804:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004806:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004810:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004816:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800481c:	4313      	orrs	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	22ca      	movs	r2, #202	; 0xca
 8004832:	625a      	str	r2, [r3, #36]	; 0x24
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2253      	movs	r2, #83	; 0x53
 800483a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004844:	d141      	bne.n	80048ca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004854:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004866:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	617a      	str	r2, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2203      	movs	r2, #3
 800487e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e077      	b.n	800497a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0e7      	beq.n	8004868 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e040      	b.n	800494c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80048ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	617a      	str	r2, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	22ff      	movs	r2, #255	; 0xff
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2203      	movs	r2, #3
 8004902:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e035      	b.n	800497a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0e7      	beq.n	80048ec <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RTC_SetAlarm_IT+0x26c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <HAL_RTC_SetAlarm_IT+0x26c>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004956:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_RTC_SetAlarm_IT+0x26c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <HAL_RTC_SetAlarm_IT+0x26c>)
 800495e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004962:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3724      	adds	r7, #36	; 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	20000004 	.word	0x20000004
 8004988:	10624dd3 	.word	0x10624dd3
 800498c:	40013c00 	.word	0x40013c00

08004990 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fc fb0b 	bl	8000fd0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80049ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d012      	beq.n	8004a00 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f889 	bl	8004b00 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80049fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a06:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	775a      	strb	r2, [r3, #29]
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40013c00 	.word	0x40013c00

08004a1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a36:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a38:	f7fd f952 	bl	8001ce0 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a3e:	e009      	b.n	8004a54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a40:	f7fd f94e 	bl	8001ce0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4e:	d901      	bls.n	8004a54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e007      	b.n	8004a64 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ee      	beq.n	8004a40 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d119      	bne.n	8004aba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fd f926 	bl	8001ce0 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a96:	e009      	b.n	8004aac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a98:	f7fd f922 	bl	8001ce0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa6:	d901      	bls.n	8004aac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e007      	b.n	8004abc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ee      	beq.n	8004a98 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004ad2:	e005      	b.n	8004ae0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	3b0a      	subs	r3, #10
 8004ade:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d8f6      	bhi.n	8004ad4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b2db      	uxtb	r3, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e056      	b.n	8004bd4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fc fea7 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	ea42 0103 	orr.w	r1, r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0104 	and.w	r1, r3, #4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_SPI_Transmit+0x22>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e11e      	b.n	8004e3c <HAL_SPI_Transmit+0x260>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c06:	f7fd f86b 	bl	8001ce0 <HAL_GetTick>
 8004c0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d002      	beq.n	8004c22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c20:	e103      	b.n	8004e2a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit+0x52>
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c32:	e0fa      	b.n	8004e2a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2203      	movs	r2, #3
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7a:	d107      	bne.n	8004c8c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d007      	beq.n	8004caa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d14b      	bne.n	8004d4c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_Transmit+0xe6>
 8004cbc:	8afb      	ldrh	r3, [r7, #22]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d13e      	bne.n	8004d40 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	1c9a      	adds	r2, r3, #2
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ce6:	e02b      	b.n	8004d40 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d112      	bne.n	8004d1c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d1a:	e011      	b.n	8004d40 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1c:	f7fc ffe0 	bl	8001ce0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d803      	bhi.n	8004d34 <HAL_SPI_Transmit+0x158>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Transmit+0x15e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d3e:	e074      	b.n	8004e2a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ce      	bne.n	8004ce8 <HAL_SPI_Transmit+0x10c>
 8004d4a:	e04c      	b.n	8004de6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_SPI_Transmit+0x17e>
 8004d54:	8afb      	ldrh	r3, [r7, #22]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d140      	bne.n	8004ddc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d80:	e02c      	b.n	8004ddc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d113      	bne.n	8004db8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db6:	e011      	b.n	8004ddc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db8:	f7fc ff92 	bl	8001ce0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d803      	bhi.n	8004dd0 <HAL_SPI_Transmit+0x1f4>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d102      	bne.n	8004dd6 <HAL_SPI_Transmit+0x1fa>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dda:	e026      	b.n	8004e2a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1cd      	bne.n	8004d82 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fa44 	bl	8005278 <SPI_EndRxTxTransaction>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e000      	b.n	8004e2a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004e28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	; 0x30
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e52:	2301      	movs	r3, #1
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x26>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e18a      	b.n	8005180 <HAL_SPI_TransmitReceive+0x33c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e72:	f7fc ff35 	bl	8001ce0 <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e88:	887b      	ldrh	r3, [r7, #2]
 8004e8a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d00f      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0x70>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d107      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x68>
 8004ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d003      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eb2:	e15b      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x82>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x82>
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ecc:	e14e      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d003      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2205      	movs	r2, #5
 8004ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	887a      	ldrh	r2, [r7, #2]
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	887a      	ldrh	r2, [r7, #2]
 8004f0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d178      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x10a>
 8004f48:	8b7b      	ldrh	r3, [r7, #26]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d166      	bne.n	800501c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f72:	e053      	b.n	800501c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d11b      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x176>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d016      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x176>
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d113      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	881a      	ldrh	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	1c9a      	adds	r2, r3, #2
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d119      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x1b8>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d014      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	1c9a      	adds	r2, r3, #2
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ffc:	f7fc fe70 	bl	8001ce0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005008:	429a      	cmp	r2, r3
 800500a:	d807      	bhi.n	800501c <HAL_SPI_TransmitReceive+0x1d8>
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800501a:	e0a7      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1a6      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x130>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1a1      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x130>
 8005030:	e07c      	b.n	800512c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x1fc>
 800503a:	8b7b      	ldrh	r3, [r7, #26]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d16b      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005066:	e057      	b.n	8005118 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d11c      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x26c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x26c>
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d114      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d119      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x2ae>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d014      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ee:	2301      	movs	r3, #1
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f2:	f7fc fdf5 	bl	8001ce0 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050fe:	429a      	cmp	r2, r3
 8005100:	d803      	bhi.n	800510a <HAL_SPI_TransmitReceive+0x2c6>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d102      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2cc>
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005116:	e029      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1a2      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x224>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d19d      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f8a1 	bl	8005278 <SPI_EndRxTxTransaction>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d006      	beq.n	800514a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005148:	e010      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	e000      	b.n	800516c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800516a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800517c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005180:	4618      	mov	r0, r3
 8005182:	3730      	adds	r7, #48	; 0x30
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005196:	b2db      	uxtb	r3, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b4:	e04c      	b.n	8005250 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d048      	beq.n	8005250 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80051be:	f7fc fd8f 	bl	8001ce0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d902      	bls.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d13d      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ec:	d111      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f6:	d004      	beq.n	8005202 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d107      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521a:	d10f      	bne.n	800523c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e00f      	b.n	8005270 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d1a3      	bne.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <SPI_EndRxTxTransaction+0x7c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <SPI_EndRxTxTransaction+0x80>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0d5b      	lsrs	r3, r3, #21
 8005290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d112      	bne.n	80052ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff ff78 	bl	80051a4 <SPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e00f      	b.n	80052ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d0f2      	beq.n	80052ca <SPI_EndRxTxTransaction+0x52>
 80052e4:	e000      	b.n	80052e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80052e6:	bf00      	nop
  }

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000004 	.word	0x20000004
 80052f8:	165e9f81 	.word	0x165e9f81

080052fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e03f      	b.n	800538e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fb1e 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800533e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f90b 	bl	800555c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b088      	sub	sp, #32
 800539a:	af02      	add	r7, sp, #8
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	f040 8083 	bne.w	80054be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_Transmit+0x2e>
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e07b      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Transmit+0x40>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e074      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2221      	movs	r2, #33	; 0x21
 80053e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053ec:	f7fc fc78 	bl	8001ce0 <HAL_GetTick>
 80053f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005406:	e042      	b.n	800548e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d122      	bne.n	8005466 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2200      	movs	r2, #0
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f84c 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e042      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3302      	adds	r3, #2
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	e017      	b.n	800548e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3301      	adds	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	e013      	b.n	800548e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f829 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e01f      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	60ba      	str	r2, [r7, #8]
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1b7      	bne.n	8005408 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f810 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e006      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e000      	b.n	80054c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
  }
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d8:	e02c      	b.n	8005534 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d028      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054e8:	f7fc fbfa 	bl	8001ce0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d21d      	bcs.n	8005534 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005506:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e00f      	b.n	8005554 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	d0c3      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800559e:	f023 030c 	bic.w	r3, r3, #12
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	f040 818b 	bne.w	80058e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4ac1      	ldr	r2, [pc, #772]	; (80058d8 <UART_SetConfig+0x37c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d005      	beq.n	80055e4 <UART_SetConfig+0x88>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4abf      	ldr	r2, [pc, #764]	; (80058dc <UART_SetConfig+0x380>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	f040 80bd 	bne.w	800575e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fd ff6e 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80055e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	461d      	mov	r5, r3
 80055ee:	f04f 0600 	mov.w	r6, #0
 80055f2:	46a8      	mov	r8, r5
 80055f4:	46b1      	mov	r9, r6
 80055f6:	eb18 0308 	adds.w	r3, r8, r8
 80055fa:	eb49 0409 	adc.w	r4, r9, r9
 80055fe:	4698      	mov	r8, r3
 8005600:	46a1      	mov	r9, r4
 8005602:	eb18 0805 	adds.w	r8, r8, r5
 8005606:	eb49 0906 	adc.w	r9, r9, r6
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005616:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800561a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800561e:	4688      	mov	r8, r1
 8005620:	4691      	mov	r9, r2
 8005622:	eb18 0005 	adds.w	r0, r8, r5
 8005626:	eb49 0106 	adc.w	r1, r9, r6
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	461d      	mov	r5, r3
 8005630:	f04f 0600 	mov.w	r6, #0
 8005634:	196b      	adds	r3, r5, r5
 8005636:	eb46 0406 	adc.w	r4, r6, r6
 800563a:	461a      	mov	r2, r3
 800563c:	4623      	mov	r3, r4
 800563e:	f7fa fe3f 	bl	80002c0 <__aeabi_uldivmod>
 8005642:	4603      	mov	r3, r0
 8005644:	460c      	mov	r4, r1
 8005646:	461a      	mov	r2, r3
 8005648:	4ba5      	ldr	r3, [pc, #660]	; (80058e0 <UART_SetConfig+0x384>)
 800564a:	fba3 2302 	umull	r2, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	461d      	mov	r5, r3
 8005658:	f04f 0600 	mov.w	r6, #0
 800565c:	46a9      	mov	r9, r5
 800565e:	46b2      	mov	sl, r6
 8005660:	eb19 0309 	adds.w	r3, r9, r9
 8005664:	eb4a 040a 	adc.w	r4, sl, sl
 8005668:	4699      	mov	r9, r3
 800566a:	46a2      	mov	sl, r4
 800566c:	eb19 0905 	adds.w	r9, r9, r5
 8005670:	eb4a 0a06 	adc.w	sl, sl, r6
 8005674:	f04f 0100 	mov.w	r1, #0
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005688:	4689      	mov	r9, r1
 800568a:	4692      	mov	sl, r2
 800568c:	eb19 0005 	adds.w	r0, r9, r5
 8005690:	eb4a 0106 	adc.w	r1, sl, r6
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	461d      	mov	r5, r3
 800569a:	f04f 0600 	mov.w	r6, #0
 800569e:	196b      	adds	r3, r5, r5
 80056a0:	eb46 0406 	adc.w	r4, r6, r6
 80056a4:	461a      	mov	r2, r3
 80056a6:	4623      	mov	r3, r4
 80056a8:	f7fa fe0a 	bl	80002c0 <__aeabi_uldivmod>
 80056ac:	4603      	mov	r3, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	461a      	mov	r2, r3
 80056b2:	4b8b      	ldr	r3, [pc, #556]	; (80058e0 <UART_SetConfig+0x384>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a86      	ldr	r2, [pc, #536]	; (80058e0 <UART_SetConfig+0x384>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d4:	4498      	add	r8, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	461d      	mov	r5, r3
 80056da:	f04f 0600 	mov.w	r6, #0
 80056de:	46a9      	mov	r9, r5
 80056e0:	46b2      	mov	sl, r6
 80056e2:	eb19 0309 	adds.w	r3, r9, r9
 80056e6:	eb4a 040a 	adc.w	r4, sl, sl
 80056ea:	4699      	mov	r9, r3
 80056ec:	46a2      	mov	sl, r4
 80056ee:	eb19 0905 	adds.w	r9, r9, r5
 80056f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005702:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005706:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800570a:	4689      	mov	r9, r1
 800570c:	4692      	mov	sl, r2
 800570e:	eb19 0005 	adds.w	r0, r9, r5
 8005712:	eb4a 0106 	adc.w	r1, sl, r6
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	461d      	mov	r5, r3
 800571c:	f04f 0600 	mov.w	r6, #0
 8005720:	196b      	adds	r3, r5, r5
 8005722:	eb46 0406 	adc.w	r4, r6, r6
 8005726:	461a      	mov	r2, r3
 8005728:	4623      	mov	r3, r4
 800572a:	f7fa fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800572e:	4603      	mov	r3, r0
 8005730:	460c      	mov	r4, r1
 8005732:	461a      	mov	r2, r3
 8005734:	4b6a      	ldr	r3, [pc, #424]	; (80058e0 <UART_SetConfig+0x384>)
 8005736:	fba3 1302 	umull	r1, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2164      	movs	r1, #100	; 0x64
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	3332      	adds	r3, #50	; 0x32
 8005748:	4a65      	ldr	r2, [pc, #404]	; (80058e0 <UART_SetConfig+0x384>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f003 0207 	and.w	r2, r3, #7
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4442      	add	r2, r8
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e26f      	b.n	8005c3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7fd fe9d 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8005762:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	461d      	mov	r5, r3
 8005768:	f04f 0600 	mov.w	r6, #0
 800576c:	46a8      	mov	r8, r5
 800576e:	46b1      	mov	r9, r6
 8005770:	eb18 0308 	adds.w	r3, r8, r8
 8005774:	eb49 0409 	adc.w	r4, r9, r9
 8005778:	4698      	mov	r8, r3
 800577a:	46a1      	mov	r9, r4
 800577c:	eb18 0805 	adds.w	r8, r8, r5
 8005780:	eb49 0906 	adc.w	r9, r9, r6
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005790:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005794:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005798:	4688      	mov	r8, r1
 800579a:	4691      	mov	r9, r2
 800579c:	eb18 0005 	adds.w	r0, r8, r5
 80057a0:	eb49 0106 	adc.w	r1, r9, r6
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	461d      	mov	r5, r3
 80057aa:	f04f 0600 	mov.w	r6, #0
 80057ae:	196b      	adds	r3, r5, r5
 80057b0:	eb46 0406 	adc.w	r4, r6, r6
 80057b4:	461a      	mov	r2, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	f7fa fd82 	bl	80002c0 <__aeabi_uldivmod>
 80057bc:	4603      	mov	r3, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <UART_SetConfig+0x384>)
 80057c4:	fba3 2302 	umull	r2, r3, r3, r2
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	461d      	mov	r5, r3
 80057d2:	f04f 0600 	mov.w	r6, #0
 80057d6:	46a9      	mov	r9, r5
 80057d8:	46b2      	mov	sl, r6
 80057da:	eb19 0309 	adds.w	r3, r9, r9
 80057de:	eb4a 040a 	adc.w	r4, sl, sl
 80057e2:	4699      	mov	r9, r3
 80057e4:	46a2      	mov	sl, r4
 80057e6:	eb19 0905 	adds.w	r9, r9, r5
 80057ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005802:	4689      	mov	r9, r1
 8005804:	4692      	mov	sl, r2
 8005806:	eb19 0005 	adds.w	r0, r9, r5
 800580a:	eb4a 0106 	adc.w	r1, sl, r6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	461d      	mov	r5, r3
 8005814:	f04f 0600 	mov.w	r6, #0
 8005818:	196b      	adds	r3, r5, r5
 800581a:	eb46 0406 	adc.w	r4, r6, r6
 800581e:	461a      	mov	r2, r3
 8005820:	4623      	mov	r3, r4
 8005822:	f7fa fd4d 	bl	80002c0 <__aeabi_uldivmod>
 8005826:	4603      	mov	r3, r0
 8005828:	460c      	mov	r4, r1
 800582a:	461a      	mov	r2, r3
 800582c:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <UART_SetConfig+0x384>)
 800582e:	fba3 1302 	umull	r1, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2164      	movs	r1, #100	; 0x64
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	3332      	adds	r3, #50	; 0x32
 8005840:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <UART_SetConfig+0x384>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800584e:	4498      	add	r8, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	461d      	mov	r5, r3
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	46a9      	mov	r9, r5
 800585a:	46b2      	mov	sl, r6
 800585c:	eb19 0309 	adds.w	r3, r9, r9
 8005860:	eb4a 040a 	adc.w	r4, sl, sl
 8005864:	4699      	mov	r9, r3
 8005866:	46a2      	mov	sl, r4
 8005868:	eb19 0905 	adds.w	r9, r9, r5
 800586c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005870:	f04f 0100 	mov.w	r1, #0
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800587c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005884:	4689      	mov	r9, r1
 8005886:	4692      	mov	sl, r2
 8005888:	eb19 0005 	adds.w	r0, r9, r5
 800588c:	eb4a 0106 	adc.w	r1, sl, r6
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	461d      	mov	r5, r3
 8005896:	f04f 0600 	mov.w	r6, #0
 800589a:	196b      	adds	r3, r5, r5
 800589c:	eb46 0406 	adc.w	r4, r6, r6
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	f7fa fd0c 	bl	80002c0 <__aeabi_uldivmod>
 80058a8:	4603      	mov	r3, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <UART_SetConfig+0x384>)
 80058b0:	fba3 1302 	umull	r1, r3, r3, r2
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	2164      	movs	r1, #100	; 0x64
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	3332      	adds	r3, #50	; 0x32
 80058c2:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <UART_SetConfig+0x384>)
 80058c4:	fba2 2303 	umull	r2, r3, r2, r3
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	f003 0207 	and.w	r2, r3, #7
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4442      	add	r2, r8
 80058d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058d6:	e1b2      	b.n	8005c3e <UART_SetConfig+0x6e2>
 80058d8:	40011000 	.word	0x40011000
 80058dc:	40011400 	.word	0x40011400
 80058e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4ad7      	ldr	r2, [pc, #860]	; (8005c48 <UART_SetConfig+0x6ec>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d005      	beq.n	80058fa <UART_SetConfig+0x39e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4ad6      	ldr	r2, [pc, #856]	; (8005c4c <UART_SetConfig+0x6f0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f040 80d1 	bne.w	8005a9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fa:	f7fd fde3 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80058fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	469a      	mov	sl, r3
 8005904:	f04f 0b00 	mov.w	fp, #0
 8005908:	46d0      	mov	r8, sl
 800590a:	46d9      	mov	r9, fp
 800590c:	eb18 0308 	adds.w	r3, r8, r8
 8005910:	eb49 0409 	adc.w	r4, r9, r9
 8005914:	4698      	mov	r8, r3
 8005916:	46a1      	mov	r9, r4
 8005918:	eb18 080a 	adds.w	r8, r8, sl
 800591c:	eb49 090b 	adc.w	r9, r9, fp
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800592c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005930:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005934:	4688      	mov	r8, r1
 8005936:	4691      	mov	r9, r2
 8005938:	eb1a 0508 	adds.w	r5, sl, r8
 800593c:	eb4b 0609 	adc.w	r6, fp, r9
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4619      	mov	r1, r3
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	f04f 0400 	mov.w	r4, #0
 8005952:	0094      	lsls	r4, r2, #2
 8005954:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005958:	008b      	lsls	r3, r1, #2
 800595a:	461a      	mov	r2, r3
 800595c:	4623      	mov	r3, r4
 800595e:	4628      	mov	r0, r5
 8005960:	4631      	mov	r1, r6
 8005962:	f7fa fcad 	bl	80002c0 <__aeabi_uldivmod>
 8005966:	4603      	mov	r3, r0
 8005968:	460c      	mov	r4, r1
 800596a:	461a      	mov	r2, r3
 800596c:	4bb8      	ldr	r3, [pc, #736]	; (8005c50 <UART_SetConfig+0x6f4>)
 800596e:	fba3 2302 	umull	r2, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	469b      	mov	fp, r3
 800597c:	f04f 0c00 	mov.w	ip, #0
 8005980:	46d9      	mov	r9, fp
 8005982:	46e2      	mov	sl, ip
 8005984:	eb19 0309 	adds.w	r3, r9, r9
 8005988:	eb4a 040a 	adc.w	r4, sl, sl
 800598c:	4699      	mov	r9, r3
 800598e:	46a2      	mov	sl, r4
 8005990:	eb19 090b 	adds.w	r9, r9, fp
 8005994:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ac:	4689      	mov	r9, r1
 80059ae:	4692      	mov	sl, r2
 80059b0:	eb1b 0509 	adds.w	r5, fp, r9
 80059b4:	eb4c 060a 	adc.w	r6, ip, sl
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4619      	mov	r1, r3
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	f04f 0400 	mov.w	r4, #0
 80059ca:	0094      	lsls	r4, r2, #2
 80059cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d0:	008b      	lsls	r3, r1, #2
 80059d2:	461a      	mov	r2, r3
 80059d4:	4623      	mov	r3, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	4631      	mov	r1, r6
 80059da:	f7fa fc71 	bl	80002c0 <__aeabi_uldivmod>
 80059de:	4603      	mov	r3, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	461a      	mov	r2, r3
 80059e4:	4b9a      	ldr	r3, [pc, #616]	; (8005c50 <UART_SetConfig+0x6f4>)
 80059e6:	fba3 1302 	umull	r1, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2164      	movs	r1, #100	; 0x64
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	; 0x32
 80059f8:	4a95      	ldr	r2, [pc, #596]	; (8005c50 <UART_SetConfig+0x6f4>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a04:	4498      	add	r8, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	469b      	mov	fp, r3
 8005a0a:	f04f 0c00 	mov.w	ip, #0
 8005a0e:	46d9      	mov	r9, fp
 8005a10:	46e2      	mov	sl, ip
 8005a12:	eb19 0309 	adds.w	r3, r9, r9
 8005a16:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1a:	4699      	mov	r9, r3
 8005a1c:	46a2      	mov	sl, r4
 8005a1e:	eb19 090b 	adds.w	r9, r9, fp
 8005a22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3a:	4689      	mov	r9, r1
 8005a3c:	4692      	mov	sl, r2
 8005a3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005a42:	eb4c 060a 	adc.w	r6, ip, sl
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	0094      	lsls	r4, r2, #2
 8005a5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a5e:	008b      	lsls	r3, r1, #2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4623      	mov	r3, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	4631      	mov	r1, r6
 8005a68:	f7fa fc2a 	bl	80002c0 <__aeabi_uldivmod>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b77      	ldr	r3, [pc, #476]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	2164      	movs	r1, #100	; 0x64
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	4a72      	ldr	r2, [pc, #456]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4442      	add	r2, r8
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	e0d0      	b.n	8005c3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fd fcfe 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8005aa0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f04f 0b00 	mov.w	fp, #0
 8005aaa:	46d0      	mov	r8, sl
 8005aac:	46d9      	mov	r9, fp
 8005aae:	eb18 0308 	adds.w	r3, r8, r8
 8005ab2:	eb49 0409 	adc.w	r4, r9, r9
 8005ab6:	4698      	mov	r8, r3
 8005ab8:	46a1      	mov	r9, r4
 8005aba:	eb18 080a 	adds.w	r8, r8, sl
 8005abe:	eb49 090b 	adc.w	r9, r9, fp
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ace:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ad2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ad6:	4688      	mov	r8, r1
 8005ad8:	4691      	mov	r9, r2
 8005ada:	eb1a 0508 	adds.w	r5, sl, r8
 8005ade:	eb4b 0609 	adc.w	r6, fp, r9
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	f04f 0400 	mov.w	r4, #0
 8005af4:	0094      	lsls	r4, r2, #2
 8005af6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005afa:	008b      	lsls	r3, r1, #2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	4631      	mov	r1, r6
 8005b04:	f7fa fbdc 	bl	80002c0 <__aeabi_uldivmod>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b50      	ldr	r3, [pc, #320]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005b10:	fba3 2302 	umull	r2, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	469b      	mov	fp, r3
 8005b1e:	f04f 0c00 	mov.w	ip, #0
 8005b22:	46d9      	mov	r9, fp
 8005b24:	46e2      	mov	sl, ip
 8005b26:	eb19 0309 	adds.w	r3, r9, r9
 8005b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b2e:	4699      	mov	r9, r3
 8005b30:	46a2      	mov	sl, r4
 8005b32:	eb19 090b 	adds.w	r9, r9, fp
 8005b36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b4e:	4689      	mov	r9, r1
 8005b50:	4692      	mov	sl, r2
 8005b52:	eb1b 0509 	adds.w	r5, fp, r9
 8005b56:	eb4c 060a 	adc.w	r6, ip, sl
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	f04f 0400 	mov.w	r4, #0
 8005b6c:	0094      	lsls	r4, r2, #2
 8005b6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b72:	008b      	lsls	r3, r1, #2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4623      	mov	r3, r4
 8005b78:	4628      	mov	r0, r5
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	f7fa fba0 	bl	80002c0 <__aeabi_uldivmod>
 8005b80:	4603      	mov	r3, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005b88:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	2164      	movs	r1, #100	; 0x64
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	3332      	adds	r3, #50	; 0x32
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba6:	4498      	add	r8, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	469b      	mov	fp, r3
 8005bac:	f04f 0c00 	mov.w	ip, #0
 8005bb0:	46d9      	mov	r9, fp
 8005bb2:	46e2      	mov	sl, ip
 8005bb4:	eb19 0309 	adds.w	r3, r9, r9
 8005bb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	eb19 090b 	adds.w	r9, r9, fp
 8005bc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bc8:	f04f 0100 	mov.w	r1, #0
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bdc:	4689      	mov	r9, r1
 8005bde:	4692      	mov	sl, r2
 8005be0:	eb1b 0509 	adds.w	r5, fp, r9
 8005be4:	eb4c 060a 	adc.w	r6, ip, sl
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4619      	mov	r1, r3
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f04f 0400 	mov.w	r4, #0
 8005bfa:	0094      	lsls	r4, r2, #2
 8005bfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c00:	008b      	lsls	r3, r1, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	4623      	mov	r3, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	4631      	mov	r1, r6
 8005c0a:	f7fa fb59 	bl	80002c0 <__aeabi_uldivmod>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	460c      	mov	r4, r1
 8005c12:	461a      	mov	r2, r3
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005c16:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2164      	movs	r1, #100	; 0x64
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	3332      	adds	r3, #50	; 0x32
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <UART_SetConfig+0x6f4>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 020f 	and.w	r2, r3, #15
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4442      	add	r2, r8
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	e7ff      	b.n	8005c3e <UART_SetConfig+0x6e2>
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	40011000 	.word	0x40011000
 8005c4c:	40011400 	.word	0x40011400
 8005c50:	51eb851f 	.word	0x51eb851f

08005c54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c58:	4904      	ldr	r1, [pc, #16]	; (8005c6c <MX_FATFS_Init+0x18>)
 8005c5a:	4805      	ldr	r0, [pc, #20]	; (8005c70 <MX_FATFS_Init+0x1c>)
 8005c5c:	f000 fd86 	bl	800676c <FATFS_LinkDriver>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <MX_FATFS_Init+0x20>)
 8005c66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005c68:	bf00      	nop
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20002664 	.word	0x20002664
 8005c70:	20000010 	.word	0x20000010
 8005c74:	20002668 	.word	0x20002668

08005c78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8005c82:	79fb      	ldrb	r3, [r7, #7]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fa fe55 	bl	8000934 <SD_disk_initialize>
 8005c8a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fa ff31 	bl	8000b08 <SD_disk_status>
 8005ca6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005cc0:	7bf8      	ldrb	r0, [r7, #15]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	f7fa ff34 	bl	8000b34 <SD_disk_read>
 8005ccc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8005ce6:	7bf8      	ldrb	r0, [r7, #15]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	f7fa ff8b 	bl	8000c08 <SD_disk_write>
 8005cf2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	603a      	str	r2, [r7, #0]
 8005d06:	71fb      	strb	r3, [r7, #7]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005d0c:	79b9      	ldrb	r1, [r7, #6]
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fa fffc 	bl	8000d10 <SD_disk_ioctl>
 8005d18:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <disk_status+0x30>)
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	79fa      	ldrb	r2, [r7, #7]
 8005d3c:	4905      	ldr	r1, [pc, #20]	; (8005d54 <disk_status+0x30>)
 8005d3e:	440a      	add	r2, r1
 8005d40:	7a12      	ldrb	r2, [r2, #8]
 8005d42:	4610      	mov	r0, r2
 8005d44:	4798      	blx	r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200002d4 	.word	0x200002d4

08005d58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	4a0d      	ldr	r2, [pc, #52]	; (8005da0 <disk_initialize+0x48>)
 8005d6a:	5cd3      	ldrb	r3, [r2, r3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d111      	bne.n	8005d94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <disk_initialize+0x48>)
 8005d74:	2101      	movs	r1, #1
 8005d76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <disk_initialize+0x48>)
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	79fa      	ldrb	r2, [r7, #7]
 8005d86:	4906      	ldr	r1, [pc, #24]	; (8005da0 <disk_initialize+0x48>)
 8005d88:	440a      	add	r2, r1
 8005d8a:	7a12      	ldrb	r2, [r2, #8]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200002d4 	.word	0x200002d4

08005da4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <disk_read+0x3c>)
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	689c      	ldr	r4, [r3, #8]
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	4a07      	ldr	r2, [pc, #28]	; (8005de0 <disk_read+0x3c>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	7a18      	ldrb	r0, [r3, #8]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	47a0      	blx	r4
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200002d4 	.word	0x200002d4

08005de4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <disk_write+0x3c>)
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68dc      	ldr	r4, [r3, #12]
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	4a07      	ldr	r2, [pc, #28]	; (8005e20 <disk_write+0x3c>)
 8005e04:	4413      	add	r3, r2
 8005e06:	7a18      	ldrb	r0, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	47a0      	blx	r4
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200002d4 	.word	0x200002d4

08005e24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	603a      	str	r2, [r7, #0]
 8005e2e:	71fb      	strb	r3, [r7, #7]
 8005e30:	460b      	mov	r3, r1
 8005e32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <disk_ioctl+0x38>)
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	79fa      	ldrb	r2, [r7, #7]
 8005e42:	4906      	ldr	r1, [pc, #24]	; (8005e5c <disk_ioctl+0x38>)
 8005e44:	440a      	add	r2, r1
 8005e46:	7a10      	ldrb	r0, [r2, #8]
 8005e48:	79b9      	ldrb	r1, [r7, #6]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4798      	blx	r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200002d4 	.word	0x200002d4

08005e60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	b21b      	sxth	r3, r3
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e82:	89fb      	ldrh	r3, [r7, #14]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3303      	adds	r3, #3
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	3202      	adds	r2, #2
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7812      	ldrb	r2, [r2, #0]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e010      	b.n	8005f08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ee6:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <clear_lock+0x44>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4413      	add	r3, r2
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d105      	bne.n	8005f02 <clear_lock+0x2a>
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <clear_lock+0x44>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4413      	add	r3, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d9eb      	bls.n	8005ee6 <clear_lock+0xe>
	}
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	200000b4 	.word	0x200000b4

08005f20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d034      	beq.n	8005f9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7858      	ldrb	r0, [r3, #1]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f44:	2301      	movs	r3, #1
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	f7ff ff4c 	bl	8005de4 <disk_write>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	e022      	b.n	8005f9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d217      	bcs.n	8005f9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	789b      	ldrb	r3, [r3, #2]
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e010      	b.n	8005f98 <sync_window+0x78>
					wsect += fs->fsize;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7858      	ldrb	r0, [r3, #1]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	f7ff ff29 	bl	8005de4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d8eb      	bhi.n	8005f76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d01b      	beq.n	8005ff8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ffad 	bl	8005f20 <sync_window>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d113      	bne.n	8005ff8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7858      	ldrb	r0, [r3, #1]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fda:	2301      	movs	r3, #1
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	f7ff fee1 	bl	8005da4 <disk_read>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006002:	b480      	push	{r7}
 8006004:	b087      	sub	sp, #28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d031      	beq.n	800607c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e002      	b.n	8006026 <get_ldnumber+0x24>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3301      	adds	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b1f      	cmp	r3, #31
 800602c:	d903      	bls.n	8006036 <get_ldnumber+0x34>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b3a      	cmp	r3, #58	; 0x3a
 8006034:	d1f4      	bne.n	8006020 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b3a      	cmp	r3, #58	; 0x3a
 800603c:	d11c      	bne.n	8006078 <get_ldnumber+0x76>
			tp = *path;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	60fa      	str	r2, [r7, #12]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	3b30      	subs	r3, #48	; 0x30
 800604e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b09      	cmp	r3, #9
 8006054:	d80e      	bhi.n	8006074 <get_ldnumber+0x72>
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	429a      	cmp	r2, r3
 800605c:	d10a      	bne.n	8006074 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d107      	bne.n	8006074 <get_ldnumber+0x72>
					vol = (int)i;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	e002      	b.n	800607e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800607c:	693b      	ldr	r3, [r7, #16]
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	70da      	strb	r2, [r3, #3]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f04f 32ff 	mov.w	r2, #4294967295
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ff7e 	bl	8005fa8 <move_window>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <check_fs+0x2a>
 80060b2:	2304      	movs	r3, #4
 80060b4:	e038      	b.n	8006128 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3338      	adds	r3, #56	; 0x38
 80060ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fece 	bl	8005e60 <ld_word>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d001      	beq.n	80060d4 <check_fs+0x48>
 80060d0:	2303      	movs	r3, #3
 80060d2:	e029      	b.n	8006128 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060da:	2be9      	cmp	r3, #233	; 0xe9
 80060dc:	d009      	beq.n	80060f2 <check_fs+0x66>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060e4:	2beb      	cmp	r3, #235	; 0xeb
 80060e6:	d11e      	bne.n	8006126 <check_fs+0x9a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060ee:	2b90      	cmp	r3, #144	; 0x90
 80060f0:	d119      	bne.n	8006126 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3338      	adds	r3, #56	; 0x38
 80060f6:	3336      	adds	r3, #54	; 0x36
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fec9 	bl	8005e90 <ld_dword>
 80060fe:	4603      	mov	r3, r0
 8006100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006104:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <check_fs+0xa4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <check_fs+0x82>
 800610a:	2300      	movs	r3, #0
 800610c:	e00c      	b.n	8006128 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3338      	adds	r3, #56	; 0x38
 8006112:	3352      	adds	r3, #82	; 0x52
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff febb 	bl	8005e90 <ld_dword>
 800611a:	4602      	mov	r2, r0
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <check_fs+0xa8>)
 800611e:	429a      	cmp	r2, r3
 8006120:	d101      	bne.n	8006126 <check_fs+0x9a>
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006126:	2302      	movs	r3, #2
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	00544146 	.word	0x00544146
 8006134:	33544146 	.word	0x33544146

08006138 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b096      	sub	sp, #88	; 0x58
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff ff58 	bl	8006002 <get_ldnumber>
 8006152:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	2b00      	cmp	r3, #0
 8006158:	da01      	bge.n	800615e <find_volume+0x26>
 800615a:	230b      	movs	r3, #11
 800615c:	e268      	b.n	8006630 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800615e:	4ab0      	ldr	r2, [pc, #704]	; (8006420 <find_volume+0x2e8>)
 8006160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006166:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <find_volume+0x3a>
 800616e:	230c      	movs	r3, #12
 8006170:	e25e      	b.n	8006630 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006176:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01a      	beq.n	80061be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fdc9 	bl	8005d24 <disk_status>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <find_volume+0x82>
 80061aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80061b6:	230a      	movs	r3, #10
 80061b8:	e23a      	b.n	8006630 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80061ba:	2300      	movs	r3, #0
 80061bc:	e238      	b.n	8006630 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fdc1 	bl	8005d58 <disk_initialize>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80061dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80061e8:	2303      	movs	r3, #3
 80061ea:	e221      	b.n	8006630 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <find_volume+0xca>
 80061f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80061fe:	230a      	movs	r3, #10
 8006200:	e216      	b.n	8006630 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	7858      	ldrb	r0, [r3, #1]
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	330c      	adds	r3, #12
 800620a:	461a      	mov	r2, r3
 800620c:	2102      	movs	r1, #2
 800620e:	f7ff fe09 	bl	8005e24 <disk_ioctl>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <find_volume+0xe4>
 8006218:	2301      	movs	r3, #1
 800621a:	e209      	b.n	8006630 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	899b      	ldrh	r3, [r3, #12]
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006224:	d80d      	bhi.n	8006242 <find_volume+0x10a>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	899b      	ldrh	r3, [r3, #12]
 800622a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622e:	d308      	bcc.n	8006242 <find_volume+0x10a>
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	899b      	ldrh	r3, [r3, #12]
 8006234:	461a      	mov	r2, r3
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	899b      	ldrh	r3, [r3, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <find_volume+0x10e>
 8006242:	2301      	movs	r3, #1
 8006244:	e1f4      	b.n	8006630 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800624a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800624c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800624e:	f7ff ff1d 	bl	800608c <check_fs>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006258:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625c:	2b02      	cmp	r3, #2
 800625e:	d14b      	bne.n	80062f8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006260:	2300      	movs	r3, #0
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
 8006264:	e01f      	b.n	80062a6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006274:	4413      	add	r3, r2
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	3304      	adds	r3, #4
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <find_volume+0x158>
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	3308      	adds	r3, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fe02 	bl	8005e90 <ld_dword>
 800628c:	4602      	mov	r2, r0
 800628e:	e000      	b.n	8006292 <find_volume+0x15a>
 8006290:	2200      	movs	r2, #0
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800629a:	440b      	add	r3, r1
 800629c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	3301      	adds	r3, #1
 80062a4:	643b      	str	r3, [r7, #64]	; 0x40
 80062a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d9dc      	bls.n	8006266 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062ac:	2300      	movs	r3, #0
 80062ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <find_volume+0x184>
 80062b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b8:	3b01      	subs	r3, #1
 80062ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062c4:	4413      	add	r3, r2
 80062c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <find_volume+0x1a6>
 80062d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062d6:	f7ff fed9 	bl	800608c <check_fs>
 80062da:	4603      	mov	r3, r0
 80062dc:	e000      	b.n	80062e0 <find_volume+0x1a8>
 80062de:	2303      	movs	r3, #3
 80062e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d905      	bls.n	80062f8 <find_volume+0x1c0>
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	3301      	adds	r3, #1
 80062f0:	643b      	str	r3, [r7, #64]	; 0x40
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d9e1      	bls.n	80062bc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80062f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d101      	bne.n	8006304 <find_volume+0x1cc>
 8006300:	2301      	movs	r3, #1
 8006302:	e195      	b.n	8006630 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006308:	2b01      	cmp	r3, #1
 800630a:	d901      	bls.n	8006310 <find_volume+0x1d8>
 800630c:	230d      	movs	r3, #13
 800630e:	e18f      	b.n	8006630 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	3338      	adds	r3, #56	; 0x38
 8006314:	330b      	adds	r3, #11
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fda2 	bl	8005e60 <ld_word>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	899b      	ldrh	r3, [r3, #12]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <find_volume+0x1f4>
 8006328:	230d      	movs	r3, #13
 800632a:	e181      	b.n	8006630 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	3338      	adds	r3, #56	; 0x38
 8006330:	3316      	adds	r3, #22
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fd94 	bl	8005e60 <ld_word>
 8006338:	4603      	mov	r3, r0
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <find_volume+0x218>
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	3338      	adds	r3, #56	; 0x38
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fda1 	bl	8005e90 <ld_dword>
 800634e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006354:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	789b      	ldrb	r3, [r3, #2]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d005      	beq.n	8006374 <find_volume+0x23c>
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	789b      	ldrb	r3, [r3, #2]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d001      	beq.n	8006374 <find_volume+0x23c>
 8006370:	230d      	movs	r3, #13
 8006372:	e15d      	b.n	8006630 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	461a      	mov	r2, r3
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006388:	b29a      	uxth	r2, r3
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	895b      	ldrh	r3, [r3, #10]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <find_volume+0x270>
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	461a      	mov	r2, r3
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	895b      	ldrh	r3, [r3, #10]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <find_volume+0x274>
 80063a8:	230d      	movs	r3, #13
 80063aa:	e141      	b.n	8006630 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	3338      	adds	r3, #56	; 0x38
 80063b0:	3311      	adds	r3, #17
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fd54 	bl	8005e60 <ld_word>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	891b      	ldrh	r3, [r3, #8]
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	8992      	ldrh	r2, [r2, #12]
 80063c8:	0952      	lsrs	r2, r2, #5
 80063ca:	b292      	uxth	r2, r2
 80063cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80063d0:	fb02 f201 	mul.w	r2, r2, r1
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <find_volume+0x2a8>
 80063dc:	230d      	movs	r3, #13
 80063de:	e127      	b.n	8006630 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	3338      	adds	r3, #56	; 0x38
 80063e4:	3313      	adds	r3, #19
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fd3a 	bl	8005e60 <ld_word>
 80063ec:	4603      	mov	r3, r0
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <find_volume+0x2cc>
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	3338      	adds	r3, #56	; 0x38
 80063fa:	3320      	adds	r3, #32
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fd47 	bl	8005e90 <ld_dword>
 8006402:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	330e      	adds	r3, #14
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd28 	bl	8005e60 <ld_word>
 8006410:	4603      	mov	r3, r0
 8006412:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006414:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <find_volume+0x2ec>
 800641a:	230d      	movs	r3, #13
 800641c:	e108      	b.n	8006630 <find_volume+0x4f8>
 800641e:	bf00      	nop
 8006420:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006424:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006428:	4413      	add	r3, r2
 800642a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800642c:	8911      	ldrh	r1, [r2, #8]
 800642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006430:	8992      	ldrh	r2, [r2, #12]
 8006432:	0952      	lsrs	r2, r2, #5
 8006434:	b292      	uxth	r2, r2
 8006436:	fbb1 f2f2 	udiv	r2, r1, r2
 800643a:	b292      	uxth	r2, r2
 800643c:	4413      	add	r3, r2
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	429a      	cmp	r2, r3
 8006446:	d201      	bcs.n	800644c <find_volume+0x314>
 8006448:	230d      	movs	r3, #13
 800644a:	e0f1      	b.n	8006630 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800644c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	8952      	ldrh	r2, [r2, #10]
 8006456:	fbb3 f3f2 	udiv	r3, r3, r2
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <find_volume+0x32e>
 8006462:	230d      	movs	r3, #13
 8006464:	e0e4      	b.n	8006630 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006466:	2303      	movs	r3, #3
 8006468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006472:	4293      	cmp	r3, r2
 8006474:	d802      	bhi.n	800647c <find_volume+0x344>
 8006476:	2302      	movs	r3, #2
 8006478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006482:	4293      	cmp	r3, r2
 8006484:	d802      	bhi.n	800648c <find_volume+0x354>
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	1c9a      	adds	r2, r3, #2
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800649a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800649c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800649e:	441a      	add	r2, r3
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80064a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	441a      	add	r2, r3
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80064ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d11e      	bne.n	80064f4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	3338      	adds	r3, #56	; 0x38
 80064ba:	332a      	adds	r3, #42	; 0x2a
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fccf 	bl	8005e60 <ld_word>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <find_volume+0x394>
 80064c8:	230d      	movs	r3, #13
 80064ca:	e0b1      	b.n	8006630 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	891b      	ldrh	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <find_volume+0x3a0>
 80064d4:	230d      	movs	r3, #13
 80064d6:	e0ab      	b.n	8006630 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	3338      	adds	r3, #56	; 0x38
 80064dc:	332c      	adds	r3, #44	; 0x2c
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fcd6 	bl	8005e90 <ld_dword>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	647b      	str	r3, [r7, #68]	; 0x44
 80064f2:	e01f      	b.n	8006534 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	891b      	ldrh	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <find_volume+0x3c8>
 80064fc:	230d      	movs	r3, #13
 80064fe:	e097      	b.n	8006630 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	441a      	add	r2, r3
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800650c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006510:	2b02      	cmp	r3, #2
 8006512:	d103      	bne.n	800651c <find_volume+0x3e4>
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	e00a      	b.n	8006532 <find_volume+0x3fa>
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	4613      	mov	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4413      	add	r3, r2
 8006526:	085a      	lsrs	r2, r3, #1
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006532:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	899b      	ldrh	r3, [r3, #12]
 800653c:	4619      	mov	r1, r3
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	440b      	add	r3, r1
 8006542:	3b01      	subs	r3, #1
 8006544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006546:	8989      	ldrh	r1, [r1, #12]
 8006548:	fbb3 f3f1 	udiv	r3, r3, r1
 800654c:	429a      	cmp	r2, r3
 800654e:	d201      	bcs.n	8006554 <find_volume+0x41c>
 8006550:	230d      	movs	r3, #13
 8006552:	e06d      	b.n	8006630 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	619a      	str	r2, [r3, #24]
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800656a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800656e:	2b03      	cmp	r3, #3
 8006570:	d149      	bne.n	8006606 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	3338      	adds	r3, #56	; 0x38
 8006576:	3330      	adds	r3, #48	; 0x30
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fc71 	bl	8005e60 <ld_word>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d140      	bne.n	8006606 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006586:	3301      	adds	r3, #1
 8006588:	4619      	mov	r1, r3
 800658a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800658c:	f7ff fd0c 	bl	8005fa8 <move_window>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d137      	bne.n	8006606 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	2200      	movs	r2, #0
 800659a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	3338      	adds	r3, #56	; 0x38
 80065a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fc5b 	bl	8005e60 <ld_word>
 80065aa:	4603      	mov	r3, r0
 80065ac:	461a      	mov	r2, r3
 80065ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d127      	bne.n	8006606 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fc68 	bl	8005e90 <ld_dword>
 80065c0:	4602      	mov	r2, r0
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <find_volume+0x500>)
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d11e      	bne.n	8006606 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	3338      	adds	r3, #56	; 0x38
 80065cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fc5d 	bl	8005e90 <ld_dword>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <find_volume+0x504>)
 80065da:	429a      	cmp	r2, r3
 80065dc:	d113      	bne.n	8006606 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	3338      	adds	r3, #56	; 0x38
 80065e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fc52 	bl	8005e90 <ld_dword>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	3338      	adds	r3, #56	; 0x38
 80065f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fc48 	bl	8005e90 <ld_dword>
 8006600:	4602      	mov	r2, r0
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800660c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <find_volume+0x508>)
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <find_volume+0x508>)
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <find_volume+0x508>)
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	4a07      	ldr	r2, [pc, #28]	; (8006644 <find_volume+0x50c>)
 8006626:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800662a:	f7ff fc55 	bl	8005ed8 <clear_lock>
#endif
	return FR_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3758      	adds	r7, #88	; 0x58
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	41615252 	.word	0x41615252
 800663c:	61417272 	.word	0x61417272
 8006640:	200000b0 	.word	0x200000b0
 8006644:	200000d4 	.word	0x200000d4

08006648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800665a:	f107 0310 	add.w	r3, r7, #16
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fccf 	bl	8006002 <get_ldnumber>
 8006664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2b00      	cmp	r3, #0
 800666a:	da01      	bge.n	8006670 <f_mount+0x28>
 800666c:	230b      	movs	r3, #11
 800666e:	e02b      	b.n	80066c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006670:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <f_mount+0x88>)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006678:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006680:	69b8      	ldr	r0, [r7, #24]
 8006682:	f7ff fc29 	bl	8005ed8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	490d      	ldr	r1, [pc, #52]	; (80066d0 <f_mount+0x88>)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <f_mount+0x66>
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <f_mount+0x6a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	e00a      	b.n	80066c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80066b2:	f107 010c 	add.w	r1, r7, #12
 80066b6:	f107 0308 	add.w	r3, r7, #8
 80066ba:	2200      	movs	r2, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fd3b 	bl	8006138 <find_volume>
 80066c2:	4603      	mov	r3, r0
 80066c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200000ac 	.word	0x200000ac

080066d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80066ea:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 80066ec:	7a5b      	ldrb	r3, [r3, #9]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d131      	bne.n	8006758 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 80066f6:	7a5b      	ldrb	r3, [r3, #9]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 80066fe:	2100      	movs	r1, #0
 8006700:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 8006704:	7a5b      	ldrb	r3, [r3, #9]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 8006714:	7a5b      	ldrb	r3, [r3, #9]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	4b13      	ldr	r3, [pc, #76]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 800671c:	4413      	add	r3, r2
 800671e:	79fa      	ldrb	r2, [r7, #7]
 8006720:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006722:	4b11      	ldr	r3, [pc, #68]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 8006724:	7a5b      	ldrb	r3, [r3, #9]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	b2d1      	uxtb	r1, r2
 800672c:	4a0e      	ldr	r2, [pc, #56]	; (8006768 <FATFS_LinkDriverEx+0x94>)
 800672e:	7251      	strb	r1, [r2, #9]
 8006730:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	3330      	adds	r3, #48	; 0x30
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	3301      	adds	r3, #1
 8006740:	223a      	movs	r2, #58	; 0x3a
 8006742:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	3302      	adds	r3, #2
 8006748:	222f      	movs	r2, #47	; 0x2f
 800674a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	3303      	adds	r3, #3
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	200002d4 	.word	0x200002d4

0800676c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006776:	2200      	movs	r2, #0
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff ffaa 	bl	80066d4 <FATFS_LinkDriverEx>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <__errno>:
 800678c:	4b01      	ldr	r3, [pc, #4]	; (8006794 <__errno+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000024 	.word	0x20000024

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4e0d      	ldr	r6, [pc, #52]	; (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	; (80067d4 <__libc_init_array+0x3c>)
 800679e:	1ba4      	subs	r4, r4, r6
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2500      	movs	r5, #0
 80067a4:	42a5      	cmp	r5, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4e0b      	ldr	r6, [pc, #44]	; (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	; (80067dc <__libc_init_array+0x44>)
 80067ac:	f000 fc26 	bl	8006ffc <_init>
 80067b0:	1ba4      	subs	r4, r4, r6
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2500      	movs	r5, #0
 80067b6:	42a5      	cmp	r5, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067c0:	4798      	blx	r3
 80067c2:	3501      	adds	r5, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ca:	4798      	blx	r3
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	080070c4 	.word	0x080070c4
 80067d4:	080070c4 	.word	0x080070c4
 80067d8:	080070c4 	.word	0x080070c4
 80067dc:	080070c8 	.word	0x080070c8

080067e0 <memset>:
 80067e0:	4402      	add	r2, r0
 80067e2:	4603      	mov	r3, r0
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d100      	bne.n	80067ea <memset+0xa>
 80067e8:	4770      	bx	lr
 80067ea:	f803 1b01 	strb.w	r1, [r3], #1
 80067ee:	e7f9      	b.n	80067e4 <memset+0x4>

080067f0 <siprintf>:
 80067f0:	b40e      	push	{r1, r2, r3}
 80067f2:	b500      	push	{lr}
 80067f4:	b09c      	sub	sp, #112	; 0x70
 80067f6:	ab1d      	add	r3, sp, #116	; 0x74
 80067f8:	9002      	str	r0, [sp, #8]
 80067fa:	9006      	str	r0, [sp, #24]
 80067fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006800:	4809      	ldr	r0, [pc, #36]	; (8006828 <siprintf+0x38>)
 8006802:	9107      	str	r1, [sp, #28]
 8006804:	9104      	str	r1, [sp, #16]
 8006806:	4909      	ldr	r1, [pc, #36]	; (800682c <siprintf+0x3c>)
 8006808:	f853 2b04 	ldr.w	r2, [r3], #4
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	6800      	ldr	r0, [r0, #0]
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	a902      	add	r1, sp, #8
 8006814:	f000 f866 	bl	80068e4 <_svfiprintf_r>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	2200      	movs	r2, #0
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	b01c      	add	sp, #112	; 0x70
 8006820:	f85d eb04 	ldr.w	lr, [sp], #4
 8006824:	b003      	add	sp, #12
 8006826:	4770      	bx	lr
 8006828:	20000024 	.word	0x20000024
 800682c:	ffff0208 	.word	0xffff0208

08006830 <__ssputs_r>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	688e      	ldr	r6, [r1, #8]
 8006836:	429e      	cmp	r6, r3
 8006838:	4682      	mov	sl, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4690      	mov	r8, r2
 800683e:	4699      	mov	r9, r3
 8006840:	d837      	bhi.n	80068b2 <__ssputs_r+0x82>
 8006842:	898a      	ldrh	r2, [r1, #12]
 8006844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006848:	d031      	beq.n	80068ae <__ssputs_r+0x7e>
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	6909      	ldr	r1, [r1, #16]
 800684e:	1a6f      	subs	r7, r5, r1
 8006850:	6965      	ldr	r5, [r4, #20]
 8006852:	2302      	movs	r3, #2
 8006854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006858:	fb95 f5f3 	sdiv	r5, r5, r3
 800685c:	f109 0301 	add.w	r3, r9, #1
 8006860:	443b      	add	r3, r7
 8006862:	429d      	cmp	r5, r3
 8006864:	bf38      	it	cc
 8006866:	461d      	movcc	r5, r3
 8006868:	0553      	lsls	r3, r2, #21
 800686a:	d530      	bpl.n	80068ce <__ssputs_r+0x9e>
 800686c:	4629      	mov	r1, r5
 800686e:	f000 fb2b 	bl	8006ec8 <_malloc_r>
 8006872:	4606      	mov	r6, r0
 8006874:	b950      	cbnz	r0, 800688c <__ssputs_r+0x5c>
 8006876:	230c      	movs	r3, #12
 8006878:	f8ca 3000 	str.w	r3, [sl]
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	463a      	mov	r2, r7
 800688e:	6921      	ldr	r1, [r4, #16]
 8006890:	f000 faa8 	bl	8006de4 <memcpy>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	6126      	str	r6, [r4, #16]
 80068a2:	6165      	str	r5, [r4, #20]
 80068a4:	443e      	add	r6, r7
 80068a6:	1bed      	subs	r5, r5, r7
 80068a8:	6026      	str	r6, [r4, #0]
 80068aa:	60a5      	str	r5, [r4, #8]
 80068ac:	464e      	mov	r6, r9
 80068ae:	454e      	cmp	r6, r9
 80068b0:	d900      	bls.n	80068b4 <__ssputs_r+0x84>
 80068b2:	464e      	mov	r6, r9
 80068b4:	4632      	mov	r2, r6
 80068b6:	4641      	mov	r1, r8
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	f000 fa9e 	bl	8006dfa <memmove>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	1b9b      	subs	r3, r3, r6
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	441e      	add	r6, r3
 80068c8:	6026      	str	r6, [r4, #0]
 80068ca:	2000      	movs	r0, #0
 80068cc:	e7dc      	b.n	8006888 <__ssputs_r+0x58>
 80068ce:	462a      	mov	r2, r5
 80068d0:	f000 fb54 	bl	8006f7c <_realloc_r>
 80068d4:	4606      	mov	r6, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d1e2      	bne.n	80068a0 <__ssputs_r+0x70>
 80068da:	6921      	ldr	r1, [r4, #16]
 80068dc:	4650      	mov	r0, sl
 80068de:	f000 faa5 	bl	8006e2c <_free_r>
 80068e2:	e7c8      	b.n	8006876 <__ssputs_r+0x46>

080068e4 <_svfiprintf_r>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	461d      	mov	r5, r3
 80068ea:	898b      	ldrh	r3, [r1, #12]
 80068ec:	061f      	lsls	r7, r3, #24
 80068ee:	b09d      	sub	sp, #116	; 0x74
 80068f0:	4680      	mov	r8, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	4616      	mov	r6, r2
 80068f6:	d50f      	bpl.n	8006918 <_svfiprintf_r+0x34>
 80068f8:	690b      	ldr	r3, [r1, #16]
 80068fa:	b96b      	cbnz	r3, 8006918 <_svfiprintf_r+0x34>
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	f000 fae3 	bl	8006ec8 <_malloc_r>
 8006902:	6020      	str	r0, [r4, #0]
 8006904:	6120      	str	r0, [r4, #16]
 8006906:	b928      	cbnz	r0, 8006914 <_svfiprintf_r+0x30>
 8006908:	230c      	movs	r3, #12
 800690a:	f8c8 3000 	str.w	r3, [r8]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	e0c8      	b.n	8006aa6 <_svfiprintf_r+0x1c2>
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	6163      	str	r3, [r4, #20]
 8006918:	2300      	movs	r3, #0
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	2320      	movs	r3, #32
 800691e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006922:	2330      	movs	r3, #48	; 0x30
 8006924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006928:	9503      	str	r5, [sp, #12]
 800692a:	f04f 0b01 	mov.w	fp, #1
 800692e:	4637      	mov	r7, r6
 8006930:	463d      	mov	r5, r7
 8006932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006936:	b10b      	cbz	r3, 800693c <_svfiprintf_r+0x58>
 8006938:	2b25      	cmp	r3, #37	; 0x25
 800693a:	d13e      	bne.n	80069ba <_svfiprintf_r+0xd6>
 800693c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006940:	d00b      	beq.n	800695a <_svfiprintf_r+0x76>
 8006942:	4653      	mov	r3, sl
 8006944:	4632      	mov	r2, r6
 8006946:	4621      	mov	r1, r4
 8006948:	4640      	mov	r0, r8
 800694a:	f7ff ff71 	bl	8006830 <__ssputs_r>
 800694e:	3001      	adds	r0, #1
 8006950:	f000 80a4 	beq.w	8006a9c <_svfiprintf_r+0x1b8>
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	4453      	add	r3, sl
 8006958:	9309      	str	r3, [sp, #36]	; 0x24
 800695a:	783b      	ldrb	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 809d 	beq.w	8006a9c <_svfiprintf_r+0x1b8>
 8006962:	2300      	movs	r3, #0
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006974:	931a      	str	r3, [sp, #104]	; 0x68
 8006976:	462f      	mov	r7, r5
 8006978:	2205      	movs	r2, #5
 800697a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800697e:	4850      	ldr	r0, [pc, #320]	; (8006ac0 <_svfiprintf_r+0x1dc>)
 8006980:	f7f9 fc4e 	bl	8000220 <memchr>
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	b9d0      	cbnz	r0, 80069be <_svfiprintf_r+0xda>
 8006988:	06d9      	lsls	r1, r3, #27
 800698a:	bf44      	itt	mi
 800698c:	2220      	movmi	r2, #32
 800698e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006992:	071a      	lsls	r2, r3, #28
 8006994:	bf44      	itt	mi
 8006996:	222b      	movmi	r2, #43	; 0x2b
 8006998:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800699c:	782a      	ldrb	r2, [r5, #0]
 800699e:	2a2a      	cmp	r2, #42	; 0x2a
 80069a0:	d015      	beq.n	80069ce <_svfiprintf_r+0xea>
 80069a2:	9a07      	ldr	r2, [sp, #28]
 80069a4:	462f      	mov	r7, r5
 80069a6:	2000      	movs	r0, #0
 80069a8:	250a      	movs	r5, #10
 80069aa:	4639      	mov	r1, r7
 80069ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b0:	3b30      	subs	r3, #48	; 0x30
 80069b2:	2b09      	cmp	r3, #9
 80069b4:	d94d      	bls.n	8006a52 <_svfiprintf_r+0x16e>
 80069b6:	b1b8      	cbz	r0, 80069e8 <_svfiprintf_r+0x104>
 80069b8:	e00f      	b.n	80069da <_svfiprintf_r+0xf6>
 80069ba:	462f      	mov	r7, r5
 80069bc:	e7b8      	b.n	8006930 <_svfiprintf_r+0x4c>
 80069be:	4a40      	ldr	r2, [pc, #256]	; (8006ac0 <_svfiprintf_r+0x1dc>)
 80069c0:	1a80      	subs	r0, r0, r2
 80069c2:	fa0b f000 	lsl.w	r0, fp, r0
 80069c6:	4318      	orrs	r0, r3
 80069c8:	9004      	str	r0, [sp, #16]
 80069ca:	463d      	mov	r5, r7
 80069cc:	e7d3      	b.n	8006976 <_svfiprintf_r+0x92>
 80069ce:	9a03      	ldr	r2, [sp, #12]
 80069d0:	1d11      	adds	r1, r2, #4
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	9103      	str	r1, [sp, #12]
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	db01      	blt.n	80069de <_svfiprintf_r+0xfa>
 80069da:	9207      	str	r2, [sp, #28]
 80069dc:	e004      	b.n	80069e8 <_svfiprintf_r+0x104>
 80069de:	4252      	negs	r2, r2
 80069e0:	f043 0302 	orr.w	r3, r3, #2
 80069e4:	9207      	str	r2, [sp, #28]
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	783b      	ldrb	r3, [r7, #0]
 80069ea:	2b2e      	cmp	r3, #46	; 0x2e
 80069ec:	d10c      	bne.n	8006a08 <_svfiprintf_r+0x124>
 80069ee:	787b      	ldrb	r3, [r7, #1]
 80069f0:	2b2a      	cmp	r3, #42	; 0x2a
 80069f2:	d133      	bne.n	8006a5c <_svfiprintf_r+0x178>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9203      	str	r2, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfb8      	it	lt
 8006a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a04:	3702      	adds	r7, #2
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	4d2e      	ldr	r5, [pc, #184]	; (8006ac4 <_svfiprintf_r+0x1e0>)
 8006a0a:	7839      	ldrb	r1, [r7, #0]
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f7f9 fc06 	bl	8000220 <memchr>
 8006a14:	b138      	cbz	r0, 8006a26 <_svfiprintf_r+0x142>
 8006a16:	2340      	movs	r3, #64	; 0x40
 8006a18:	1b40      	subs	r0, r0, r5
 8006a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	4303      	orrs	r3, r0
 8006a22:	3701      	adds	r7, #1
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	7839      	ldrb	r1, [r7, #0]
 8006a28:	4827      	ldr	r0, [pc, #156]	; (8006ac8 <_svfiprintf_r+0x1e4>)
 8006a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a2e:	2206      	movs	r2, #6
 8006a30:	1c7e      	adds	r6, r7, #1
 8006a32:	f7f9 fbf5 	bl	8000220 <memchr>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d038      	beq.n	8006aac <_svfiprintf_r+0x1c8>
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <_svfiprintf_r+0x1e8>)
 8006a3c:	bb13      	cbnz	r3, 8006a84 <_svfiprintf_r+0x1a0>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	3307      	adds	r3, #7
 8006a42:	f023 0307 	bic.w	r3, r3, #7
 8006a46:	3308      	adds	r3, #8
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4c:	444b      	add	r3, r9
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	e76d      	b.n	800692e <_svfiprintf_r+0x4a>
 8006a52:	fb05 3202 	mla	r2, r5, r2, r3
 8006a56:	2001      	movs	r0, #1
 8006a58:	460f      	mov	r7, r1
 8006a5a:	e7a6      	b.n	80069aa <_svfiprintf_r+0xc6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	3701      	adds	r7, #1
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	4619      	mov	r1, r3
 8006a64:	250a      	movs	r5, #10
 8006a66:	4638      	mov	r0, r7
 8006a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a6c:	3a30      	subs	r2, #48	; 0x30
 8006a6e:	2a09      	cmp	r2, #9
 8006a70:	d903      	bls.n	8006a7a <_svfiprintf_r+0x196>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0c8      	beq.n	8006a08 <_svfiprintf_r+0x124>
 8006a76:	9105      	str	r1, [sp, #20]
 8006a78:	e7c6      	b.n	8006a08 <_svfiprintf_r+0x124>
 8006a7a:	fb05 2101 	mla	r1, r5, r1, r2
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4607      	mov	r7, r0
 8006a82:	e7f0      	b.n	8006a66 <_svfiprintf_r+0x182>
 8006a84:	ab03      	add	r3, sp, #12
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <_svfiprintf_r+0x1ec>)
 8006a8c:	a904      	add	r1, sp, #16
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f3af 8000 	nop.w
 8006a94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a98:	4681      	mov	r9, r0
 8006a9a:	d1d6      	bne.n	8006a4a <_svfiprintf_r+0x166>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	065b      	lsls	r3, r3, #25
 8006aa0:	f53f af35 	bmi.w	800690e <_svfiprintf_r+0x2a>
 8006aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aa6:	b01d      	add	sp, #116	; 0x74
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	ab03      	add	r3, sp, #12
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <_svfiprintf_r+0x1ec>)
 8006ab4:	a904      	add	r1, sp, #16
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f000 f882 	bl	8006bc0 <_printf_i>
 8006abc:	e7ea      	b.n	8006a94 <_svfiprintf_r+0x1b0>
 8006abe:	bf00      	nop
 8006ac0:	08007088 	.word	0x08007088
 8006ac4:	0800708e 	.word	0x0800708e
 8006ac8:	08007092 	.word	0x08007092
 8006acc:	00000000 	.word	0x00000000
 8006ad0:	08006831 	.word	0x08006831

08006ad4 <_printf_common>:
 8006ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	4691      	mov	r9, r2
 8006ada:	461f      	mov	r7, r3
 8006adc:	688a      	ldr	r2, [r1, #8]
 8006ade:	690b      	ldr	r3, [r1, #16]
 8006ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	bfb8      	it	lt
 8006ae8:	4613      	movlt	r3, r2
 8006aea:	f8c9 3000 	str.w	r3, [r9]
 8006aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006af2:	4606      	mov	r6, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	b112      	cbz	r2, 8006afe <_printf_common+0x2a>
 8006af8:	3301      	adds	r3, #1
 8006afa:	f8c9 3000 	str.w	r3, [r9]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	0699      	lsls	r1, r3, #26
 8006b02:	bf42      	ittt	mi
 8006b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b08:	3302      	addmi	r3, #2
 8006b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	f015 0506 	ands.w	r5, r5, #6
 8006b14:	d107      	bne.n	8006b26 <_printf_common+0x52>
 8006b16:	f104 0a19 	add.w	sl, r4, #25
 8006b1a:	68e3      	ldr	r3, [r4, #12]
 8006b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	42ab      	cmp	r3, r5
 8006b24:	dc28      	bgt.n	8006b78 <_printf_common+0xa4>
 8006b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	3300      	adds	r3, #0
 8006b2e:	bf18      	it	ne
 8006b30:	2301      	movne	r3, #1
 8006b32:	0692      	lsls	r2, r2, #26
 8006b34:	d42d      	bmi.n	8006b92 <_printf_common+0xbe>
 8006b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	47c0      	blx	r8
 8006b40:	3001      	adds	r0, #1
 8006b42:	d020      	beq.n	8006b86 <_printf_common+0xb2>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	68e5      	ldr	r5, [r4, #12]
 8006b48:	f8d9 2000 	ldr.w	r2, [r9]
 8006b4c:	f003 0306 	and.w	r3, r3, #6
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	bf08      	it	eq
 8006b54:	1aad      	subeq	r5, r5, r2
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	6922      	ldr	r2, [r4, #16]
 8006b5a:	bf0c      	ite	eq
 8006b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b60:	2500      	movne	r5, #0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	bfc4      	itt	gt
 8006b66:	1a9b      	subgt	r3, r3, r2
 8006b68:	18ed      	addgt	r5, r5, r3
 8006b6a:	f04f 0900 	mov.w	r9, #0
 8006b6e:	341a      	adds	r4, #26
 8006b70:	454d      	cmp	r5, r9
 8006b72:	d11a      	bne.n	8006baa <_printf_common+0xd6>
 8006b74:	2000      	movs	r0, #0
 8006b76:	e008      	b.n	8006b8a <_printf_common+0xb6>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	47c0      	blx	r8
 8006b82:	3001      	adds	r0, #1
 8006b84:	d103      	bne.n	8006b8e <_printf_common+0xba>
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	3501      	adds	r5, #1
 8006b90:	e7c3      	b.n	8006b1a <_printf_common+0x46>
 8006b92:	18e1      	adds	r1, r4, r3
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	2030      	movs	r0, #48	; 0x30
 8006b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b9c:	4422      	add	r2, r4
 8006b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	e7c5      	b.n	8006b36 <_printf_common+0x62>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4622      	mov	r2, r4
 8006bae:	4639      	mov	r1, r7
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	47c0      	blx	r8
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d0e6      	beq.n	8006b86 <_printf_common+0xb2>
 8006bb8:	f109 0901 	add.w	r9, r9, #1
 8006bbc:	e7d8      	b.n	8006b70 <_printf_common+0x9c>
	...

08006bc0 <_printf_i>:
 8006bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bc8:	460c      	mov	r4, r1
 8006bca:	7e09      	ldrb	r1, [r1, #24]
 8006bcc:	b085      	sub	sp, #20
 8006bce:	296e      	cmp	r1, #110	; 0x6e
 8006bd0:	4617      	mov	r7, r2
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bd8:	f000 80b3 	beq.w	8006d42 <_printf_i+0x182>
 8006bdc:	d822      	bhi.n	8006c24 <_printf_i+0x64>
 8006bde:	2963      	cmp	r1, #99	; 0x63
 8006be0:	d036      	beq.n	8006c50 <_printf_i+0x90>
 8006be2:	d80a      	bhi.n	8006bfa <_printf_i+0x3a>
 8006be4:	2900      	cmp	r1, #0
 8006be6:	f000 80b9 	beq.w	8006d5c <_printf_i+0x19c>
 8006bea:	2958      	cmp	r1, #88	; 0x58
 8006bec:	f000 8083 	beq.w	8006cf6 <_printf_i+0x136>
 8006bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bf8:	e032      	b.n	8006c60 <_printf_i+0xa0>
 8006bfa:	2964      	cmp	r1, #100	; 0x64
 8006bfc:	d001      	beq.n	8006c02 <_printf_i+0x42>
 8006bfe:	2969      	cmp	r1, #105	; 0x69
 8006c00:	d1f6      	bne.n	8006bf0 <_printf_i+0x30>
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	0605      	lsls	r5, r0, #24
 8006c08:	f103 0104 	add.w	r1, r3, #4
 8006c0c:	d52a      	bpl.n	8006c64 <_printf_i+0xa4>
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6011      	str	r1, [r2, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da03      	bge.n	8006c1e <_printf_i+0x5e>
 8006c16:	222d      	movs	r2, #45	; 0x2d
 8006c18:	425b      	negs	r3, r3
 8006c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c1e:	486f      	ldr	r0, [pc, #444]	; (8006ddc <_printf_i+0x21c>)
 8006c20:	220a      	movs	r2, #10
 8006c22:	e039      	b.n	8006c98 <_printf_i+0xd8>
 8006c24:	2973      	cmp	r1, #115	; 0x73
 8006c26:	f000 809d 	beq.w	8006d64 <_printf_i+0x1a4>
 8006c2a:	d808      	bhi.n	8006c3e <_printf_i+0x7e>
 8006c2c:	296f      	cmp	r1, #111	; 0x6f
 8006c2e:	d020      	beq.n	8006c72 <_printf_i+0xb2>
 8006c30:	2970      	cmp	r1, #112	; 0x70
 8006c32:	d1dd      	bne.n	8006bf0 <_printf_i+0x30>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	f043 0320 	orr.w	r3, r3, #32
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	e003      	b.n	8006c46 <_printf_i+0x86>
 8006c3e:	2975      	cmp	r1, #117	; 0x75
 8006c40:	d017      	beq.n	8006c72 <_printf_i+0xb2>
 8006c42:	2978      	cmp	r1, #120	; 0x78
 8006c44:	d1d4      	bne.n	8006bf0 <_printf_i+0x30>
 8006c46:	2378      	movs	r3, #120	; 0x78
 8006c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c4c:	4864      	ldr	r0, [pc, #400]	; (8006de0 <_printf_i+0x220>)
 8006c4e:	e055      	b.n	8006cfc <_printf_i+0x13c>
 8006c50:	6813      	ldr	r3, [r2, #0]
 8006c52:	1d19      	adds	r1, r3, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6011      	str	r1, [r2, #0]
 8006c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c60:	2301      	movs	r3, #1
 8006c62:	e08c      	b.n	8006d7e <_printf_i+0x1be>
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6011      	str	r1, [r2, #0]
 8006c68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c6c:	bf18      	it	ne
 8006c6e:	b21b      	sxthne	r3, r3
 8006c70:	e7cf      	b.n	8006c12 <_printf_i+0x52>
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	6825      	ldr	r5, [r4, #0]
 8006c76:	1d18      	adds	r0, r3, #4
 8006c78:	6010      	str	r0, [r2, #0]
 8006c7a:	0628      	lsls	r0, r5, #24
 8006c7c:	d501      	bpl.n	8006c82 <_printf_i+0xc2>
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	e002      	b.n	8006c88 <_printf_i+0xc8>
 8006c82:	0668      	lsls	r0, r5, #25
 8006c84:	d5fb      	bpl.n	8006c7e <_printf_i+0xbe>
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	4854      	ldr	r0, [pc, #336]	; (8006ddc <_printf_i+0x21c>)
 8006c8a:	296f      	cmp	r1, #111	; 0x6f
 8006c8c:	bf14      	ite	ne
 8006c8e:	220a      	movne	r2, #10
 8006c90:	2208      	moveq	r2, #8
 8006c92:	2100      	movs	r1, #0
 8006c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c98:	6865      	ldr	r5, [r4, #4]
 8006c9a:	60a5      	str	r5, [r4, #8]
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	f2c0 8095 	blt.w	8006dcc <_printf_i+0x20c>
 8006ca2:	6821      	ldr	r1, [r4, #0]
 8006ca4:	f021 0104 	bic.w	r1, r1, #4
 8006ca8:	6021      	str	r1, [r4, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d13d      	bne.n	8006d2a <_printf_i+0x16a>
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	f040 808e 	bne.w	8006dd0 <_printf_i+0x210>
 8006cb4:	4665      	mov	r5, ip
 8006cb6:	2a08      	cmp	r2, #8
 8006cb8:	d10b      	bne.n	8006cd2 <_printf_i+0x112>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	07db      	lsls	r3, r3, #31
 8006cbe:	d508      	bpl.n	8006cd2 <_printf_i+0x112>
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	6862      	ldr	r2, [r4, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	bfde      	ittt	le
 8006cc8:	2330      	movle	r3, #48	; 0x30
 8006cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cd2:	ebac 0305 	sub.w	r3, ip, r5
 8006cd6:	6123      	str	r3, [r4, #16]
 8006cd8:	f8cd 8000 	str.w	r8, [sp]
 8006cdc:	463b      	mov	r3, r7
 8006cde:	aa03      	add	r2, sp, #12
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff fef6 	bl	8006ad4 <_printf_common>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d14d      	bne.n	8006d88 <_printf_i+0x1c8>
 8006cec:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf0:	b005      	add	sp, #20
 8006cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cf6:	4839      	ldr	r0, [pc, #228]	; (8006ddc <_printf_i+0x21c>)
 8006cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	6821      	ldr	r1, [r4, #0]
 8006d00:	1d1d      	adds	r5, r3, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6015      	str	r5, [r2, #0]
 8006d06:	060a      	lsls	r2, r1, #24
 8006d08:	d50b      	bpl.n	8006d22 <_printf_i+0x162>
 8006d0a:	07ca      	lsls	r2, r1, #31
 8006d0c:	bf44      	itt	mi
 8006d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8006d12:	6021      	strmi	r1, [r4, #0]
 8006d14:	b91b      	cbnz	r3, 8006d1e <_printf_i+0x15e>
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	f022 0220 	bic.w	r2, r2, #32
 8006d1c:	6022      	str	r2, [r4, #0]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	e7b7      	b.n	8006c92 <_printf_i+0xd2>
 8006d22:	064d      	lsls	r5, r1, #25
 8006d24:	bf48      	it	mi
 8006d26:	b29b      	uxthmi	r3, r3
 8006d28:	e7ef      	b.n	8006d0a <_printf_i+0x14a>
 8006d2a:	4665      	mov	r5, ip
 8006d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d30:	fb02 3311 	mls	r3, r2, r1, r3
 8006d34:	5cc3      	ldrb	r3, [r0, r3]
 8006d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	d1f5      	bne.n	8006d2c <_printf_i+0x16c>
 8006d40:	e7b9      	b.n	8006cb6 <_printf_i+0xf6>
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	6961      	ldr	r1, [r4, #20]
 8006d48:	1d18      	adds	r0, r3, #4
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	0628      	lsls	r0, r5, #24
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	d501      	bpl.n	8006d56 <_printf_i+0x196>
 8006d52:	6019      	str	r1, [r3, #0]
 8006d54:	e002      	b.n	8006d5c <_printf_i+0x19c>
 8006d56:	066a      	lsls	r2, r5, #25
 8006d58:	d5fb      	bpl.n	8006d52 <_printf_i+0x192>
 8006d5a:	8019      	strh	r1, [r3, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	4665      	mov	r5, ip
 8006d62:	e7b9      	b.n	8006cd8 <_printf_i+0x118>
 8006d64:	6813      	ldr	r3, [r2, #0]
 8006d66:	1d19      	adds	r1, r3, #4
 8006d68:	6011      	str	r1, [r2, #0]
 8006d6a:	681d      	ldr	r5, [r3, #0]
 8006d6c:	6862      	ldr	r2, [r4, #4]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7f9 fa55 	bl	8000220 <memchr>
 8006d76:	b108      	cbz	r0, 8006d7c <_printf_i+0x1bc>
 8006d78:	1b40      	subs	r0, r0, r5
 8006d7a:	6060      	str	r0, [r4, #4]
 8006d7c:	6863      	ldr	r3, [r4, #4]
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	2300      	movs	r3, #0
 8006d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d86:	e7a7      	b.n	8006cd8 <_printf_i+0x118>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d0aa      	beq.n	8006cec <_printf_i+0x12c>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	079b      	lsls	r3, r3, #30
 8006d9a:	d413      	bmi.n	8006dc4 <_printf_i+0x204>
 8006d9c:	68e0      	ldr	r0, [r4, #12]
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	4298      	cmp	r0, r3
 8006da2:	bfb8      	it	lt
 8006da4:	4618      	movlt	r0, r3
 8006da6:	e7a3      	b.n	8006cf0 <_printf_i+0x130>
 8006da8:	2301      	movs	r3, #1
 8006daa:	464a      	mov	r2, r9
 8006dac:	4639      	mov	r1, r7
 8006dae:	4630      	mov	r0, r6
 8006db0:	47c0      	blx	r8
 8006db2:	3001      	adds	r0, #1
 8006db4:	d09a      	beq.n	8006cec <_printf_i+0x12c>
 8006db6:	3501      	adds	r5, #1
 8006db8:	68e3      	ldr	r3, [r4, #12]
 8006dba:	9a03      	ldr	r2, [sp, #12]
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	42ab      	cmp	r3, r5
 8006dc0:	dcf2      	bgt.n	8006da8 <_printf_i+0x1e8>
 8006dc2:	e7eb      	b.n	8006d9c <_printf_i+0x1dc>
 8006dc4:	2500      	movs	r5, #0
 8006dc6:	f104 0919 	add.w	r9, r4, #25
 8006dca:	e7f5      	b.n	8006db8 <_printf_i+0x1f8>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ac      	bne.n	8006d2a <_printf_i+0x16a>
 8006dd0:	7803      	ldrb	r3, [r0, #0]
 8006dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dda:	e76c      	b.n	8006cb6 <_printf_i+0xf6>
 8006ddc:	08007099 	.word	0x08007099
 8006de0:	080070aa 	.word	0x080070aa

08006de4 <memcpy>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	1e43      	subs	r3, r0, #1
 8006de8:	440a      	add	r2, r1
 8006dea:	4291      	cmp	r1, r2
 8006dec:	d100      	bne.n	8006df0 <memcpy+0xc>
 8006dee:	bd10      	pop	{r4, pc}
 8006df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df8:	e7f7      	b.n	8006dea <memcpy+0x6>

08006dfa <memmove>:
 8006dfa:	4288      	cmp	r0, r1
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	eb01 0302 	add.w	r3, r1, r2
 8006e02:	d807      	bhi.n	8006e14 <memmove+0x1a>
 8006e04:	1e42      	subs	r2, r0, #1
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d00a      	beq.n	8006e20 <memmove+0x26>
 8006e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e12:	e7f8      	b.n	8006e06 <memmove+0xc>
 8006e14:	4283      	cmp	r3, r0
 8006e16:	d9f5      	bls.n	8006e04 <memmove+0xa>
 8006e18:	1881      	adds	r1, r0, r2
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	42d3      	cmn	r3, r2
 8006e1e:	d100      	bne.n	8006e22 <memmove+0x28>
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e2a:	e7f7      	b.n	8006e1c <memmove+0x22>

08006e2c <_free_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4605      	mov	r5, r0
 8006e30:	2900      	cmp	r1, #0
 8006e32:	d045      	beq.n	8006ec0 <_free_r+0x94>
 8006e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e38:	1f0c      	subs	r4, r1, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bfb8      	it	lt
 8006e3e:	18e4      	addlt	r4, r4, r3
 8006e40:	f000 f8d2 	bl	8006fe8 <__malloc_lock>
 8006e44:	4a1f      	ldr	r2, [pc, #124]	; (8006ec4 <_free_r+0x98>)
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	4610      	mov	r0, r2
 8006e4a:	b933      	cbnz	r3, 8006e5a <_free_r+0x2e>
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	6014      	str	r4, [r2, #0]
 8006e50:	4628      	mov	r0, r5
 8006e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e56:	f000 b8c8 	b.w	8006fea <__malloc_unlock>
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d90c      	bls.n	8006e78 <_free_r+0x4c>
 8006e5e:	6821      	ldr	r1, [r4, #0]
 8006e60:	1862      	adds	r2, r4, r1
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bf04      	itt	eq
 8006e66:	681a      	ldreq	r2, [r3, #0]
 8006e68:	685b      	ldreq	r3, [r3, #4]
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	bf04      	itt	eq
 8006e6e:	1852      	addeq	r2, r2, r1
 8006e70:	6022      	streq	r2, [r4, #0]
 8006e72:	6004      	str	r4, [r0, #0]
 8006e74:	e7ec      	b.n	8006e50 <_free_r+0x24>
 8006e76:	4613      	mov	r3, r2
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	b10a      	cbz	r2, 8006e80 <_free_r+0x54>
 8006e7c:	42a2      	cmp	r2, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x4a>
 8006e80:	6819      	ldr	r1, [r3, #0]
 8006e82:	1858      	adds	r0, r3, r1
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x74>
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	4401      	add	r1, r0
 8006e8c:	1858      	adds	r0, r3, r1
 8006e8e:	4282      	cmp	r2, r0
 8006e90:	6019      	str	r1, [r3, #0]
 8006e92:	d1dd      	bne.n	8006e50 <_free_r+0x24>
 8006e94:	6810      	ldr	r0, [r2, #0]
 8006e96:	6852      	ldr	r2, [r2, #4]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	4401      	add	r1, r0
 8006e9c:	6019      	str	r1, [r3, #0]
 8006e9e:	e7d7      	b.n	8006e50 <_free_r+0x24>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x7c>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	e7d3      	b.n	8006e50 <_free_r+0x24>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	1821      	adds	r1, r4, r0
 8006eac:	428a      	cmp	r2, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6811      	ldreq	r1, [r2, #0]
 8006eb2:	6852      	ldreq	r2, [r2, #4]
 8006eb4:	6062      	str	r2, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1809      	addeq	r1, r1, r0
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	605c      	str	r4, [r3, #4]
 8006ebe:	e7c7      	b.n	8006e50 <_free_r+0x24>
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200002e0 	.word	0x200002e0

08006ec8 <_malloc_r>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	1ccd      	adds	r5, r1, #3
 8006ecc:	f025 0503 	bic.w	r5, r5, #3
 8006ed0:	3508      	adds	r5, #8
 8006ed2:	2d0c      	cmp	r5, #12
 8006ed4:	bf38      	it	cc
 8006ed6:	250c      	movcc	r5, #12
 8006ed8:	2d00      	cmp	r5, #0
 8006eda:	4606      	mov	r6, r0
 8006edc:	db01      	blt.n	8006ee2 <_malloc_r+0x1a>
 8006ede:	42a9      	cmp	r1, r5
 8006ee0:	d903      	bls.n	8006eea <_malloc_r+0x22>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	f000 f87d 	bl	8006fe8 <__malloc_lock>
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <_malloc_r+0xac>)
 8006ef0:	6814      	ldr	r4, [r2, #0]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	b991      	cbnz	r1, 8006f1c <_malloc_r+0x54>
 8006ef6:	4c20      	ldr	r4, [pc, #128]	; (8006f78 <_malloc_r+0xb0>)
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	b91b      	cbnz	r3, 8006f04 <_malloc_r+0x3c>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 f863 	bl	8006fc8 <_sbrk_r>
 8006f02:	6020      	str	r0, [r4, #0]
 8006f04:	4629      	mov	r1, r5
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 f85e 	bl	8006fc8 <_sbrk_r>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d124      	bne.n	8006f5a <_malloc_r+0x92>
 8006f10:	230c      	movs	r3, #12
 8006f12:	6033      	str	r3, [r6, #0]
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f868 	bl	8006fea <__malloc_unlock>
 8006f1a:	e7e4      	b.n	8006ee6 <_malloc_r+0x1e>
 8006f1c:	680b      	ldr	r3, [r1, #0]
 8006f1e:	1b5b      	subs	r3, r3, r5
 8006f20:	d418      	bmi.n	8006f54 <_malloc_r+0x8c>
 8006f22:	2b0b      	cmp	r3, #11
 8006f24:	d90f      	bls.n	8006f46 <_malloc_r+0x7e>
 8006f26:	600b      	str	r3, [r1, #0]
 8006f28:	50cd      	str	r5, [r1, r3]
 8006f2a:	18cc      	adds	r4, r1, r3
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f85c 	bl	8006fea <__malloc_unlock>
 8006f32:	f104 000b 	add.w	r0, r4, #11
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	f020 0007 	bic.w	r0, r0, #7
 8006f3c:	1ac3      	subs	r3, r0, r3
 8006f3e:	d0d3      	beq.n	8006ee8 <_malloc_r+0x20>
 8006f40:	425a      	negs	r2, r3
 8006f42:	50e2      	str	r2, [r4, r3]
 8006f44:	e7d0      	b.n	8006ee8 <_malloc_r+0x20>
 8006f46:	428c      	cmp	r4, r1
 8006f48:	684b      	ldr	r3, [r1, #4]
 8006f4a:	bf16      	itet	ne
 8006f4c:	6063      	strne	r3, [r4, #4]
 8006f4e:	6013      	streq	r3, [r2, #0]
 8006f50:	460c      	movne	r4, r1
 8006f52:	e7eb      	b.n	8006f2c <_malloc_r+0x64>
 8006f54:	460c      	mov	r4, r1
 8006f56:	6849      	ldr	r1, [r1, #4]
 8006f58:	e7cc      	b.n	8006ef4 <_malloc_r+0x2c>
 8006f5a:	1cc4      	adds	r4, r0, #3
 8006f5c:	f024 0403 	bic.w	r4, r4, #3
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d005      	beq.n	8006f70 <_malloc_r+0xa8>
 8006f64:	1a21      	subs	r1, r4, r0
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f82e 	bl	8006fc8 <_sbrk_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0cf      	beq.n	8006f10 <_malloc_r+0x48>
 8006f70:	6025      	str	r5, [r4, #0]
 8006f72:	e7db      	b.n	8006f2c <_malloc_r+0x64>
 8006f74:	200002e0 	.word	0x200002e0
 8006f78:	200002e4 	.word	0x200002e4

08006f7c <_realloc_r>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4614      	mov	r4, r2
 8006f82:	460e      	mov	r6, r1
 8006f84:	b921      	cbnz	r1, 8006f90 <_realloc_r+0x14>
 8006f86:	4611      	mov	r1, r2
 8006f88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f8c:	f7ff bf9c 	b.w	8006ec8 <_malloc_r>
 8006f90:	b922      	cbnz	r2, 8006f9c <_realloc_r+0x20>
 8006f92:	f7ff ff4b 	bl	8006e2c <_free_r>
 8006f96:	4625      	mov	r5, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9c:	f000 f826 	bl	8006fec <_malloc_usable_size_r>
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d20f      	bcs.n	8006fc4 <_realloc_r+0x48>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7ff ff8e 	bl	8006ec8 <_malloc_r>
 8006fac:	4605      	mov	r5, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0f2      	beq.n	8006f98 <_realloc_r+0x1c>
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	f7ff ff15 	bl	8006de4 <memcpy>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7ff ff35 	bl	8006e2c <_free_r>
 8006fc2:	e7e9      	b.n	8006f98 <_realloc_r+0x1c>
 8006fc4:	4635      	mov	r5, r6
 8006fc6:	e7e7      	b.n	8006f98 <_realloc_r+0x1c>

08006fc8 <_sbrk_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4c06      	ldr	r4, [pc, #24]	; (8006fe4 <_sbrk_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4605      	mov	r5, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	f7fa fdb2 	bl	8001b3c <_sbrk>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_sbrk_r+0x1a>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_sbrk_r+0x1a>
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	200046d4 	.word	0x200046d4

08006fe8 <__malloc_lock>:
 8006fe8:	4770      	bx	lr

08006fea <__malloc_unlock>:
 8006fea:	4770      	bx	lr

08006fec <_malloc_usable_size_r>:
 8006fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff0:	1f18      	subs	r0, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfbc      	itt	lt
 8006ff6:	580b      	ldrlt	r3, [r1, r0]
 8006ff8:	18c0      	addlt	r0, r0, r3
 8006ffa:	4770      	bx	lr

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
