
uart_barcode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800248c  0800248c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a4  080024a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024ac  080024ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080024c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080024c0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e34  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014be  00000000  00000000  00026e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d8  00000000  00000000  00028330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  00028a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020100  00000000  00000000  00029028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000623a  00000000  00000000  00049128  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3560  00000000  00000000  0004f362  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001128c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa8  00000000  00000000  00112940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002474 	.word	0x08002474

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002474 	.word	0x08002474

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	db0b      	blt.n	800052e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 021f 	and.w	r2, r3, #31
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <__NVIC_EnableIRQ+0x38>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	095b      	lsrs	r3, r3, #5
 8000524:	2001      	movs	r0, #1
 8000526:	fa00 f202 	lsl.w	r2, r0, r2
 800052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000e100 	.word	0xe000e100

08000540 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db10      	blt.n	8000574 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4909      	ldr	r1, [pc, #36]	; (8000580 <__NVIC_DisableIRQ+0x40>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	3320      	adds	r3, #32
 8000568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000e100 	.word	0xe000e100

08000584 <USART1_IRQHandler>:
void Barcode_Reader(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART1_IRQHandler(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
		NVIC_DisableIRQ(USART1_IRQn);
 8000588:	2025      	movs	r0, #37	; 0x25
 800058a:	f7ff ffd9 	bl	8000540 <__NVIC_DisableIRQ>
		Barcode_Reader();
 800058e:	f000 f805 	bl	800059c <Barcode_Reader>
		NVIC_EnableIRQ(USART1_IRQn);
 8000592:	2025      	movs	r0, #37	; 0x25
 8000594:	f7ff ffb6 	bl	8000504 <__NVIC_EnableIRQ>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <Barcode_Reader>:

void Barcode_Reader(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b08b      	sub	sp, #44	; 0x2c
 80005a0:	af00      	add	r7, sp, #0
	uint8_t dataArray[30];	//Array to store data
	char var = 0;			//Temp variable
 80005a2:	2300      	movs	r3, #0
 80005a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char i = 0;	//Counter
 80005a8:	2300      	movs	r3, #0
 80005aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	do
	{
		if(USART1->SR & USART_SR_RXNE) //Check for reception bit
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <Barcode_Reader+0xa0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d011      	beq.n	80005de <Barcode_Reader+0x42>
		{
			var = USART1->DR; 	//Get data from shift register
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <Barcode_Reader+0xa0>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dataArray[i] = var;	//Store RX data on array
 80005c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005ca:	4413      	add	r3, r2
 80005cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80005d0:	f803 2c24 	strb.w	r2, [r3, #-36]
			i++;
 80005d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005d8:	3301      	adds	r3, #1
 80005da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
	}
	while(var != '\r');			//Get data block until I get carry return
 80005de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e2:	2b0d      	cmp	r3, #13
 80005e4:	d1e3      	bne.n	80005ae <Barcode_Reader+0x12>

	for(unsigned char j = 0; j < i; j++)	//Loop to print data through serial
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80005ec:	e014      	b.n	8000618 <Barcode_Reader+0x7c>
	{
		USART1->DR = dataArray[j];			//Send data to shift register
 80005ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80005f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005f6:	4413      	add	r3, r2
 80005f8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <Barcode_Reader+0xa0>)
 80005fe:	605a      	str	r2, [r3, #4]
		while (!(USART1->SR & USART_SR_TC));
 8000600:	bf00      	nop
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <Barcode_Reader+0xa0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <Barcode_Reader+0x66>
	for(unsigned char j = 0; j < i; j++)	//Loop to print data through serial
 800060e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000612:	3301      	adds	r3, #1
 8000614:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000618:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800061c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000620:	429a      	cmp	r2, r3
 8000622:	d3e4      	bcc.n	80005ee <Barcode_Reader+0x52>
	}

	USART1->SR &= ~(USART_SR_RXNE);
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <Barcode_Reader+0xa0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <Barcode_Reader+0xa0>)
 800062a:	f023 0320 	bic.w	r3, r3, #32
 800062e:	6013      	str	r3, [r2, #0]


}
 8000630:	bf00      	nop
 8000632:	372c      	adds	r7, #44	; 0x2c
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40011000 	.word	0x40011000

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fa7b 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f829 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8ed 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f8c1 	bl	80007d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000656:	f000 f895 	bl	8000784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <main+0x58>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <main+0x58>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ(USART1_IRQn);
 8000666:	2025      	movs	r0, #37	; 0x25
 8000668:	f7ff ff4c 	bl	8000504 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t var = 'a';
 800066c:	2361      	movs	r3, #97	; 0x61
 800066e:	71fb      	strb	r3, [r7, #7]

  USART1->DR = var;  //send it back out
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <main+0x58>)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	6053      	str	r3, [r2, #4]
  while (!(USART1->SR & USART_SR_TC)); //wait for TX to be complete
 8000676:	bf00      	nop
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <main+0x58>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f9      	beq.n	8000678 <main+0x38>
//
//
//		  NVIC_EnableIRQ(USART1_IRQn);
//	  }
//
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000684:	2120      	movs	r1, #32
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <main+0x5c>)
 8000688:	f000 fd7f 	bl	800118a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800068c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000690:	f000 fac8 	bl	8000c24 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000694:	e7f6      	b.n	8000684 <main+0x44>
 8000696:	bf00      	nop
 8000698:	40011000 	.word	0x40011000
 800069c:	40020000 	.word	0x40020000

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fed8 	bl	8002464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <SystemClock_Config+0xdc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a2b      	ldr	r2, [pc, #172]	; (800077c <SystemClock_Config+0xdc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemClock_Config+0xdc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xe0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a25      	ldr	r2, [pc, #148]	; (8000780 <SystemClock_Config+0xe0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000714:	23b4      	movs	r3, #180	; 0xb4
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f853 	bl	80017d4 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000734:	f000 f8ea 	bl	800090c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000738:	f000 fd42 	bl	80011c0 <HAL_PWREx_EnableOverDrive>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000742:	f000 f8e3 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000752:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2105      	movs	r1, #5
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fd7b 	bl	8001260 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000770:	f000 f8cc 	bl	800090c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART1_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x4c>)
 80007bc:	f001 fa64 	bl	8001c88 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8a1 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028
 80007d4:	40011000 	.word	0x40011000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 fa3a 	bl	8001c88 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f877 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000068 	.word	0x20000068
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <MX_GPIO_Init+0xd0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <MX_GPIO_Init+0xd0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <MX_GPIO_Init+0xd4>)
 80008b8:	f000 fc4e 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_GPIO_Init+0xd8>)
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_GPIO_Init+0xdc>)
 80008d2:	f000 faaf 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_GPIO_Init+0xd4>)
 80008ee:	f000 faa1 	bl	8000e34 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	10210000 	.word	0x10210000
 8000908:	40020800 	.word	0x40020800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f000 fa36 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <HAL_UART_MspInit+0xe8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12d      	bne.n	80009ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a30      	ldr	r2, [pc, #192]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <HAL_UART_MspInit+0xf0>)
 80009e4:	f000 fa26 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e8:	e030      	b.n	8000a4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <HAL_UART_MspInit+0xf4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d12b      	bne.n	8000a4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <HAL_UART_MspInit+0xec>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_UART_MspInit+0xec>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_UART_MspInit+0xf0>)
 8000a48:	f000 f9f4 	bl	8000e34 <HAL_GPIO_Init>
}
 8000a4c:	bf00      	nop
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40004400 	.word	0x40004400

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f894 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SystemInit+0x28>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <SystemInit+0x28>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SystemInit+0x28>)
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ada:	609a      	str	r2, [r3, #8]
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000af2:	e003      	b.n	8000afc <LoopCopyDataInit>

08000af4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000af6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000af8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000afa:	3104      	adds	r1, #4

08000afc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b04:	d3f6      	bcc.n	8000af4 <CopyDataInit>
  ldr  r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b08:	e002      	b.n	8000b10 <LoopFillZerobss>

08000b0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b0c:	f842 3b04 	str.w	r3, [r2], #4

08000b10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b14:	d3f9      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd3 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f001 fc7f 	bl	800241c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd8f 	bl	8000640 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b28:	080024b4 	.word	0x080024b4
  ldr  r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b30:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b34:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b38:	200000ac 	.word	0x200000ac

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f92f 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fed2 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f939 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f90f 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200000a8 	.word	0x200000a8

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200000a8 	.word	0x200000a8

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_Delay+0x40>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff47 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5c 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d00b      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e82:	2b11      	cmp	r3, #17
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0xfc>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b12      	cmp	r3, #18
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5c      	ldr	r3, [pc, #368]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_GPIO_Init+0x2fc>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a57      	ldr	r2, [pc, #348]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x308>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x30c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x310>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x314>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_GPIO_Init+0x318>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_GPIO_Init+0x31c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4934      	ldr	r1, [pc, #208]	; (8001134 <HAL_GPIO_Init+0x300>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_GPIO_Init+0x320>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001092:	4a30      	ldr	r2, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x320>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_GPIO_Init+0x320>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_GPIO_Init+0x320>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_GPIO_Init+0x320>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x320>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_GPIO_Init+0x320>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_GPIO_Init+0x320>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	3724      	adds	r7, #36	; 0x24
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	401a      	ands	r2, r3
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d104      	bne.n	80011ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_PWREx_EnableOverDrive+0x90>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_PWREx_EnableOverDrive+0x94>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff fd0e 	bl	8000c0c <HAL_GetTick>
 80011f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011f2:	e009      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f4:	f7ff fd0a 	bl	8000c0c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	d901      	bls.n	8001208 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e01f      	b.n	8001248 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_PWREx_EnableOverDrive+0x98>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d1ee      	bne.n	80011f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800121c:	f7ff fcf6 	bl	8000c0c <HAL_GetTick>
 8001220:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001222:	e009      	b.n	8001238 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001224:	f7ff fcf2 	bl	8000c0c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001232:	d901      	bls.n	8001238 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e007      	b.n	8001248 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_PWREx_EnableOverDrive+0x98>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001244:	d1ee      	bne.n	8001224 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	420e0040 	.word	0x420e0040
 8001258:	40007000 	.word	0x40007000
 800125c:	420e0044 	.word	0x420e0044

08001260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0cc      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b68      	ldr	r3, [pc, #416]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d90c      	bls.n	800129c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b65      	ldr	r3, [pc, #404]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0b8      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a52      	ldr	r2, [pc, #328]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	494d      	ldr	r1, [pc, #308]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d044      	beq.n	8001380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d119      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e07f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d003      	beq.n	800131e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131a:	2b03      	cmp	r3, #3
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b3f      	ldr	r3, [pc, #252]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e067      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f023 0203 	bic.w	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4934      	ldr	r1, [pc, #208]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fc5c 	bl	8000c0c <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	e00a      	b.n	800136e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001358:	f7ff fc58 	bl	8000c0c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	; 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e04f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 020c 	and.w	r2, r3, #12
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1eb      	bne.n	8001358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d20c      	bcs.n	80013a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e032      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4916      	ldr	r1, [pc, #88]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e6:	f000 f855 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 80013ea:	4601      	mov	r1, r0
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	fa21 f303 	lsr.w	r3, r1, r3
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fbbc 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00
 800141c:	40023800 	.word	0x40023800
 8001420:	0800248c 	.word	0x0800248c
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_RCC_GetHCLKFreq+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000

08001444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001448:	f7ff fff0 	bl	800142c <HAL_RCC_GetHCLKFreq>
 800144c:	4601      	mov	r1, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	0a9b      	lsrs	r3, r3, #10
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	0800249c 	.word	0x0800249c

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001470:	f7ff ffdc 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0b5b      	lsrs	r3, r3, #13
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	0800249c 	.word	0x0800249c

08001494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ae:	4bc6      	ldr	r3, [pc, #792]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	f200 817e 	bhi.w	80017b8 <HAL_RCC_GetSysClockFreq+0x324>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080017b9 	.word	0x080017b9
 80014cc:	080017b9 	.word	0x080017b9
 80014d0:	080017b9 	.word	0x080017b9
 80014d4:	080014ff 	.word	0x080014ff
 80014d8:	080017b9 	.word	0x080017b9
 80014dc:	080017b9 	.word	0x080017b9
 80014e0:	080017b9 	.word	0x080017b9
 80014e4:	08001505 	.word	0x08001505
 80014e8:	080017b9 	.word	0x080017b9
 80014ec:	080017b9 	.word	0x080017b9
 80014f0:	080017b9 	.word	0x080017b9
 80014f4:	08001661 	.word	0x08001661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4bb4      	ldr	r3, [pc, #720]	; (80017cc <HAL_RCC_GetSysClockFreq+0x338>)
 80014fa:	613b      	str	r3, [r7, #16]
       break;
 80014fc:	e15f      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014fe:	4bb4      	ldr	r3, [pc, #720]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001500:	613b      	str	r3, [r7, #16]
      break;
 8001502:	e15c      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001504:	4bb0      	ldr	r3, [pc, #704]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800150c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150e:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d04a      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151a:	4bab      	ldr	r3, [pc, #684]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	099b      	lsrs	r3, r3, #6
 8001520:	f04f 0400 	mov.w	r4, #0
 8001524:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	ea03 0501 	and.w	r5, r3, r1
 8001530:	ea04 0602 	and.w	r6, r4, r2
 8001534:	4629      	mov	r1, r5
 8001536:	4632      	mov	r2, r6
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	f04f 0400 	mov.w	r4, #0
 8001540:	0154      	lsls	r4, r2, #5
 8001542:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001546:	014b      	lsls	r3, r1, #5
 8001548:	4619      	mov	r1, r3
 800154a:	4622      	mov	r2, r4
 800154c:	1b49      	subs	r1, r1, r5
 800154e:	eb62 0206 	sbc.w	r2, r2, r6
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f04f 0400 	mov.w	r4, #0
 800155a:	0194      	lsls	r4, r2, #6
 800155c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001560:	018b      	lsls	r3, r1, #6
 8001562:	1a5b      	subs	r3, r3, r1
 8001564:	eb64 0402 	sbc.w	r4, r4, r2
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	00e2      	lsls	r2, r4, #3
 8001572:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001576:	00d9      	lsls	r1, r3, #3
 8001578:	460b      	mov	r3, r1
 800157a:	4614      	mov	r4, r2
 800157c:	195b      	adds	r3, r3, r5
 800157e:	eb44 0406 	adc.w	r4, r4, r6
 8001582:	f04f 0100 	mov.w	r1, #0
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	0262      	lsls	r2, r4, #9
 800158c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001590:	0259      	lsls	r1, r3, #9
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	4618      	mov	r0, r3
 8001598:	4621      	mov	r1, r4
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f04f 0400 	mov.w	r4, #0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	f7fe fe2e 	bl	8000204 <__aeabi_uldivmod>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e049      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b0:	4b85      	ldr	r3, [pc, #532]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	ea03 0501 	and.w	r5, r3, r1
 80015c6:	ea04 0602 	and.w	r6, r4, r2
 80015ca:	4629      	mov	r1, r5
 80015cc:	4632      	mov	r2, r6
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f04f 0400 	mov.w	r4, #0
 80015d6:	0154      	lsls	r4, r2, #5
 80015d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015dc:	014b      	lsls	r3, r1, #5
 80015de:	4619      	mov	r1, r3
 80015e0:	4622      	mov	r2, r4
 80015e2:	1b49      	subs	r1, r1, r5
 80015e4:	eb62 0206 	sbc.w	r2, r2, r6
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	f04f 0400 	mov.w	r4, #0
 80015f0:	0194      	lsls	r4, r2, #6
 80015f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f6:	018b      	lsls	r3, r1, #6
 80015f8:	1a5b      	subs	r3, r3, r1
 80015fa:	eb64 0402 	sbc.w	r4, r4, r2
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	00e2      	lsls	r2, r4, #3
 8001608:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800160c:	00d9      	lsls	r1, r3, #3
 800160e:	460b      	mov	r3, r1
 8001610:	4614      	mov	r4, r2
 8001612:	195b      	adds	r3, r3, r5
 8001614:	eb44 0406 	adc.w	r4, r4, r6
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	02a2      	lsls	r2, r4, #10
 8001622:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001626:	0299      	lsls	r1, r3, #10
 8001628:	460b      	mov	r3, r1
 800162a:	4614      	mov	r4, r2
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	461a      	mov	r2, r3
 8001638:	4623      	mov	r3, r4
 800163a:	f7fe fde3 	bl	8000204 <__aeabi_uldivmod>
 800163e:	4603      	mov	r3, r0
 8001640:	460c      	mov	r4, r1
 8001642:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001644:	4b60      	ldr	r3, [pc, #384]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e0ae      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d04a      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	ea03 0501 	and.w	r5, r3, r1
 800168c:	ea04 0602 	and.w	r6, r4, r2
 8001690:	4629      	mov	r1, r5
 8001692:	4632      	mov	r2, r6
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	f04f 0400 	mov.w	r4, #0
 800169c:	0154      	lsls	r4, r2, #5
 800169e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016a2:	014b      	lsls	r3, r1, #5
 80016a4:	4619      	mov	r1, r3
 80016a6:	4622      	mov	r2, r4
 80016a8:	1b49      	subs	r1, r1, r5
 80016aa:	eb62 0206 	sbc.w	r2, r2, r6
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	f04f 0400 	mov.w	r4, #0
 80016b6:	0194      	lsls	r4, r2, #6
 80016b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016bc:	018b      	lsls	r3, r1, #6
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	eb64 0402 	sbc.w	r4, r4, r2
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	00e2      	lsls	r2, r4, #3
 80016ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016d2:	00d9      	lsls	r1, r3, #3
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	195b      	adds	r3, r3, r5
 80016da:	eb44 0406 	adc.w	r4, r4, r6
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	0262      	lsls	r2, r4, #9
 80016e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016ec:	0259      	lsls	r1, r3, #9
 80016ee:	460b      	mov	r3, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	4621      	mov	r1, r4
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	461a      	mov	r2, r3
 80016fe:	4623      	mov	r3, r4
 8001700:	f7fe fd80 	bl	8000204 <__aeabi_uldivmod>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e049      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	099b      	lsrs	r3, r3, #6
 8001712:	f04f 0400 	mov.w	r4, #0
 8001716:	f240 11ff 	movw	r1, #511	; 0x1ff
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	ea03 0501 	and.w	r5, r3, r1
 8001722:	ea04 0602 	and.w	r6, r4, r2
 8001726:	4629      	mov	r1, r5
 8001728:	4632      	mov	r2, r6
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	f04f 0400 	mov.w	r4, #0
 8001732:	0154      	lsls	r4, r2, #5
 8001734:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001738:	014b      	lsls	r3, r1, #5
 800173a:	4619      	mov	r1, r3
 800173c:	4622      	mov	r2, r4
 800173e:	1b49      	subs	r1, r1, r5
 8001740:	eb62 0206 	sbc.w	r2, r2, r6
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	f04f 0400 	mov.w	r4, #0
 800174c:	0194      	lsls	r4, r2, #6
 800174e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001752:	018b      	lsls	r3, r1, #6
 8001754:	1a5b      	subs	r3, r3, r1
 8001756:	eb64 0402 	sbc.w	r4, r4, r2
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	00e2      	lsls	r2, r4, #3
 8001764:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001768:	00d9      	lsls	r1, r3, #3
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	195b      	adds	r3, r3, r5
 8001770:	eb44 0406 	adc.w	r4, r4, r6
 8001774:	f04f 0100 	mov.w	r1, #0
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	02a2      	lsls	r2, r4, #10
 800177e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001782:	0299      	lsls	r1, r3, #10
 8001784:	460b      	mov	r3, r1
 8001786:	4614      	mov	r4, r2
 8001788:	4618      	mov	r0, r3
 800178a:	4621      	mov	r1, r4
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f04f 0400 	mov.w	r4, #0
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	f7fe fd35 	bl	8000204 <__aeabi_uldivmod>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0f1b      	lsrs	r3, r3, #28
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	613b      	str	r3, [r7, #16]
      break;
 80017b6:	e002      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_RCC_GetSysClockFreq+0x338>)
 80017ba:	613b      	str	r3, [r7, #16]
      break;
 80017bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017be:	693b      	ldr	r3, [r7, #16]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	007a1200 	.word	0x007a1200

080017d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8083 	beq.w	80018f4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ee:	4b95      	ldr	r3, [pc, #596]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d019      	beq.n	800182e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001802:	2b08      	cmp	r3, #8
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001806:	4b8f      	ldr	r3, [pc, #572]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001812:	d00c      	beq.n	800182e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001814:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d112      	bne.n	8001846 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001820:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800182c:	d10b      	bne.n	8001846 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d05b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x11e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d157      	bne.n	80018f2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e216      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x8a>
 8001850:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e01d      	b.n	800189a <HAL_RCC_OscConfig+0xc6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0xae>
 8001868:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800186e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0xc6>
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6f      	ldr	r2, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6c      	ldr	r2, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d013      	beq.n	80018ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f9b3 	bl	8000c0c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff f9af 	bl	8000c0c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1db      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0xd6>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff f99f 	bl	8000c0c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff f99b 	bl	8000c0c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1c7      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0xfe>
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06f      	beq.n	80019e0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	d017      	beq.n	800193c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001914:	2b08      	cmp	r3, #8
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d11c      	bne.n	800196a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001930:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d116      	bne.n	800196a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x180>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e18f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4938      	ldr	r1, [pc, #224]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001968:	e03a      	b.n	80019e0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d020      	beq.n	80019b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f948 	bl	8000c0c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff f944 	bl	8000c0c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e170      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4925      	ldr	r1, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff f927 	bl	8000c0c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff f923 	bl	8000c0c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e14f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d037      	beq.n	8001a5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x278>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f907 	bl	8000c0c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f903 	bl	8000c0c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e12f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x270>)
 8001a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x22e>
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_OscConfig+0x278>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f8f0 	bl	8000c0c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff f8ec 	bl	8000c0c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d908      	bls.n	8001a50 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e118      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470000 	.word	0x42470000
 8001a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e9      	bne.n	8001a30 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8097 	beq.w	8001b98 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b83      	ldr	r3, [pc, #524]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a7e      	ldr	r2, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a75      	ldr	r2, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f8ab 	bl	8000c0c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f8a7 	bl	8000c0c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0d3      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x31a>
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	e01c      	b.n	8001b28 <HAL_RCC_OscConfig+0x354>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x33c>
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a60      	ldr	r2, [pc, #384]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0x354>
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f86c 	bl	8000c0c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f868 	bl	8000c0c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e092      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0ee      	beq.n	8001b38 <HAL_RCC_OscConfig+0x364>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f856 	bl	8000c0c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f852 	bl	8000c0c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e07c      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ee      	bne.n	8001b64 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d068      	beq.n	8001c72 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d060      	beq.n	8001c6e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d145      	bne.n	8001c40 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff f827 	bl	8000c0c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff f823 	bl	8000c0c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e04f      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69da      	ldr	r2, [r3, #28]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	019b      	lsls	r3, r3, #6
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	071b      	lsls	r3, r3, #28
 8001c0c:	491b      	ldr	r1, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe fff8 	bl	8000c0c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe fff4 	bl	8000c0c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44c>
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x4b0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7fe ffe1 	bl	8000c0c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe ffdd 	bl	8000c0c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e009      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x4a8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x47a>
 8001c6c:	e001      	b.n	8001c72 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470060 	.word	0x42470060

08001c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e03f      	b.n	8001d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fe5c 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f829 	bl	8001d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d66:	f023 030c 	bic.w	r3, r3, #12
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	68f9      	ldr	r1, [r7, #12]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d92:	f040 818b 	bne.w	80020ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4ac1      	ldr	r2, [pc, #772]	; (80020a0 <UART_SetConfig+0x37c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d005      	beq.n	8001dac <UART_SetConfig+0x88>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4abf      	ldr	r2, [pc, #764]	; (80020a4 <UART_SetConfig+0x380>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 80bd 	bne.w	8001f26 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dac:	f7ff fb5e 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001db0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	461d      	mov	r5, r3
 8001db6:	f04f 0600 	mov.w	r6, #0
 8001dba:	46a8      	mov	r8, r5
 8001dbc:	46b1      	mov	r9, r6
 8001dbe:	eb18 0308 	adds.w	r3, r8, r8
 8001dc2:	eb49 0409 	adc.w	r4, r9, r9
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	46a1      	mov	r9, r4
 8001dca:	eb18 0805 	adds.w	r8, r8, r5
 8001dce:	eb49 0906 	adc.w	r9, r9, r6
 8001dd2:	f04f 0100 	mov.w	r1, #0
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001dde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001de2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001de6:	4688      	mov	r8, r1
 8001de8:	4691      	mov	r9, r2
 8001dea:	eb18 0005 	adds.w	r0, r8, r5
 8001dee:	eb49 0106 	adc.w	r1, r9, r6
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	461d      	mov	r5, r3
 8001df8:	f04f 0600 	mov.w	r6, #0
 8001dfc:	196b      	adds	r3, r5, r5
 8001dfe:	eb46 0406 	adc.w	r4, r6, r6
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	f7fe f9fd 	bl	8000204 <__aeabi_uldivmod>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4ba5      	ldr	r3, [pc, #660]	; (80020a8 <UART_SetConfig+0x384>)
 8001e12:	fba3 2302 	umull	r2, r3, r3, r2
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	461d      	mov	r5, r3
 8001e20:	f04f 0600 	mov.w	r6, #0
 8001e24:	46a9      	mov	r9, r5
 8001e26:	46b2      	mov	sl, r6
 8001e28:	eb19 0309 	adds.w	r3, r9, r9
 8001e2c:	eb4a 040a 	adc.w	r4, sl, sl
 8001e30:	4699      	mov	r9, r3
 8001e32:	46a2      	mov	sl, r4
 8001e34:	eb19 0905 	adds.w	r9, r9, r5
 8001e38:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e50:	4689      	mov	r9, r1
 8001e52:	4692      	mov	sl, r2
 8001e54:	eb19 0005 	adds.w	r0, r9, r5
 8001e58:	eb4a 0106 	adc.w	r1, sl, r6
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	461d      	mov	r5, r3
 8001e62:	f04f 0600 	mov.w	r6, #0
 8001e66:	196b      	adds	r3, r5, r5
 8001e68:	eb46 0406 	adc.w	r4, r6, r6
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4623      	mov	r3, r4
 8001e70:	f7fe f9c8 	bl	8000204 <__aeabi_uldivmod>
 8001e74:	4603      	mov	r3, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <UART_SetConfig+0x384>)
 8001e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	2164      	movs	r1, #100	; 0x64
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3332      	adds	r3, #50	; 0x32
 8001e8e:	4a86      	ldr	r2, [pc, #536]	; (80020a8 <UART_SetConfig+0x384>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e9c:	4498      	add	r8, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	f04f 0600 	mov.w	r6, #0
 8001ea6:	46a9      	mov	r9, r5
 8001ea8:	46b2      	mov	sl, r6
 8001eaa:	eb19 0309 	adds.w	r3, r9, r9
 8001eae:	eb4a 040a 	adc.w	r4, sl, sl
 8001eb2:	4699      	mov	r9, r3
 8001eb4:	46a2      	mov	sl, r4
 8001eb6:	eb19 0905 	adds.w	r9, r9, r5
 8001eba:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	4692      	mov	sl, r2
 8001ed6:	eb19 0005 	adds.w	r0, r9, r5
 8001eda:	eb4a 0106 	adc.w	r1, sl, r6
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	f04f 0600 	mov.w	r6, #0
 8001ee8:	196b      	adds	r3, r5, r5
 8001eea:	eb46 0406 	adc.w	r4, r6, r6
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4623      	mov	r3, r4
 8001ef2:	f7fe f987 	bl	8000204 <__aeabi_uldivmod>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460c      	mov	r4, r1
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <UART_SetConfig+0x384>)
 8001efe:	fba3 1302 	umull	r1, r3, r3, r2
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2164      	movs	r1, #100	; 0x64
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	3332      	adds	r3, #50	; 0x32
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <UART_SetConfig+0x384>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	f003 0207 	and.w	r2, r3, #7
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4442      	add	r2, r8
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e26f      	b.n	8002406 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f26:	f7ff fa8d 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8001f2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	461d      	mov	r5, r3
 8001f30:	f04f 0600 	mov.w	r6, #0
 8001f34:	46a8      	mov	r8, r5
 8001f36:	46b1      	mov	r9, r6
 8001f38:	eb18 0308 	adds.w	r3, r8, r8
 8001f3c:	eb49 0409 	adc.w	r4, r9, r9
 8001f40:	4698      	mov	r8, r3
 8001f42:	46a1      	mov	r9, r4
 8001f44:	eb18 0805 	adds.w	r8, r8, r5
 8001f48:	eb49 0906 	adc.w	r9, r9, r6
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f60:	4688      	mov	r8, r1
 8001f62:	4691      	mov	r9, r2
 8001f64:	eb18 0005 	adds.w	r0, r8, r5
 8001f68:	eb49 0106 	adc.w	r1, r9, r6
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	461d      	mov	r5, r3
 8001f72:	f04f 0600 	mov.w	r6, #0
 8001f76:	196b      	adds	r3, r5, r5
 8001f78:	eb46 0406 	adc.w	r4, r6, r6
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4623      	mov	r3, r4
 8001f80:	f7fe f940 	bl	8000204 <__aeabi_uldivmod>
 8001f84:	4603      	mov	r3, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <UART_SetConfig+0x384>)
 8001f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	461d      	mov	r5, r3
 8001f9a:	f04f 0600 	mov.w	r6, #0
 8001f9e:	46a9      	mov	r9, r5
 8001fa0:	46b2      	mov	sl, r6
 8001fa2:	eb19 0309 	adds.w	r3, r9, r9
 8001fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8001faa:	4699      	mov	r9, r3
 8001fac:	46a2      	mov	sl, r4
 8001fae:	eb19 0905 	adds.w	r9, r9, r5
 8001fb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fca:	4689      	mov	r9, r1
 8001fcc:	4692      	mov	sl, r2
 8001fce:	eb19 0005 	adds.w	r0, r9, r5
 8001fd2:	eb4a 0106 	adc.w	r1, sl, r6
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	461d      	mov	r5, r3
 8001fdc:	f04f 0600 	mov.w	r6, #0
 8001fe0:	196b      	adds	r3, r5, r5
 8001fe2:	eb46 0406 	adc.w	r4, r6, r6
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	f7fe f90b 	bl	8000204 <__aeabi_uldivmod>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <UART_SetConfig+0x384>)
 8001ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2164      	movs	r1, #100	; 0x64
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <UART_SetConfig+0x384>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002016:	4498      	add	r8, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	461d      	mov	r5, r3
 800201c:	f04f 0600 	mov.w	r6, #0
 8002020:	46a9      	mov	r9, r5
 8002022:	46b2      	mov	sl, r6
 8002024:	eb19 0309 	adds.w	r3, r9, r9
 8002028:	eb4a 040a 	adc.w	r4, sl, sl
 800202c:	4699      	mov	r9, r3
 800202e:	46a2      	mov	sl, r4
 8002030:	eb19 0905 	adds.w	r9, r9, r5
 8002034:	eb4a 0a06 	adc.w	sl, sl, r6
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800204c:	4689      	mov	r9, r1
 800204e:	4692      	mov	sl, r2
 8002050:	eb19 0005 	adds.w	r0, r9, r5
 8002054:	eb4a 0106 	adc.w	r1, sl, r6
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	461d      	mov	r5, r3
 800205e:	f04f 0600 	mov.w	r6, #0
 8002062:	196b      	adds	r3, r5, r5
 8002064:	eb46 0406 	adc.w	r4, r6, r6
 8002068:	461a      	mov	r2, r3
 800206a:	4623      	mov	r3, r4
 800206c:	f7fe f8ca 	bl	8000204 <__aeabi_uldivmod>
 8002070:	4603      	mov	r3, r0
 8002072:	460c      	mov	r4, r1
 8002074:	461a      	mov	r2, r3
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <UART_SetConfig+0x384>)
 8002078:	fba3 1302 	umull	r1, r3, r3, r2
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	2164      	movs	r1, #100	; 0x64
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	3332      	adds	r3, #50	; 0x32
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <UART_SetConfig+0x384>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	f003 0207 	and.w	r2, r3, #7
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4442      	add	r2, r8
 800209c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800209e:	e1b2      	b.n	8002406 <UART_SetConfig+0x6e2>
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40011400 	.word	0x40011400
 80020a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4ad7      	ldr	r2, [pc, #860]	; (8002410 <UART_SetConfig+0x6ec>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d005      	beq.n	80020c2 <UART_SetConfig+0x39e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4ad6      	ldr	r2, [pc, #856]	; (8002414 <UART_SetConfig+0x6f0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f040 80d1 	bne.w	8002264 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c2:	f7ff f9d3 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 80020c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	469a      	mov	sl, r3
 80020cc:	f04f 0b00 	mov.w	fp, #0
 80020d0:	46d0      	mov	r8, sl
 80020d2:	46d9      	mov	r9, fp
 80020d4:	eb18 0308 	adds.w	r3, r8, r8
 80020d8:	eb49 0409 	adc.w	r4, r9, r9
 80020dc:	4698      	mov	r8, r3
 80020de:	46a1      	mov	r9, r4
 80020e0:	eb18 080a 	adds.w	r8, r8, sl
 80020e4:	eb49 090b 	adc.w	r9, r9, fp
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020fc:	4688      	mov	r8, r1
 80020fe:	4691      	mov	r9, r2
 8002100:	eb1a 0508 	adds.w	r5, sl, r8
 8002104:	eb4b 0609 	adc.w	r6, fp, r9
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	f04f 0400 	mov.w	r4, #0
 800211a:	0094      	lsls	r4, r2, #2
 800211c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002120:	008b      	lsls	r3, r1, #2
 8002122:	461a      	mov	r2, r3
 8002124:	4623      	mov	r3, r4
 8002126:	4628      	mov	r0, r5
 8002128:	4631      	mov	r1, r6
 800212a:	f7fe f86b 	bl	8000204 <__aeabi_uldivmod>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
 8002132:	461a      	mov	r2, r3
 8002134:	4bb8      	ldr	r3, [pc, #736]	; (8002418 <UART_SetConfig+0x6f4>)
 8002136:	fba3 2302 	umull	r2, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	469b      	mov	fp, r3
 8002144:	f04f 0c00 	mov.w	ip, #0
 8002148:	46d9      	mov	r9, fp
 800214a:	46e2      	mov	sl, ip
 800214c:	eb19 0309 	adds.w	r3, r9, r9
 8002150:	eb4a 040a 	adc.w	r4, sl, sl
 8002154:	4699      	mov	r9, r3
 8002156:	46a2      	mov	sl, r4
 8002158:	eb19 090b 	adds.w	r9, r9, fp
 800215c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002170:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002174:	4689      	mov	r9, r1
 8002176:	4692      	mov	sl, r2
 8002178:	eb1b 0509 	adds.w	r5, fp, r9
 800217c:	eb4c 060a 	adc.w	r6, ip, sl
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	0094      	lsls	r4, r2, #2
 8002194:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002198:	008b      	lsls	r3, r1, #2
 800219a:	461a      	mov	r2, r3
 800219c:	4623      	mov	r3, r4
 800219e:	4628      	mov	r0, r5
 80021a0:	4631      	mov	r1, r6
 80021a2:	f7fe f82f 	bl	8000204 <__aeabi_uldivmod>
 80021a6:	4603      	mov	r3, r0
 80021a8:	460c      	mov	r4, r1
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b9a      	ldr	r3, [pc, #616]	; (8002418 <UART_SetConfig+0x6f4>)
 80021ae:	fba3 1302 	umull	r1, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	3332      	adds	r3, #50	; 0x32
 80021c0:	4a95      	ldr	r2, [pc, #596]	; (8002418 <UART_SetConfig+0x6f4>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	4498      	add	r8, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	469b      	mov	fp, r3
 80021d2:	f04f 0c00 	mov.w	ip, #0
 80021d6:	46d9      	mov	r9, fp
 80021d8:	46e2      	mov	sl, ip
 80021da:	eb19 0309 	adds.w	r3, r9, r9
 80021de:	eb4a 040a 	adc.w	r4, sl, sl
 80021e2:	4699      	mov	r9, r3
 80021e4:	46a2      	mov	sl, r4
 80021e6:	eb19 090b 	adds.w	r9, r9, fp
 80021ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002202:	4689      	mov	r9, r1
 8002204:	4692      	mov	sl, r2
 8002206:	eb1b 0509 	adds.w	r5, fp, r9
 800220a:	eb4c 060a 	adc.w	r6, ip, sl
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	0094      	lsls	r4, r2, #2
 8002222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002226:	008b      	lsls	r3, r1, #2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	4628      	mov	r0, r5
 800222e:	4631      	mov	r1, r6
 8002230:	f7fd ffe8 	bl	8000204 <__aeabi_uldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	461a      	mov	r2, r3
 800223a:	4b77      	ldr	r3, [pc, #476]	; (8002418 <UART_SetConfig+0x6f4>)
 800223c:	fba3 1302 	umull	r1, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a72      	ldr	r2, [pc, #456]	; (8002418 <UART_SetConfig+0x6f4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4442      	add	r2, r8
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	e0d0      	b.n	8002406 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002264:	f7ff f8ee 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8002268:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	469a      	mov	sl, r3
 800226e:	f04f 0b00 	mov.w	fp, #0
 8002272:	46d0      	mov	r8, sl
 8002274:	46d9      	mov	r9, fp
 8002276:	eb18 0308 	adds.w	r3, r8, r8
 800227a:	eb49 0409 	adc.w	r4, r9, r9
 800227e:	4698      	mov	r8, r3
 8002280:	46a1      	mov	r9, r4
 8002282:	eb18 080a 	adds.w	r8, r8, sl
 8002286:	eb49 090b 	adc.w	r9, r9, fp
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002296:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800229a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800229e:	4688      	mov	r8, r1
 80022a0:	4691      	mov	r9, r2
 80022a2:	eb1a 0508 	adds.w	r5, sl, r8
 80022a6:	eb4b 0609 	adc.w	r6, fp, r9
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f04f 0400 	mov.w	r4, #0
 80022bc:	0094      	lsls	r4, r2, #2
 80022be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022c2:	008b      	lsls	r3, r1, #2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4623      	mov	r3, r4
 80022c8:	4628      	mov	r0, r5
 80022ca:	4631      	mov	r1, r6
 80022cc:	f7fd ff9a 	bl	8000204 <__aeabi_uldivmod>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <UART_SetConfig+0x6f4>)
 80022d8:	fba3 2302 	umull	r2, r3, r3, r2
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	469b      	mov	fp, r3
 80022e6:	f04f 0c00 	mov.w	ip, #0
 80022ea:	46d9      	mov	r9, fp
 80022ec:	46e2      	mov	sl, ip
 80022ee:	eb19 0309 	adds.w	r3, r9, r9
 80022f2:	eb4a 040a 	adc.w	r4, sl, sl
 80022f6:	4699      	mov	r9, r3
 80022f8:	46a2      	mov	sl, r4
 80022fa:	eb19 090b 	adds.w	r9, r9, fp
 80022fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800230e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002312:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002316:	4689      	mov	r9, r1
 8002318:	4692      	mov	sl, r2
 800231a:	eb1b 0509 	adds.w	r5, fp, r9
 800231e:	eb4c 060a 	adc.w	r6, ip, sl
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	0094      	lsls	r4, r2, #2
 8002336:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800233a:	008b      	lsls	r3, r1, #2
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	4628      	mov	r0, r5
 8002342:	4631      	mov	r1, r6
 8002344:	f7fd ff5e 	bl	8000204 <__aeabi_uldivmod>
 8002348:	4603      	mov	r3, r0
 800234a:	460c      	mov	r4, r1
 800234c:	461a      	mov	r2, r3
 800234e:	4b32      	ldr	r3, [pc, #200]	; (8002418 <UART_SetConfig+0x6f4>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	2164      	movs	r1, #100	; 0x64
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	3332      	adds	r3, #50	; 0x32
 8002362:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <UART_SetConfig+0x6f4>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236e:	4498      	add	r8, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	469b      	mov	fp, r3
 8002374:	f04f 0c00 	mov.w	ip, #0
 8002378:	46d9      	mov	r9, fp
 800237a:	46e2      	mov	sl, ip
 800237c:	eb19 0309 	adds.w	r3, r9, r9
 8002380:	eb4a 040a 	adc.w	r4, sl, sl
 8002384:	4699      	mov	r9, r3
 8002386:	46a2      	mov	sl, r4
 8002388:	eb19 090b 	adds.w	r9, r9, fp
 800238c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002390:	f04f 0100 	mov.w	r1, #0
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800239c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023a4:	4689      	mov	r9, r1
 80023a6:	4692      	mov	sl, r2
 80023a8:	eb1b 0509 	adds.w	r5, fp, r9
 80023ac:	eb4c 060a 	adc.w	r6, ip, sl
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	f04f 0400 	mov.w	r4, #0
 80023c2:	0094      	lsls	r4, r2, #2
 80023c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c8:	008b      	lsls	r3, r1, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	4623      	mov	r3, r4
 80023ce:	4628      	mov	r0, r5
 80023d0:	4631      	mov	r1, r6
 80023d2:	f7fd ff17 	bl	8000204 <__aeabi_uldivmod>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	461a      	mov	r2, r3
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <UART_SetConfig+0x6f4>)
 80023de:	fba3 1302 	umull	r1, r3, r3, r2
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2164      	movs	r1, #100	; 0x64
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	3332      	adds	r3, #50	; 0x32
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <UART_SetConfig+0x6f4>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4442      	add	r2, r8
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	e7ff      	b.n	8002406 <UART_SetConfig+0x6e2>
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <__libc_init_array>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4e0d      	ldr	r6, [pc, #52]	; (8002454 <__libc_init_array+0x38>)
 8002420:	4c0d      	ldr	r4, [pc, #52]	; (8002458 <__libc_init_array+0x3c>)
 8002422:	1ba4      	subs	r4, r4, r6
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	2500      	movs	r5, #0
 8002428:	42a5      	cmp	r5, r4
 800242a:	d109      	bne.n	8002440 <__libc_init_array+0x24>
 800242c:	4e0b      	ldr	r6, [pc, #44]	; (800245c <__libc_init_array+0x40>)
 800242e:	4c0c      	ldr	r4, [pc, #48]	; (8002460 <__libc_init_array+0x44>)
 8002430:	f000 f820 	bl	8002474 <_init>
 8002434:	1ba4      	subs	r4, r4, r6
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	2500      	movs	r5, #0
 800243a:	42a5      	cmp	r5, r4
 800243c:	d105      	bne.n	800244a <__libc_init_array+0x2e>
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002444:	4798      	blx	r3
 8002446:	3501      	adds	r5, #1
 8002448:	e7ee      	b.n	8002428 <__libc_init_array+0xc>
 800244a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800244e:	4798      	blx	r3
 8002450:	3501      	adds	r5, #1
 8002452:	e7f2      	b.n	800243a <__libc_init_array+0x1e>
 8002454:	080024ac 	.word	0x080024ac
 8002458:	080024ac 	.word	0x080024ac
 800245c:	080024ac 	.word	0x080024ac
 8002460:	080024b0 	.word	0x080024b0

08002464 <memset>:
 8002464:	4402      	add	r2, r0
 8002466:	4603      	mov	r3, r0
 8002468:	4293      	cmp	r3, r2
 800246a:	d100      	bne.n	800246e <memset+0xa>
 800246c:	4770      	bx	lr
 800246e:	f803 1b01 	strb.w	r1, [r3], #1
 8002472:	e7f9      	b.n	8002468 <memset+0x4>

08002474 <_init>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr

08002480 <_fini>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	bf00      	nop
 8002484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002486:	bc08      	pop	{r3}
 8002488:	469e      	mov	lr, r3
 800248a:	4770      	bx	lr
