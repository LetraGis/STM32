
rtc-bare-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08006030  08006030  00016030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c0  080062c0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c8  080062c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080062d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  080064ac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080064ac  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d2c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018ae  00000000  00000000  00029f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021bb7  00000000  00000000  0002c810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b9a  00000000  00000000  0004e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd77e  00000000  00000000  00055f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001236df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf8  00000000  00000000  0012375c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006018 	.word	0x08006018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006018 	.word	0x08006018

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE BEGIN 0 */
/*
 * Alarm event handler. Interrupt happens when actual time is equals to alarm
 */
void HAL_RTC_AlarmAEventCallback (RTC_HandleTypeDef * hrtc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	alarmFlag = 1;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
	return;
 8000ef6:	bf00      	nop
}
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f8 	.word	0x200001f8

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fb1d 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f851 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 f991 	bl	800123c <MX_GPIO_Init>
  MX_RTC_Init();
 8000f1a:	f000 f8d9 	bl	80010d0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 f963 	bl	80011e8 <MX_USART2_UART_Init>
  RTC_DateTypeDef gDate;
  uint8_t time[11];			//Array to store time as string. Format: hh:mm:ss
  while (1)
  {
	  //Function call to get time. Returns hours, minutes and seconds on gTime struct variable.
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <main+0x9c>)
 8000f2c:	f001 ffec 	bl	8002f08 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <main+0x9c>)
 8000f3a:	f002 f8ea 	bl	8003112 <HAL_RTC_GetDate>

	  //Function call to store as string second argument into first argument. Returns number of bytes of string copied.
	  uint8_t sizeBuffer = sprintf((char *)time, "%02u:%02u:%02u\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000f3e:	7e3b      	ldrb	r3, [r7, #24]
 8000f40:	461a      	mov	r2, r3
 8000f42:	7e7b      	ldrb	r3, [r7, #25]
 8000f44:	4619      	mov	r1, r3
 8000f46:	7ebb      	ldrb	r3, [r7, #26]
 8000f48:	f107 0008 	add.w	r0, r7, #8
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4915      	ldr	r1, [pc, #84]	; (8000fa8 <main+0xa0>)
 8000f52:	f003 fc7f 	bl	8004854 <siprintf>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  //Function call to transmit time array through serial port
  	  HAL_UART_Transmit(&huart2, time, sizeBuffer, 500);
 8000f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f107 0108 	add.w	r1, r7, #8
 8000f66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f6a:	4810      	ldr	r0, [pc, #64]	; (8000fac <main+0xa4>)
 8000f6c:	f002 fb85 	bl	800367a <HAL_UART_Transmit>

  	  if(alarmFlag)
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <main+0xa8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00e      	beq.n	8000f98 <main+0x90>
  	  {
  		  alarmFlag = 0;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <main+0xa8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
  		  uint8_t alarmArray[] = "Alarm!\n";
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <main+0xac>)
 8000f82:	463b      	mov	r3, r7
 8000f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f88:	e883 0003 	stmia.w	r3, {r0, r1}
  		  HAL_UART_Transmit(&huart2, alarmArray, sizeof(alarmArray), 200);
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	23c8      	movs	r3, #200	; 0xc8
 8000f90:	2208      	movs	r2, #8
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <main+0xa4>)
 8000f94:	f002 fb71 	bl	800367a <HAL_UART_Transmit>
  	  }

  	  //Wait for 1 second (1000 ms)
  	  HAL_Delay(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f000 fb48 	bl	8001630 <HAL_Delay>
  {
 8000fa0:	e7bf      	b.n	8000f22 <main+0x1a>
 8000fa2:	bf00      	nop
 8000fa4:	20000208 	.word	0x20000208
 8000fa8:	08006030 	.word	0x08006030
 8000fac:	20000228 	.word	0x20000228
 8000fb0:	200001f8 	.word	0x200001f8
 8000fb4:	08006040 	.word	0x08006040

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0ac      	sub	sp, #176	; 0xb0
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 ffe0 	bl	8003f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	225c      	movs	r2, #92	; 0x5c
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ffd1 	bl	8003f8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <SystemClock_Config+0x110>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <SystemClock_Config+0x110>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <SystemClock_Config+0x110>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <SystemClock_Config+0x114>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <SystemClock_Config+0x114>)
 8001010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <SystemClock_Config+0x114>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001022:	2305      	movs	r3, #5
 8001024:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800102e:	2301      	movs	r3, #1
 8001030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fba7 	bl	80027b8 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001070:	f000 f934 	bl	80012dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fdac 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800109e:	f000 f91d 	bl	80012dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010a2:	2320      	movs	r3, #32
 80010a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 feb7 	bl	8001e24 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80010bc:	f000 f90e 	bl	80012dc <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	37b0      	adds	r7, #176	; 0xb0
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b090      	sub	sp, #64	; 0x40
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2228      	movs	r2, #40	; 0x28
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 ff4b 	bl	8003f8c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_RTC_Init+0x110>)
 80010f8:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <MX_RTC_Init+0x114>)
 80010fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_RTC_Init+0x110>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <MX_RTC_Init+0x110>)
 8001104:	227f      	movs	r2, #127	; 0x7f
 8001106:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_RTC_Init+0x110>)
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <MX_RTC_Init+0x110>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <MX_RTC_Init+0x110>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <MX_RTC_Init+0x110>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001120:	482f      	ldr	r0, [pc, #188]	; (80011e0 <MX_RTC_Init+0x110>)
 8001122:	f001 fda3 	bl	8002c6c <HAL_RTC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800112c:	f000 f8d6 	bl	80012dc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x12;
 8001130:	2312      	movs	r3, #18
 8001132:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x30;
 8001136:	2330      	movs	r3, #48	; 0x30
 8001138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x15;
 800113c:	2315      	movs	r3, #21
 800113e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	4823      	ldr	r0, [pc, #140]	; (80011e0 <MX_RTC_Init+0x110>)
 8001154:	f001 fe1b 	bl	8002d8e <HAL_RTC_SetTime>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800115e:	f000 f8bd 	bl	80012dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001162:	2301      	movs	r3, #1
 8001164:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800116e:	2301      	movs	r3, #1
 8001170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	4817      	ldr	r0, [pc, #92]	; (80011e0 <MX_RTC_Init+0x110>)
 8001184:	f001 ff1e 	bl	8002fc4 <HAL_RTC_SetDate>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800118e:	f000 f8a5 	bl	80012dc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x12;
 8001192:	2312      	movs	r3, #18
 8001194:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x30;
 8001196:	2330      	movs	r3, #48	; 0x30
 8001198:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x20;
 800119a:	2320      	movs	r3, #32
 800119c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80011bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_RTC_Init+0x110>)
 80011ca:	f001 fff1 	bl	80031b0 <HAL_RTC_SetAlarm_IT>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80011d4:	f000 f882 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3740      	adds	r7, #64	; 0x40
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000208 	.word	0x20000208
 80011e4:	40002800 	.word	0x40002800

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 f9de 	bl	80035e0 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f857 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000228 	.word	0x20000228
 8001238:	40004400 	.word	0x40004400

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <MX_GPIO_Init+0x98>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <MX_GPIO_Init+0x98>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_GPIO_Init+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2120      	movs	r1, #32
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0x9c>)
 80012ac:	f000 fc86 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012b0:	2320      	movs	r3, #32
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_GPIO_Init+0x9c>)
 80012c8:	f000 fae6 	bl	8001898 <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_RTC_MspInit+0x30>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10a      	bne.n	8001364 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_RTC_MspInit+0x34>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2029      	movs	r0, #41	; 0x29
 800135a:	f000 fa66 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800135e:	2029      	movs	r0, #41	; 0x29
 8001360:	f000 fa7f 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40002800 	.word	0x40002800
 8001370:	42470e3c 	.word	0x42470e3c

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_UART_MspInit+0x84>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12b      	bne.n	80013ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_UART_MspInit+0x88>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_UART_MspInit+0x88>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_UART_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0x88>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_UART_MspInit+0x88>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_UART_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ce:	230c      	movs	r3, #12
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0x8c>)
 80013ea:	f000 fa55 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f8ca 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <RTC_Alarm_IRQHandler+0x10>)
 8001466:	f001 ffdb 	bl	8003420 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000208 	.word	0x20000208

08001474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x16>
		heap_end = &end;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <_sbrk+0x50>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_sbrk+0x54>)
 8001488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk+0x50>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_sbrk+0x50>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	466a      	mov	r2, sp
 800149a:	4293      	cmp	r3, r2
 800149c:	d907      	bls.n	80014ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800149e:	f002 fd4b 	bl	8003f38 <__errno>
 80014a2:	4602      	mov	r2, r0
 80014a4:	230c      	movs	r3, #12
 80014a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	e006      	b.n	80014bc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_sbrk+0x50>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <_sbrk+0x50>)
 80014b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000270 	.word	0x20000270

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <SystemInit+0x28>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <SystemInit+0x28>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SystemInit+0x28>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr  r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001522:	f7ff ffd3 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 fd0d 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fced 	bl	8000f08 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001534:	080062d0 	.word	0x080062d0
  ldr  r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800153c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001540:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001544:	20000270 	.word	0x20000270

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f94d 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff feb4 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f965 	bl	800187e <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f92d 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	20000268 	.word	0x20000268

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000268 	.word	0x20000268

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e165      	b.n	8001b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8154 	bne.w	8001b7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d00b      	beq.n	80018f2 <HAL_GPIO_Init+0x5a>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	2b11      	cmp	r3, #17
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0xfc>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80ae 	beq.w	8001b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_GPIO_Init+0x300>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x308>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x216>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x30c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x212>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x310>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x314>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x20a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x318>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x31c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x202>
 8001a96:	2306      	movs	r3, #6
 8001a98:	e00c      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e00a      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x21c>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4934      	ldr	r1, [pc, #208]	; (8001b98 <HAL_GPIO_Init+0x300>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af6:	4a30      	ldr	r2, [pc, #192]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_GPIO_Init+0x320>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f ae96 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0cc      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d90c      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	494d      	ldr	r1, [pc, #308]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d044      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d119      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e067      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4934      	ldr	r1, [pc, #208]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fc9a 	bl	8001618 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fc96 	bl	8001618 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e04f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d20c      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e032      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4916      	ldr	r1, [pc, #88]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d76:	f000 fb7f 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fbfa 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08006048 	.word	0x08006048
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08006058 	.word	0x08006058

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e00:	f7ff ffdc 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e04:	4601      	mov	r1, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0b5b      	lsrs	r3, r3, #13
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08006058 	.word	0x08006058

08001e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	496c      	ldr	r1, [pc, #432]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001e8a:	4b64      	ldr	r3, [pc, #400]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	4960      	ldr	r1, [pc, #384]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4955      	ldr	r1, [pc, #340]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed6:	d101      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef4:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	4946      	ldr	r1, [pc, #280]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f12:	d101      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 808a 	beq.w	8002046 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5a:	f7ff fb5d 	bl	8001618 <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fb59 	bl	8001618 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e278      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f88:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02f      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d028      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d114      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fb27 	bl	8001618 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fb23 	bl	8001618 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e240      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ffc:	d114      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	4902      	ldr	r1, [pc, #8]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
 8002018:	e00c      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000
 8002024:	42470e40 	.word	0x42470e40
 8002028:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800202e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002032:	6093      	str	r3, [r2, #8]
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	4944      	ldr	r1, [pc, #272]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002042:	4313      	orrs	r3, r2
 8002044:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800205a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	492e      	ldr	r1, [pc, #184]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	4926      	ldr	r1, [pc, #152]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ca:	d101      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80020cc:	2301      	movs	r3, #1
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	491a      	ldr	r1, [pc, #104]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d011      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210c:	4911      	ldr	r1, [pc, #68]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800211e:	2301      	movs	r3, #1
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d005      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002130:	f040 80ff 	bne.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800213a:	f7ff fa6d 	bl	8001618 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002140:	e00e      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002142:	f7ff fa69 	bl	8001618 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d907      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e188      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002154:	40023800 	.word	0x40023800
 8002158:	424711e0 	.word	0x424711e0
 800215c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002160:	4b7e      	ldr	r3, [pc, #504]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ea      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002188:	2b00      	cmp	r3, #0
 800218a:	d028      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d124      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002194:	4b71      	ldr	r3, [pc, #452]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	3301      	adds	r3, #1
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021a6:	4b6d      	ldr	r3, [pc, #436]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ac:	0e1b      	lsrs	r3, r3, #24
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	431a      	orrs	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	4961      	ldr	r1, [pc, #388]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d035      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d130      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800220c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800221e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002222:	0f1b      	lsrs	r3, r3, #28
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	019b      	lsls	r3, r3, #6
 8002234:	431a      	orrs	r2, r3
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	071b      	lsls	r3, r3, #28
 800224c:	4943      	ldr	r1, [pc, #268]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002254:	4b41      	ldr	r3, [pc, #260]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225a:	f023 021f 	bic.w	r2, r3, #31
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	493d      	ldr	r1, [pc, #244]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d029      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002280:	d124      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229a:	0f1b      	lsrs	r3, r3, #28
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	431a      	orrs	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	071b      	lsls	r3, r3, #28
 80022c4:	4925      	ldr	r1, [pc, #148]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d016      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800230c:	f7ff f984 	bl	8001618 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002314:	f7ff f980 	bl	8001618 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e09f      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 8095 	bne.w	8002464 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002340:	f7ff f96a 	bl	8001618 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002346:	e00f      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002348:	f7ff f966 	bl	8001618 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d908      	bls.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e085      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	42470068 	.word	0x42470068
 8002364:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d0e8      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	d02b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d127      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	431a      	orrs	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	4928      	ldr	r1, [pc, #160]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	3b01      	subs	r3, #1
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	4922      	ldr	r1, [pc, #136]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01d      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002402:	d118      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	0e1b      	lsrs	r3, r3, #24
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	3b01      	subs	r3, #1
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	4910      	ldr	r1, [pc, #64]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800243c:	f7ff f8ec 	bl	8001618 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002444:	f7ff f8e8 	bl	8001618 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e007      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800245e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002462:	d1ef      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	42470070 	.word	0x42470070

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002492:	4bc6      	ldr	r3, [pc, #792]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b0c      	cmp	r3, #12
 800249c:	f200 817e 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x324>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	0800279d 	.word	0x0800279d
 80024b0:	0800279d 	.word	0x0800279d
 80024b4:	0800279d 	.word	0x0800279d
 80024b8:	080024e3 	.word	0x080024e3
 80024bc:	0800279d 	.word	0x0800279d
 80024c0:	0800279d 	.word	0x0800279d
 80024c4:	0800279d 	.word	0x0800279d
 80024c8:	080024e9 	.word	0x080024e9
 80024cc:	0800279d 	.word	0x0800279d
 80024d0:	0800279d 	.word	0x0800279d
 80024d4:	0800279d 	.word	0x0800279d
 80024d8:	08002645 	.word	0x08002645
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4bb4      	ldr	r3, [pc, #720]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x338>)
 80024de:	613b      	str	r3, [r7, #16]
       break;
 80024e0:	e15f      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e2:	4bb4      	ldr	r3, [pc, #720]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80024e4:	613b      	str	r3, [r7, #16]
      break;
 80024e6:	e15c      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e8:	4bb0      	ldr	r3, [pc, #704]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f2:	4bae      	ldr	r3, [pc, #696]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d04a      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fe:	4bab      	ldr	r3, [pc, #684]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	f04f 0400 	mov.w	r4, #0
 8002508:	f240 11ff 	movw	r1, #511	; 0x1ff
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	ea03 0501 	and.w	r5, r3, r1
 8002514:	ea04 0602 	and.w	r6, r4, r2
 8002518:	4629      	mov	r1, r5
 800251a:	4632      	mov	r2, r6
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	f04f 0400 	mov.w	r4, #0
 8002524:	0154      	lsls	r4, r2, #5
 8002526:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800252a:	014b      	lsls	r3, r1, #5
 800252c:	4619      	mov	r1, r3
 800252e:	4622      	mov	r2, r4
 8002530:	1b49      	subs	r1, r1, r5
 8002532:	eb62 0206 	sbc.w	r2, r2, r6
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	f04f 0400 	mov.w	r4, #0
 800253e:	0194      	lsls	r4, r2, #6
 8002540:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002544:	018b      	lsls	r3, r1, #6
 8002546:	1a5b      	subs	r3, r3, r1
 8002548:	eb64 0402 	sbc.w	r4, r4, r2
 800254c:	f04f 0100 	mov.w	r1, #0
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	00e2      	lsls	r2, r4, #3
 8002556:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800255a:	00d9      	lsls	r1, r3, #3
 800255c:	460b      	mov	r3, r1
 800255e:	4614      	mov	r4, r2
 8002560:	195b      	adds	r3, r3, r5
 8002562:	eb44 0406 	adc.w	r4, r4, r6
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	0262      	lsls	r2, r4, #9
 8002570:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002574:	0259      	lsls	r1, r3, #9
 8002576:	460b      	mov	r3, r1
 8002578:	4614      	mov	r4, r2
 800257a:	4618      	mov	r0, r3
 800257c:	4621      	mov	r1, r4
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	f7fe fb2e 	bl	8000be8 <__aeabi_uldivmod>
 800258c:	4603      	mov	r3, r0
 800258e:	460c      	mov	r4, r1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e049      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002594:	4b85      	ldr	r3, [pc, #532]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	f04f 0400 	mov.w	r4, #0
 800259e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	ea03 0501 	and.w	r5, r3, r1
 80025aa:	ea04 0602 	and.w	r6, r4, r2
 80025ae:	4629      	mov	r1, r5
 80025b0:	4632      	mov	r2, r6
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	0154      	lsls	r4, r2, #5
 80025bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025c0:	014b      	lsls	r3, r1, #5
 80025c2:	4619      	mov	r1, r3
 80025c4:	4622      	mov	r2, r4
 80025c6:	1b49      	subs	r1, r1, r5
 80025c8:	eb62 0206 	sbc.w	r2, r2, r6
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	0194      	lsls	r4, r2, #6
 80025d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025da:	018b      	lsls	r3, r1, #6
 80025dc:	1a5b      	subs	r3, r3, r1
 80025de:	eb64 0402 	sbc.w	r4, r4, r2
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	00e2      	lsls	r2, r4, #3
 80025ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025f0:	00d9      	lsls	r1, r3, #3
 80025f2:	460b      	mov	r3, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	195b      	adds	r3, r3, r5
 80025f8:	eb44 0406 	adc.w	r4, r4, r6
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	02a2      	lsls	r2, r4, #10
 8002606:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800260a:	0299      	lsls	r1, r3, #10
 800260c:	460b      	mov	r3, r1
 800260e:	4614      	mov	r4, r2
 8002610:	4618      	mov	r0, r3
 8002612:	4621      	mov	r1, r4
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f04f 0400 	mov.w	r4, #0
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	f7fe fae3 	bl	8000be8 <__aeabi_uldivmod>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002628:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	613b      	str	r3, [r7, #16]
      break;
 8002642:	e0ae      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800264c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264e:	4b57      	ldr	r3, [pc, #348]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04a      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	ea03 0501 	and.w	r5, r3, r1
 8002670:	ea04 0602 	and.w	r6, r4, r2
 8002674:	4629      	mov	r1, r5
 8002676:	4632      	mov	r2, r6
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	f04f 0400 	mov.w	r4, #0
 8002680:	0154      	lsls	r4, r2, #5
 8002682:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002686:	014b      	lsls	r3, r1, #5
 8002688:	4619      	mov	r1, r3
 800268a:	4622      	mov	r2, r4
 800268c:	1b49      	subs	r1, r1, r5
 800268e:	eb62 0206 	sbc.w	r2, r2, r6
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	f04f 0400 	mov.w	r4, #0
 800269a:	0194      	lsls	r4, r2, #6
 800269c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026a0:	018b      	lsls	r3, r1, #6
 80026a2:	1a5b      	subs	r3, r3, r1
 80026a4:	eb64 0402 	sbc.w	r4, r4, r2
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	00e2      	lsls	r2, r4, #3
 80026b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026b6:	00d9      	lsls	r1, r3, #3
 80026b8:	460b      	mov	r3, r1
 80026ba:	4614      	mov	r4, r2
 80026bc:	195b      	adds	r3, r3, r5
 80026be:	eb44 0406 	adc.w	r4, r4, r6
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	0262      	lsls	r2, r4, #9
 80026cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026d0:	0259      	lsls	r1, r3, #9
 80026d2:	460b      	mov	r3, r1
 80026d4:	4614      	mov	r4, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	4621      	mov	r1, r4
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	f7fe fa80 	bl	8000be8 <__aeabi_uldivmod>
 80026e8:	4603      	mov	r3, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e049      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	ea03 0501 	and.w	r5, r3, r1
 8002706:	ea04 0602 	and.w	r6, r4, r2
 800270a:	4629      	mov	r1, r5
 800270c:	4632      	mov	r2, r6
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	f04f 0400 	mov.w	r4, #0
 8002716:	0154      	lsls	r4, r2, #5
 8002718:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800271c:	014b      	lsls	r3, r1, #5
 800271e:	4619      	mov	r1, r3
 8002720:	4622      	mov	r2, r4
 8002722:	1b49      	subs	r1, r1, r5
 8002724:	eb62 0206 	sbc.w	r2, r2, r6
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	0194      	lsls	r4, r2, #6
 8002732:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	1a5b      	subs	r3, r3, r1
 800273a:	eb64 0402 	sbc.w	r4, r4, r2
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	00e2      	lsls	r2, r4, #3
 8002748:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800274c:	00d9      	lsls	r1, r3, #3
 800274e:	460b      	mov	r3, r1
 8002750:	4614      	mov	r4, r2
 8002752:	195b      	adds	r3, r3, r5
 8002754:	eb44 0406 	adc.w	r4, r4, r6
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	02a2      	lsls	r2, r4, #10
 8002762:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002766:	0299      	lsls	r1, r3, #10
 8002768:	460b      	mov	r3, r1
 800276a:	4614      	mov	r4, r2
 800276c:	4618      	mov	r0, r3
 800276e:	4621      	mov	r1, r4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	461a      	mov	r2, r3
 8002778:	4623      	mov	r3, r4
 800277a:	f7fe fa35 	bl	8000be8 <__aeabi_uldivmod>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_GetSysClockFreq+0x334>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0f1b      	lsrs	r3, r3, #28
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	613b      	str	r3, [r7, #16]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	693b      	ldr	r3, [r7, #16]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	007a1200 	.word	0x007a1200

080027b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8083 	beq.w	80028d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d019      	beq.n	8002812 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027de:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ea:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f6:	d00c      	beq.n	8002812 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f8:	4b8b      	ldr	r3, [pc, #556]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d112      	bne.n	800282a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002804:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d05b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x11e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d157      	bne.n	80028d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e216      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x8a>
 8002834:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7b      	ldr	r2, [pc, #492]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e01d      	b.n	800287e <HAL_RCC_OscConfig+0xc6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_OscConfig+0xae>
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a75      	ldr	r2, [pc, #468]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a72      	ldr	r2, [pc, #456]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e00b      	b.n	800287e <HAL_RCC_OscConfig+0xc6>
 8002866:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6f      	ldr	r2, [pc, #444]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800286c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6c      	ldr	r2, [pc, #432]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fec7 	bl	8001618 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7fe fec3 	bl	8001618 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1db      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a0:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0xd6>
 80028ac:	e014      	b.n	80028d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fe feb3 	bl	8001618 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b6:	f7fe feaf 	bl	8001618 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1c7      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c8:	4b57      	ldr	r3, [pc, #348]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0xfe>
 80028d4:	e000      	b.n	80028d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d06f      	beq.n	80029c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028f0:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028fc:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d11c      	bne.n	800294e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002920:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_OscConfig+0x180>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e18f      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4938      	ldr	r1, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294c:	e03a      	b.n	80029c4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d020      	beq.n	8002998 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x274>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fe5c 	bl	8001618 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe fe58 	bl	8001618 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e170      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4925      	ldr	r1, [pc, #148]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
 8002996:	e015      	b.n	80029c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x274>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fe3b 	bl	8001618 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a6:	f7fe fe37 	bl	8001618 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e14f      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d037      	beq.n	8002a40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCC_OscConfig+0x278>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe fe1b 	bl	8001618 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fe17 	bl	8001618 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e12f      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x270>)
 80029fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x22e>
 8002a04:	e01c      	b.n	8002a40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_OscConfig+0x278>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fe04 	bl	8001618 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a12:	e00f      	b.n	8002a34 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe fe00 	bl	8001618 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e118      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	42470000 	.word	0x42470000
 8002a30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e9      	bne.n	8002a14 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8097 	beq.w	8002b7c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b7f      	ldr	r3, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a7e      	ldr	r2, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7fe fdbf 	bl	8001618 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fdbb 	bl	8001618 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0d3      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x31a>
 8002ac4:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x354>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x33c>
 8002ada:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a60      	ldr	r2, [pc, #384]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x354>
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a56      	ldr	r2, [pc, #344]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe fd80 	bl	8001618 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fd7c 	bl	8001618 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e092      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ee      	beq.n	8002b1c <HAL_RCC_OscConfig+0x364>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fd6a 	bl	8001618 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fd66 	bl	8001618 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e07c      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	4a3a      	ldr	r2, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d068      	beq.n	8002c56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d060      	beq.n	8002c52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d145      	bne.n	8002c24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_RCC_OscConfig+0x4b0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fd3b 	bl	8001618 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fd37 	bl	8001618 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e04f      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69da      	ldr	r2, [r3, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	071b      	lsls	r3, r3, #28
 8002bf0:	491b      	ldr	r1, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_RCC_OscConfig+0x4b0>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd0c 	bl	8001618 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fd08 	bl	8001618 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e020      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x44c>
 8002c22:	e018      	b.n	8002c56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x4b0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fcf5 	bl	8001618 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fcf1 	bl	8001618 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x4a8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x47a>
 8002c50:	e001      	b.n	8002c56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470060 	.word	0x42470060

08002c6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e083      	b.n	8002d86 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7f5b      	ldrb	r3, [r3, #29]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fb54 	bl	800133c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	22ca      	movs	r2, #202	; 0xca
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2253      	movs	r2, #83	; 0x53
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fc26 	bl	80034fc <RTC_EnterInitMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	22ff      	movs	r2, #255	; 0xff
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e05e      	b.n	8002d86 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cda:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fbb8 	bl	80034ac <HAL_RTC_WaitForSynchro>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e018      	b.n	8002d86 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d8e:	b590      	push	{r4, r7, lr}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	7f1b      	ldrb	r3, [r3, #28]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_RTC_SetTime+0x1c>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0aa      	b.n	8002f00 <HAL_RTC_SetTime+0x172>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2202      	movs	r2, #2
 8002db4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d126      	bne.n	8002e0a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fbbd 	bl	8003554 <RTC_ByteToBcd2>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fbb6 	bl	8003554 <RTC_ByteToBcd2>
 8002de8:	4603      	mov	r3, r0
 8002dea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	789b      	ldrb	r3, [r3, #2]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fbae 	bl	8003554 <RTC_ByteToBcd2>
 8002df8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dfa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e018      	b.n	8002e3c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e2a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	78db      	ldrb	r3, [r3, #3]
 8002e36:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	22ca      	movs	r2, #202	; 0xca
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2253      	movs	r2, #83	; 0x53
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fb55 	bl	80034fc <RTC_EnterInitMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2204      	movs	r2, #4
 8002e64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e047      	b.n	8002f00 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d111      	bne.n	8002eea <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 faf0 	bl	80034ac <HAL_RTC_WaitForSynchro>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2204      	movs	r2, #4
 8002ede:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00a      	b.n	8002f00 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	22ff      	movs	r2, #255	; 0xff
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002efe:	2300      	movs	r3, #0
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11a      	bne.n	8002fba <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fb01 	bl	8003590 <RTC_Bcd2ToByte>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 faf8 	bl	8003590 <RTC_Bcd2ToByte>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	789b      	ldrb	r3, [r3, #2]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 faef 	bl	8003590 <RTC_Bcd2ToByte>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	7f1b      	ldrb	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_RTC_SetDate+0x1c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e094      	b.n	800310a <HAL_RTC_SetDate+0x146>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <HAL_RTC_SetDate+0x4c>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	f023 0310 	bic.w	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	330a      	adds	r3, #10
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11c      	bne.n	8003050 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	78db      	ldrb	r3, [r3, #3]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fa9a 	bl	8003554 <RTC_ByteToBcd2>
 8003020:	4603      	mov	r3, r0
 8003022:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa93 	bl	8003554 <RTC_ByteToBcd2>
 800302e:	4603      	mov	r3, r0
 8003030:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003032:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	789b      	ldrb	r3, [r3, #2]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa8b 	bl	8003554 <RTC_ByteToBcd2>
 800303e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003040:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e00e      	b.n	800306e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	78db      	ldrb	r3, [r3, #3]
 8003054:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	785b      	ldrb	r3, [r3, #1]
 800305a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800305c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003062:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	22ca      	movs	r2, #202	; 0xca
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2253      	movs	r2, #83	; 0x53
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa3c 	bl	80034fc <RTC_EnterInitMode>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2204      	movs	r2, #4
 8003096:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e033      	b.n	800310a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f9eb 	bl	80034ac <HAL_RTC_WaitForSynchro>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2204      	movs	r2, #4
 80030e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e00a      	b.n	800310a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	22ff      	movs	r2, #255	; 0xff
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003130:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	b2da      	uxtb	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0b5b      	lsrs	r3, r3, #13
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11a      	bne.n	80031a6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	78db      	ldrb	r3, [r3, #3]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fa0b 	bl	8003590 <RTC_Bcd2ToByte>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa02 	bl	8003590 <RTC_Bcd2ToByte>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f9f9 	bl	8003590 <RTC_Bcd2ToByte>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80031c4:	4b93      	ldr	r3, [pc, #588]	; (8003414 <HAL_RTC_SetAlarm_IT+0x264>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a93      	ldr	r2, [pc, #588]	; (8003418 <HAL_RTC_SetAlarm_IT+0x268>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0adb      	lsrs	r3, r3, #11
 80031d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	7f1b      	ldrb	r3, [r3, #28]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RTC_SetAlarm_IT+0x36>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e111      	b.n	800340a <HAL_RTC_SetAlarm_IT+0x25a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d137      	bne.n	8003268 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f99f 	bl	8003554 <RTC_ByteToBcd2>
 8003216:	4603      	mov	r3, r0
 8003218:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f998 	bl	8003554 <RTC_ByteToBcd2>
 8003224:	4603      	mov	r3, r0
 8003226:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003228:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	789b      	ldrb	r3, [r3, #2]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f990 	bl	8003554 <RTC_ByteToBcd2>
 8003234:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003236:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003240:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f982 	bl	8003554 <RTC_ByteToBcd2>
 8003250:	4603      	mov	r3, r0
 8003252:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003254:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800325c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003262:	4313      	orrs	r3, r2
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e023      	b.n	80032b0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003288:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800328e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	78db      	ldrb	r3, [r3, #3]
 8003294:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003296:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80032a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80032a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	22ca      	movs	r2, #202	; 0xca
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2253      	movs	r2, #83	; 0x53
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d141      	bne.n	800335a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032f6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	1e5a      	subs	r2, r3, #1
 80032fc:	617a      	str	r2, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2203      	movs	r2, #3
 800330e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e077      	b.n	800340a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0e7      	beq.n	80032f8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e040      	b.n	80033dc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003368:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f462 7220 	orn	r2, r2, #640	; 0x280
 800337a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	617a      	str	r2, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2203      	movs	r2, #3
 8003392:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e035      	b.n	800340a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0e7      	beq.n	800337c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RTC_SetAlarm_IT+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_RTC_SetAlarm_IT+0x26c>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_RTC_SetAlarm_IT+0x26c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_RTC_SetAlarm_IT+0x26c>)
 80033ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	; 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd90      	pop	{r4, r7, pc}
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000
 8003418:	10624dd3 	.word	0x10624dd3
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd fd4f 	bl	8000ee8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800345a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8a7 	bl	80035cc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800348e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003496:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	775a      	strb	r2, [r3, #29]
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034c8:	f7fe f8a6 	bl	8001618 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034ce:	e009      	b.n	80034e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80034d0:	f7fe f8a2 	bl	8001618 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034de:	d901      	bls.n	80034e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e007      	b.n	80034f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d119      	bne.n	800354a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f04f 32ff 	mov.w	r2, #4294967295
 800351e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003520:	f7fe f87a 	bl	8001618 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003526:	e009      	b.n	800353c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003528:	f7fe f876 	bl	8001618 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003536:	d901      	bls.n	800353c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e007      	b.n	800354c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0ee      	beq.n	8003528 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003562:	e005      	b.n	8003570 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	3b0a      	subs	r3, #10
 800356e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2b09      	cmp	r3, #9
 8003574:	d8f6      	bhi.n	8003564 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	b2da      	uxtb	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4313      	orrs	r3, r2
 8003582:	b2db      	uxtb	r3, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4413      	add	r3, r2
 80035be:	b2db      	uxtb	r3, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e03f      	b.n	8003672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd feb4 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f90b 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b088      	sub	sp, #32
 800367e:	af02      	add	r7, sp, #8
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 8083 	bne.w	80037a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Transmit+0x2e>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e07b      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Transmit+0x40>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e074      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2221      	movs	r2, #33	; 0x21
 80036cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036d0:	f7fd ffa2 	bl	8001618 <HAL_GetTick>
 80036d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036ea:	e042      	b.n	8003772 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d122      	bne.n	800374a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f84c 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e042      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3302      	adds	r3, #2
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	e017      	b.n	8003772 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	e013      	b.n	8003772 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f829 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e01f      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1b7      	bne.n	80036ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f810 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e006      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037bc:	e02c      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d028      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <UART_WaitOnFlagUntilTimeout+0x30>
 80037cc:	f7fd ff24 	bl	8001618 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d21d      	bcs.n	8003818 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0201 	bic.w	r2, r2, #1
 80037fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e00f      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d0c3      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003882:	f023 030c 	bic.w	r3, r3, #12
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	430b      	orrs	r3, r1
 800388e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	f040 818b 	bne.w	8003bc8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4ac1      	ldr	r2, [pc, #772]	; (8003bbc <UART_SetConfig+0x37c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d005      	beq.n	80038c8 <UART_SetConfig+0x88>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4abf      	ldr	r2, [pc, #764]	; (8003bc0 <UART_SetConfig+0x380>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	f040 80bd 	bne.w	8003a42 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c8:	f7fe fa98 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 80038cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	461d      	mov	r5, r3
 80038d2:	f04f 0600 	mov.w	r6, #0
 80038d6:	46a8      	mov	r8, r5
 80038d8:	46b1      	mov	r9, r6
 80038da:	eb18 0308 	adds.w	r3, r8, r8
 80038de:	eb49 0409 	adc.w	r4, r9, r9
 80038e2:	4698      	mov	r8, r3
 80038e4:	46a1      	mov	r9, r4
 80038e6:	eb18 0805 	adds.w	r8, r8, r5
 80038ea:	eb49 0906 	adc.w	r9, r9, r6
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003902:	4688      	mov	r8, r1
 8003904:	4691      	mov	r9, r2
 8003906:	eb18 0005 	adds.w	r0, r8, r5
 800390a:	eb49 0106 	adc.w	r1, r9, r6
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	461d      	mov	r5, r3
 8003914:	f04f 0600 	mov.w	r6, #0
 8003918:	196b      	adds	r3, r5, r5
 800391a:	eb46 0406 	adc.w	r4, r6, r6
 800391e:	461a      	mov	r2, r3
 8003920:	4623      	mov	r3, r4
 8003922:	f7fd f961 	bl	8000be8 <__aeabi_uldivmod>
 8003926:	4603      	mov	r3, r0
 8003928:	460c      	mov	r4, r1
 800392a:	461a      	mov	r2, r3
 800392c:	4ba5      	ldr	r3, [pc, #660]	; (8003bc4 <UART_SetConfig+0x384>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	461d      	mov	r5, r3
 800393c:	f04f 0600 	mov.w	r6, #0
 8003940:	46a9      	mov	r9, r5
 8003942:	46b2      	mov	sl, r6
 8003944:	eb19 0309 	adds.w	r3, r9, r9
 8003948:	eb4a 040a 	adc.w	r4, sl, sl
 800394c:	4699      	mov	r9, r3
 800394e:	46a2      	mov	sl, r4
 8003950:	eb19 0905 	adds.w	r9, r9, r5
 8003954:	eb4a 0a06 	adc.w	sl, sl, r6
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003964:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003968:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800396c:	4689      	mov	r9, r1
 800396e:	4692      	mov	sl, r2
 8003970:	eb19 0005 	adds.w	r0, r9, r5
 8003974:	eb4a 0106 	adc.w	r1, sl, r6
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	461d      	mov	r5, r3
 800397e:	f04f 0600 	mov.w	r6, #0
 8003982:	196b      	adds	r3, r5, r5
 8003984:	eb46 0406 	adc.w	r4, r6, r6
 8003988:	461a      	mov	r2, r3
 800398a:	4623      	mov	r3, r4
 800398c:	f7fd f92c 	bl	8000be8 <__aeabi_uldivmod>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	461a      	mov	r2, r3
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <UART_SetConfig+0x384>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a86      	ldr	r2, [pc, #536]	; (8003bc4 <UART_SetConfig+0x384>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b8:	4498      	add	r8, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	461d      	mov	r5, r3
 80039be:	f04f 0600 	mov.w	r6, #0
 80039c2:	46a9      	mov	r9, r5
 80039c4:	46b2      	mov	sl, r6
 80039c6:	eb19 0309 	adds.w	r3, r9, r9
 80039ca:	eb4a 040a 	adc.w	r4, sl, sl
 80039ce:	4699      	mov	r9, r3
 80039d0:	46a2      	mov	sl, r4
 80039d2:	eb19 0905 	adds.w	r9, r9, r5
 80039d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ee:	4689      	mov	r9, r1
 80039f0:	4692      	mov	sl, r2
 80039f2:	eb19 0005 	adds.w	r0, r9, r5
 80039f6:	eb4a 0106 	adc.w	r1, sl, r6
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	461d      	mov	r5, r3
 8003a00:	f04f 0600 	mov.w	r6, #0
 8003a04:	196b      	adds	r3, r5, r5
 8003a06:	eb46 0406 	adc.w	r4, r6, r6
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4623      	mov	r3, r4
 8003a0e:	f7fd f8eb 	bl	8000be8 <__aeabi_uldivmod>
 8003a12:	4603      	mov	r3, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <UART_SetConfig+0x384>)
 8003a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2164      	movs	r1, #100	; 0x64
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	3332      	adds	r3, #50	; 0x32
 8003a2c:	4a65      	ldr	r2, [pc, #404]	; (8003bc4 <UART_SetConfig+0x384>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 0207 	and.w	r2, r3, #7
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4442      	add	r2, r8
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	e26f      	b.n	8003f22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7fe f9c7 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8003a46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	f04f 0600 	mov.w	r6, #0
 8003a50:	46a8      	mov	r8, r5
 8003a52:	46b1      	mov	r9, r6
 8003a54:	eb18 0308 	adds.w	r3, r8, r8
 8003a58:	eb49 0409 	adc.w	r4, r9, r9
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	46a1      	mov	r9, r4
 8003a60:	eb18 0805 	adds.w	r8, r8, r5
 8003a64:	eb49 0906 	adc.w	r9, r9, r6
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a7c:	4688      	mov	r8, r1
 8003a7e:	4691      	mov	r9, r2
 8003a80:	eb18 0005 	adds.w	r0, r8, r5
 8003a84:	eb49 0106 	adc.w	r1, r9, r6
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	f04f 0600 	mov.w	r6, #0
 8003a92:	196b      	adds	r3, r5, r5
 8003a94:	eb46 0406 	adc.w	r4, r6, r6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7fd f8a4 	bl	8000be8 <__aeabi_uldivmod>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <UART_SetConfig+0x384>)
 8003aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	f04f 0600 	mov.w	r6, #0
 8003aba:	46a9      	mov	r9, r5
 8003abc:	46b2      	mov	sl, r6
 8003abe:	eb19 0309 	adds.w	r3, r9, r9
 8003ac2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac6:	4699      	mov	r9, r3
 8003ac8:	46a2      	mov	sl, r4
 8003aca:	eb19 0905 	adds.w	r9, r9, r5
 8003ace:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae6:	4689      	mov	r9, r1
 8003ae8:	4692      	mov	sl, r2
 8003aea:	eb19 0005 	adds.w	r0, r9, r5
 8003aee:	eb4a 0106 	adc.w	r1, sl, r6
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	461d      	mov	r5, r3
 8003af8:	f04f 0600 	mov.w	r6, #0
 8003afc:	196b      	adds	r3, r5, r5
 8003afe:	eb46 0406 	adc.w	r4, r6, r6
 8003b02:	461a      	mov	r2, r3
 8003b04:	4623      	mov	r3, r4
 8003b06:	f7fd f86f 	bl	8000be8 <__aeabi_uldivmod>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <UART_SetConfig+0x384>)
 8003b12:	fba3 1302 	umull	r1, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2164      	movs	r1, #100	; 0x64
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	3332      	adds	r3, #50	; 0x32
 8003b24:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <UART_SetConfig+0x384>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b32:	4498      	add	r8, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	461d      	mov	r5, r3
 8003b38:	f04f 0600 	mov.w	r6, #0
 8003b3c:	46a9      	mov	r9, r5
 8003b3e:	46b2      	mov	sl, r6
 8003b40:	eb19 0309 	adds.w	r3, r9, r9
 8003b44:	eb4a 040a 	adc.w	r4, sl, sl
 8003b48:	4699      	mov	r9, r3
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	eb19 0905 	adds.w	r9, r9, r5
 8003b50:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b68:	4689      	mov	r9, r1
 8003b6a:	4692      	mov	sl, r2
 8003b6c:	eb19 0005 	adds.w	r0, r9, r5
 8003b70:	eb4a 0106 	adc.w	r1, sl, r6
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	461d      	mov	r5, r3
 8003b7a:	f04f 0600 	mov.w	r6, #0
 8003b7e:	196b      	adds	r3, r5, r5
 8003b80:	eb46 0406 	adc.w	r4, r6, r6
 8003b84:	461a      	mov	r2, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	f7fd f82e 	bl	8000be8 <__aeabi_uldivmod>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <UART_SetConfig+0x384>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <UART_SetConfig+0x384>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 0207 	and.w	r2, r3, #7
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4442      	add	r2, r8
 8003bb8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bba:	e1b2      	b.n	8003f22 <UART_SetConfig+0x6e2>
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	40011400 	.word	0x40011400
 8003bc4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4ad7      	ldr	r2, [pc, #860]	; (8003f2c <UART_SetConfig+0x6ec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d005      	beq.n	8003bde <UART_SetConfig+0x39e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4ad6      	ldr	r2, [pc, #856]	; (8003f30 <UART_SetConfig+0x6f0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	f040 80d1 	bne.w	8003d80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bde:	f7fe f90d 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8003be2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	469a      	mov	sl, r3
 8003be8:	f04f 0b00 	mov.w	fp, #0
 8003bec:	46d0      	mov	r8, sl
 8003bee:	46d9      	mov	r9, fp
 8003bf0:	eb18 0308 	adds.w	r3, r8, r8
 8003bf4:	eb49 0409 	adc.w	r4, r9, r9
 8003bf8:	4698      	mov	r8, r3
 8003bfa:	46a1      	mov	r9, r4
 8003bfc:	eb18 080a 	adds.w	r8, r8, sl
 8003c00:	eb49 090b 	adc.w	r9, r9, fp
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c18:	4688      	mov	r8, r1
 8003c1a:	4691      	mov	r9, r2
 8003c1c:	eb1a 0508 	adds.w	r5, sl, r8
 8003c20:	eb4b 0609 	adc.w	r6, fp, r9
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f04f 0400 	mov.w	r4, #0
 8003c36:	0094      	lsls	r4, r2, #2
 8003c38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c3c:	008b      	lsls	r3, r1, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	4628      	mov	r0, r5
 8003c44:	4631      	mov	r1, r6
 8003c46:	f7fc ffcf 	bl	8000be8 <__aeabi_uldivmod>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4bb8      	ldr	r3, [pc, #736]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	469b      	mov	fp, r3
 8003c60:	f04f 0c00 	mov.w	ip, #0
 8003c64:	46d9      	mov	r9, fp
 8003c66:	46e2      	mov	sl, ip
 8003c68:	eb19 0309 	adds.w	r3, r9, r9
 8003c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c70:	4699      	mov	r9, r3
 8003c72:	46a2      	mov	sl, r4
 8003c74:	eb19 090b 	adds.w	r9, r9, fp
 8003c78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c90:	4689      	mov	r9, r1
 8003c92:	4692      	mov	sl, r2
 8003c94:	eb1b 0509 	adds.w	r5, fp, r9
 8003c98:	eb4c 060a 	adc.w	r6, ip, sl
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	0094      	lsls	r4, r2, #2
 8003cb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4623      	mov	r3, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	4631      	mov	r1, r6
 8003cbe:	f7fc ff93 	bl	8000be8 <__aeabi_uldivmod>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003cca:	fba3 1302 	umull	r1, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2164      	movs	r1, #100	; 0x64
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	3332      	adds	r3, #50	; 0x32
 8003cdc:	4a95      	ldr	r2, [pc, #596]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce8:	4498      	add	r8, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	469b      	mov	fp, r3
 8003cee:	f04f 0c00 	mov.w	ip, #0
 8003cf2:	46d9      	mov	r9, fp
 8003cf4:	46e2      	mov	sl, ip
 8003cf6:	eb19 0309 	adds.w	r3, r9, r9
 8003cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003cfe:	4699      	mov	r9, r3
 8003d00:	46a2      	mov	sl, r4
 8003d02:	eb19 090b 	adds.w	r9, r9, fp
 8003d06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d1e:	4689      	mov	r9, r1
 8003d20:	4692      	mov	sl, r2
 8003d22:	eb1b 0509 	adds.w	r5, fp, r9
 8003d26:	eb4c 060a 	adc.w	r6, ip, sl
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	0094      	lsls	r4, r2, #2
 8003d3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	f7fc ff4c 	bl	8000be8 <__aeabi_uldivmod>
 8003d50:	4603      	mov	r3, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b77      	ldr	r3, [pc, #476]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a72      	ldr	r2, [pc, #456]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4442      	add	r2, r8
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	e0d0      	b.n	8003f22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe f828 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8003d84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	469a      	mov	sl, r3
 8003d8a:	f04f 0b00 	mov.w	fp, #0
 8003d8e:	46d0      	mov	r8, sl
 8003d90:	46d9      	mov	r9, fp
 8003d92:	eb18 0308 	adds.w	r3, r8, r8
 8003d96:	eb49 0409 	adc.w	r4, r9, r9
 8003d9a:	4698      	mov	r8, r3
 8003d9c:	46a1      	mov	r9, r4
 8003d9e:	eb18 080a 	adds.w	r8, r8, sl
 8003da2:	eb49 090b 	adc.w	r9, r9, fp
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003db6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dba:	4688      	mov	r8, r1
 8003dbc:	4691      	mov	r9, r2
 8003dbe:	eb1a 0508 	adds.w	r5, sl, r8
 8003dc2:	eb4b 0609 	adc.w	r6, fp, r9
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	f04f 0400 	mov.w	r4, #0
 8003dd8:	0094      	lsls	r4, r2, #2
 8003dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	4631      	mov	r1, r6
 8003de8:	f7fc fefe 	bl	8000be8 <__aeabi_uldivmod>
 8003dec:	4603      	mov	r3, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003df4:	fba3 2302 	umull	r2, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	469b      	mov	fp, r3
 8003e02:	f04f 0c00 	mov.w	ip, #0
 8003e06:	46d9      	mov	r9, fp
 8003e08:	46e2      	mov	sl, ip
 8003e0a:	eb19 0309 	adds.w	r3, r9, r9
 8003e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e12:	4699      	mov	r9, r3
 8003e14:	46a2      	mov	sl, r4
 8003e16:	eb19 090b 	adds.w	r9, r9, fp
 8003e1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e32:	4689      	mov	r9, r1
 8003e34:	4692      	mov	sl, r2
 8003e36:	eb1b 0509 	adds.w	r5, fp, r9
 8003e3a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	f04f 0400 	mov.w	r4, #0
 8003e50:	0094      	lsls	r4, r2, #2
 8003e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e56:	008b      	lsls	r3, r1, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	4631      	mov	r1, r6
 8003e60:	f7fc fec2 	bl	8000be8 <__aeabi_uldivmod>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8a:	4498      	add	r8, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	469b      	mov	fp, r3
 8003e90:	f04f 0c00 	mov.w	ip, #0
 8003e94:	46d9      	mov	r9, fp
 8003e96:	46e2      	mov	sl, ip
 8003e98:	eb19 0309 	adds.w	r3, r9, r9
 8003e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	46a2      	mov	sl, r4
 8003ea4:	eb19 090b 	adds.w	r9, r9, fp
 8003ea8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ec8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0094      	lsls	r4, r2, #2
 8003ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	4631      	mov	r1, r6
 8003eee:	f7fc fe7b 	bl	8000be8 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003efa:	fba3 1302 	umull	r1, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <UART_SetConfig+0x6f4>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4442      	add	r2, r8
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	e7ff      	b.n	8003f22 <UART_SetConfig+0x6e2>
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	40011000 	.word	0x40011000
 8003f30:	40011400 	.word	0x40011400
 8003f34:	51eb851f 	.word	0x51eb851f

08003f38 <__errno>:
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <__errno+0x8>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2000000c 	.word	0x2000000c

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0d      	ldr	r6, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1ba4      	subs	r4, r4, r6
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2500      	movs	r5, #0
 8003f50:	42a5      	cmp	r5, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4e0b      	ldr	r6, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f002 f85e 	bl	8006018 <_init>
 8003f5c:	1ba4      	subs	r4, r4, r6
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2500      	movs	r5, #0
 8003f62:	42a5      	cmp	r5, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6c:	4798      	blx	r3
 8003f6e:	3501      	adds	r5, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f76:	4798      	blx	r3
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	080062c8 	.word	0x080062c8
 8003f80:	080062c8 	.word	0x080062c8
 8003f84:	080062c8 	.word	0x080062c8
 8003f88:	080062cc 	.word	0x080062cc

08003f8c <memset>:
 8003f8c:	4402      	add	r2, r0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d100      	bne.n	8003f96 <memset+0xa>
 8003f94:	4770      	bx	lr
 8003f96:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9a:	e7f9      	b.n	8003f90 <memset+0x4>

08003f9c <__cvt>:
 8003f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa0:	ec55 4b10 	vmov	r4, r5, d0
 8003fa4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003fa6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003faa:	2d00      	cmp	r5, #0
 8003fac:	460e      	mov	r6, r1
 8003fae:	4691      	mov	r9, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	bfb8      	it	lt
 8003fb4:	4622      	movlt	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	f027 0720 	bic.w	r7, r7, #32
 8003fbc:	bfbb      	ittet	lt
 8003fbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003fc2:	461d      	movlt	r5, r3
 8003fc4:	2300      	movge	r3, #0
 8003fc6:	232d      	movlt	r3, #45	; 0x2d
 8003fc8:	bfb8      	it	lt
 8003fca:	4614      	movlt	r4, r2
 8003fcc:	2f46      	cmp	r7, #70	; 0x46
 8003fce:	700b      	strb	r3, [r1, #0]
 8003fd0:	d004      	beq.n	8003fdc <__cvt+0x40>
 8003fd2:	2f45      	cmp	r7, #69	; 0x45
 8003fd4:	d100      	bne.n	8003fd8 <__cvt+0x3c>
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	2102      	movs	r1, #2
 8003fda:	e000      	b.n	8003fde <__cvt+0x42>
 8003fdc:	2103      	movs	r1, #3
 8003fde:	ab03      	add	r3, sp, #12
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	ab02      	add	r3, sp, #8
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	4653      	mov	r3, sl
 8003fea:	ec45 4b10 	vmov	d0, r4, r5
 8003fee:	f000 fcdf 	bl	80049b0 <_dtoa_r>
 8003ff2:	2f47      	cmp	r7, #71	; 0x47
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	d102      	bne.n	8003ffe <__cvt+0x62>
 8003ff8:	f019 0f01 	tst.w	r9, #1
 8003ffc:	d026      	beq.n	800404c <__cvt+0xb0>
 8003ffe:	2f46      	cmp	r7, #70	; 0x46
 8004000:	eb08 0906 	add.w	r9, r8, r6
 8004004:	d111      	bne.n	800402a <__cvt+0x8e>
 8004006:	f898 3000 	ldrb.w	r3, [r8]
 800400a:	2b30      	cmp	r3, #48	; 0x30
 800400c:	d10a      	bne.n	8004024 <__cvt+0x88>
 800400e:	2200      	movs	r2, #0
 8004010:	2300      	movs	r3, #0
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc fd77 	bl	8000b08 <__aeabi_dcmpeq>
 800401a:	b918      	cbnz	r0, 8004024 <__cvt+0x88>
 800401c:	f1c6 0601 	rsb	r6, r6, #1
 8004020:	f8ca 6000 	str.w	r6, [sl]
 8004024:	f8da 3000 	ldr.w	r3, [sl]
 8004028:	4499      	add	r9, r3
 800402a:	2200      	movs	r2, #0
 800402c:	2300      	movs	r3, #0
 800402e:	4620      	mov	r0, r4
 8004030:	4629      	mov	r1, r5
 8004032:	f7fc fd69 	bl	8000b08 <__aeabi_dcmpeq>
 8004036:	b938      	cbnz	r0, 8004048 <__cvt+0xac>
 8004038:	2230      	movs	r2, #48	; 0x30
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	454b      	cmp	r3, r9
 800403e:	d205      	bcs.n	800404c <__cvt+0xb0>
 8004040:	1c59      	adds	r1, r3, #1
 8004042:	9103      	str	r1, [sp, #12]
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e7f8      	b.n	800403a <__cvt+0x9e>
 8004048:	f8cd 900c 	str.w	r9, [sp, #12]
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004050:	eba3 0308 	sub.w	r3, r3, r8
 8004054:	4640      	mov	r0, r8
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	b004      	add	sp, #16
 800405a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800405e <__exponent>:
 800405e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004060:	2900      	cmp	r1, #0
 8004062:	4604      	mov	r4, r0
 8004064:	bfba      	itte	lt
 8004066:	4249      	neglt	r1, r1
 8004068:	232d      	movlt	r3, #45	; 0x2d
 800406a:	232b      	movge	r3, #43	; 0x2b
 800406c:	2909      	cmp	r1, #9
 800406e:	f804 2b02 	strb.w	r2, [r4], #2
 8004072:	7043      	strb	r3, [r0, #1]
 8004074:	dd20      	ble.n	80040b8 <__exponent+0x5a>
 8004076:	f10d 0307 	add.w	r3, sp, #7
 800407a:	461f      	mov	r7, r3
 800407c:	260a      	movs	r6, #10
 800407e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004082:	fb06 1115 	mls	r1, r6, r5, r1
 8004086:	3130      	adds	r1, #48	; 0x30
 8004088:	2d09      	cmp	r5, #9
 800408a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800408e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004092:	4629      	mov	r1, r5
 8004094:	dc09      	bgt.n	80040aa <__exponent+0x4c>
 8004096:	3130      	adds	r1, #48	; 0x30
 8004098:	3b02      	subs	r3, #2
 800409a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800409e:	42bb      	cmp	r3, r7
 80040a0:	4622      	mov	r2, r4
 80040a2:	d304      	bcc.n	80040ae <__exponent+0x50>
 80040a4:	1a10      	subs	r0, r2, r0
 80040a6:	b003      	add	sp, #12
 80040a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040aa:	4613      	mov	r3, r2
 80040ac:	e7e7      	b.n	800407e <__exponent+0x20>
 80040ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b2:	f804 2b01 	strb.w	r2, [r4], #1
 80040b6:	e7f2      	b.n	800409e <__exponent+0x40>
 80040b8:	2330      	movs	r3, #48	; 0x30
 80040ba:	4419      	add	r1, r3
 80040bc:	7083      	strb	r3, [r0, #2]
 80040be:	1d02      	adds	r2, r0, #4
 80040c0:	70c1      	strb	r1, [r0, #3]
 80040c2:	e7ef      	b.n	80040a4 <__exponent+0x46>

080040c4 <_printf_float>:
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	b08d      	sub	sp, #52	; 0x34
 80040ca:	460c      	mov	r4, r1
 80040cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80040d0:	4616      	mov	r6, r2
 80040d2:	461f      	mov	r7, r3
 80040d4:	4605      	mov	r5, r0
 80040d6:	f001 fa23 	bl	8005520 <_localeconv_r>
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc f896 	bl	8000210 <strlen>
 80040e4:	2300      	movs	r3, #0
 80040e6:	930a      	str	r3, [sp, #40]	; 0x28
 80040e8:	f8d8 3000 	ldr.w	r3, [r8]
 80040ec:	9005      	str	r0, [sp, #20]
 80040ee:	3307      	adds	r3, #7
 80040f0:	f023 0307 	bic.w	r3, r3, #7
 80040f4:	f103 0208 	add.w	r2, r3, #8
 80040f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80040fc:	f8d4 b000 	ldr.w	fp, [r4]
 8004100:	f8c8 2000 	str.w	r2, [r8]
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800410c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004110:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004114:	9307      	str	r3, [sp, #28]
 8004116:	f8cd 8018 	str.w	r8, [sp, #24]
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	4ba7      	ldr	r3, [pc, #668]	; (80043bc <_printf_float+0x2f8>)
 8004120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004124:	f7fc fd22 	bl	8000b6c <__aeabi_dcmpun>
 8004128:	bb70      	cbnz	r0, 8004188 <_printf_float+0xc4>
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	4ba3      	ldr	r3, [pc, #652]	; (80043bc <_printf_float+0x2f8>)
 8004130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004134:	f7fc fcfc 	bl	8000b30 <__aeabi_dcmple>
 8004138:	bb30      	cbnz	r0, 8004188 <_printf_float+0xc4>
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	4640      	mov	r0, r8
 8004140:	4649      	mov	r1, r9
 8004142:	f7fc fceb 	bl	8000b1c <__aeabi_dcmplt>
 8004146:	b110      	cbz	r0, 800414e <_printf_float+0x8a>
 8004148:	232d      	movs	r3, #45	; 0x2d
 800414a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414e:	4a9c      	ldr	r2, [pc, #624]	; (80043c0 <_printf_float+0x2fc>)
 8004150:	4b9c      	ldr	r3, [pc, #624]	; (80043c4 <_printf_float+0x300>)
 8004152:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004156:	bf8c      	ite	hi
 8004158:	4690      	movhi	r8, r2
 800415a:	4698      	movls	r8, r3
 800415c:	2303      	movs	r3, #3
 800415e:	f02b 0204 	bic.w	r2, fp, #4
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	6022      	str	r2, [r4, #0]
 8004166:	f04f 0900 	mov.w	r9, #0
 800416a:	9700      	str	r7, [sp, #0]
 800416c:	4633      	mov	r3, r6
 800416e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004170:	4621      	mov	r1, r4
 8004172:	4628      	mov	r0, r5
 8004174:	f000 f9e6 	bl	8004544 <_printf_common>
 8004178:	3001      	adds	r0, #1
 800417a:	f040 808d 	bne.w	8004298 <_printf_float+0x1d4>
 800417e:	f04f 30ff 	mov.w	r0, #4294967295
 8004182:	b00d      	add	sp, #52	; 0x34
 8004184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	4640      	mov	r0, r8
 800418e:	4649      	mov	r1, r9
 8004190:	f7fc fcec 	bl	8000b6c <__aeabi_dcmpun>
 8004194:	b110      	cbz	r0, 800419c <_printf_float+0xd8>
 8004196:	4a8c      	ldr	r2, [pc, #560]	; (80043c8 <_printf_float+0x304>)
 8004198:	4b8c      	ldr	r3, [pc, #560]	; (80043cc <_printf_float+0x308>)
 800419a:	e7da      	b.n	8004152 <_printf_float+0x8e>
 800419c:	6861      	ldr	r1, [r4, #4]
 800419e:	1c4b      	adds	r3, r1, #1
 80041a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80041a4:	a80a      	add	r0, sp, #40	; 0x28
 80041a6:	d13e      	bne.n	8004226 <_printf_float+0x162>
 80041a8:	2306      	movs	r3, #6
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	2300      	movs	r3, #0
 80041ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80041b2:	ab09      	add	r3, sp, #36	; 0x24
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	ec49 8b10 	vmov	d0, r8, r9
 80041ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041be:	6022      	str	r2, [r4, #0]
 80041c0:	f8cd a004 	str.w	sl, [sp, #4]
 80041c4:	6861      	ldr	r1, [r4, #4]
 80041c6:	4628      	mov	r0, r5
 80041c8:	f7ff fee8 	bl	8003f9c <__cvt>
 80041cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80041d0:	2b47      	cmp	r3, #71	; 0x47
 80041d2:	4680      	mov	r8, r0
 80041d4:	d109      	bne.n	80041ea <_printf_float+0x126>
 80041d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d8:	1cd8      	adds	r0, r3, #3
 80041da:	db02      	blt.n	80041e2 <_printf_float+0x11e>
 80041dc:	6862      	ldr	r2, [r4, #4]
 80041de:	4293      	cmp	r3, r2
 80041e0:	dd47      	ble.n	8004272 <_printf_float+0x1ae>
 80041e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80041e6:	fa5f fa8a 	uxtb.w	sl, sl
 80041ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80041ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041f0:	d824      	bhi.n	800423c <_printf_float+0x178>
 80041f2:	3901      	subs	r1, #1
 80041f4:	4652      	mov	r2, sl
 80041f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041fa:	9109      	str	r1, [sp, #36]	; 0x24
 80041fc:	f7ff ff2f 	bl	800405e <__exponent>
 8004200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004202:	1813      	adds	r3, r2, r0
 8004204:	2a01      	cmp	r2, #1
 8004206:	4681      	mov	r9, r0
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	dc02      	bgt.n	8004212 <_printf_float+0x14e>
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	07d1      	lsls	r1, r2, #31
 8004210:	d501      	bpl.n	8004216 <_printf_float+0x152>
 8004212:	3301      	adds	r3, #1
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0a5      	beq.n	800416a <_printf_float+0xa6>
 800421e:	232d      	movs	r3, #45	; 0x2d
 8004220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004224:	e7a1      	b.n	800416a <_printf_float+0xa6>
 8004226:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800422a:	f000 8177 	beq.w	800451c <_printf_float+0x458>
 800422e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004232:	d1bb      	bne.n	80041ac <_printf_float+0xe8>
 8004234:	2900      	cmp	r1, #0
 8004236:	d1b9      	bne.n	80041ac <_printf_float+0xe8>
 8004238:	2301      	movs	r3, #1
 800423a:	e7b6      	b.n	80041aa <_printf_float+0xe6>
 800423c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004240:	d119      	bne.n	8004276 <_printf_float+0x1b2>
 8004242:	2900      	cmp	r1, #0
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	dd0c      	ble.n	8004262 <_printf_float+0x19e>
 8004248:	6121      	str	r1, [r4, #16]
 800424a:	b913      	cbnz	r3, 8004252 <_printf_float+0x18e>
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	07d2      	lsls	r2, r2, #31
 8004250:	d502      	bpl.n	8004258 <_printf_float+0x194>
 8004252:	3301      	adds	r3, #1
 8004254:	440b      	add	r3, r1
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425a:	65a3      	str	r3, [r4, #88]	; 0x58
 800425c:	f04f 0900 	mov.w	r9, #0
 8004260:	e7d9      	b.n	8004216 <_printf_float+0x152>
 8004262:	b913      	cbnz	r3, 800426a <_printf_float+0x1a6>
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	07d0      	lsls	r0, r2, #31
 8004268:	d501      	bpl.n	800426e <_printf_float+0x1aa>
 800426a:	3302      	adds	r3, #2
 800426c:	e7f3      	b.n	8004256 <_printf_float+0x192>
 800426e:	2301      	movs	r3, #1
 8004270:	e7f1      	b.n	8004256 <_printf_float+0x192>
 8004272:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004276:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800427a:	4293      	cmp	r3, r2
 800427c:	db05      	blt.n	800428a <_printf_float+0x1c6>
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	07d1      	lsls	r1, r2, #31
 8004284:	d5e8      	bpl.n	8004258 <_printf_float+0x194>
 8004286:	3301      	adds	r3, #1
 8004288:	e7e5      	b.n	8004256 <_printf_float+0x192>
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfd4      	ite	le
 800428e:	f1c3 0302 	rsble	r3, r3, #2
 8004292:	2301      	movgt	r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	e7de      	b.n	8004256 <_printf_float+0x192>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	055a      	lsls	r2, r3, #21
 800429c:	d407      	bmi.n	80042ae <_printf_float+0x1ea>
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	4642      	mov	r2, r8
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	d12b      	bne.n	8004304 <_printf_float+0x240>
 80042ac:	e767      	b.n	800417e <_printf_float+0xba>
 80042ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80042b2:	f240 80dc 	bls.w	800446e <_printf_float+0x3aa>
 80042b6:	2200      	movs	r2, #0
 80042b8:	2300      	movs	r3, #0
 80042ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042be:	f7fc fc23 	bl	8000b08 <__aeabi_dcmpeq>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d033      	beq.n	800432e <_printf_float+0x26a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <_printf_float+0x30c>)
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	f43f af54 	beq.w	800417e <_printf_float+0xba>
 80042d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042da:	429a      	cmp	r2, r3
 80042dc:	db02      	blt.n	80042e4 <_printf_float+0x220>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	07d8      	lsls	r0, r3, #31
 80042e2:	d50f      	bpl.n	8004304 <_printf_float+0x240>
 80042e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f af45 	beq.w	800417e <_printf_float+0xba>
 80042f4:	f04f 0800 	mov.w	r8, #0
 80042f8:	f104 091a 	add.w	r9, r4, #26
 80042fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	4543      	cmp	r3, r8
 8004302:	dc09      	bgt.n	8004318 <_printf_float+0x254>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	079b      	lsls	r3, r3, #30
 8004308:	f100 8103 	bmi.w	8004512 <_printf_float+0x44e>
 800430c:	68e0      	ldr	r0, [r4, #12]
 800430e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004310:	4298      	cmp	r0, r3
 8004312:	bfb8      	it	lt
 8004314:	4618      	movlt	r0, r3
 8004316:	e734      	b.n	8004182 <_printf_float+0xbe>
 8004318:	2301      	movs	r3, #1
 800431a:	464a      	mov	r2, r9
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f af2b 	beq.w	800417e <_printf_float+0xba>
 8004328:	f108 0801 	add.w	r8, r8, #1
 800432c:	e7e6      	b.n	80042fc <_printf_float+0x238>
 800432e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc2b      	bgt.n	800438c <_printf_float+0x2c8>
 8004334:	2301      	movs	r3, #1
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <_printf_float+0x30c>)
 8004338:	4631      	mov	r1, r6
 800433a:	4628      	mov	r0, r5
 800433c:	47b8      	blx	r7
 800433e:	3001      	adds	r0, #1
 8004340:	f43f af1d 	beq.w	800417e <_printf_float+0xba>
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	b923      	cbnz	r3, 8004352 <_printf_float+0x28e>
 8004348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434a:	b913      	cbnz	r3, 8004352 <_printf_float+0x28e>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	07d9      	lsls	r1, r3, #31
 8004350:	d5d8      	bpl.n	8004304 <_printf_float+0x240>
 8004352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	f43f af0e 	beq.w	800417e <_printf_float+0xba>
 8004362:	f04f 0900 	mov.w	r9, #0
 8004366:	f104 0a1a 	add.w	sl, r4, #26
 800436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436c:	425b      	negs	r3, r3
 800436e:	454b      	cmp	r3, r9
 8004370:	dc01      	bgt.n	8004376 <_printf_float+0x2b2>
 8004372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004374:	e794      	b.n	80042a0 <_printf_float+0x1dc>
 8004376:	2301      	movs	r3, #1
 8004378:	4652      	mov	r2, sl
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f aefc 	beq.w	800417e <_printf_float+0xba>
 8004386:	f109 0901 	add.w	r9, r9, #1
 800438a:	e7ee      	b.n	800436a <_printf_float+0x2a6>
 800438c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800438e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004390:	429a      	cmp	r2, r3
 8004392:	bfa8      	it	ge
 8004394:	461a      	movge	r2, r3
 8004396:	2a00      	cmp	r2, #0
 8004398:	4691      	mov	r9, r2
 800439a:	dd07      	ble.n	80043ac <_printf_float+0x2e8>
 800439c:	4613      	mov	r3, r2
 800439e:	4631      	mov	r1, r6
 80043a0:	4642      	mov	r2, r8
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f aee9 	beq.w	800417e <_printf_float+0xba>
 80043ac:	f104 031a 	add.w	r3, r4, #26
 80043b0:	f04f 0b00 	mov.w	fp, #0
 80043b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043b8:	9306      	str	r3, [sp, #24]
 80043ba:	e015      	b.n	80043e8 <_printf_float+0x324>
 80043bc:	7fefffff 	.word	0x7fefffff
 80043c0:	08006064 	.word	0x08006064
 80043c4:	08006060 	.word	0x08006060
 80043c8:	0800606c 	.word	0x0800606c
 80043cc:	08006068 	.word	0x08006068
 80043d0:	08006070 	.word	0x08006070
 80043d4:	2301      	movs	r3, #1
 80043d6:	9a06      	ldr	r2, [sp, #24]
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f aecd 	beq.w	800417e <_printf_float+0xba>
 80043e4:	f10b 0b01 	add.w	fp, fp, #1
 80043e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80043ec:	ebaa 0309 	sub.w	r3, sl, r9
 80043f0:	455b      	cmp	r3, fp
 80043f2:	dcef      	bgt.n	80043d4 <_printf_float+0x310>
 80043f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f8:	429a      	cmp	r2, r3
 80043fa:	44d0      	add	r8, sl
 80043fc:	db15      	blt.n	800442a <_printf_float+0x366>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07da      	lsls	r2, r3, #31
 8004402:	d412      	bmi.n	800442a <_printf_float+0x366>
 8004404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004408:	eba3 020a 	sub.w	r2, r3, sl
 800440c:	eba3 0a01 	sub.w	sl, r3, r1
 8004410:	4592      	cmp	sl, r2
 8004412:	bfa8      	it	ge
 8004414:	4692      	movge	sl, r2
 8004416:	f1ba 0f00 	cmp.w	sl, #0
 800441a:	dc0e      	bgt.n	800443a <_printf_float+0x376>
 800441c:	f04f 0800 	mov.w	r8, #0
 8004420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004424:	f104 091a 	add.w	r9, r4, #26
 8004428:	e019      	b.n	800445e <_printf_float+0x39a>
 800442a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	d1e5      	bne.n	8004404 <_printf_float+0x340>
 8004438:	e6a1      	b.n	800417e <_printf_float+0xba>
 800443a:	4653      	mov	r3, sl
 800443c:	4642      	mov	r2, r8
 800443e:	4631      	mov	r1, r6
 8004440:	4628      	mov	r0, r5
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	d1e9      	bne.n	800441c <_printf_float+0x358>
 8004448:	e699      	b.n	800417e <_printf_float+0xba>
 800444a:	2301      	movs	r3, #1
 800444c:	464a      	mov	r2, r9
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	f43f ae92 	beq.w	800417e <_printf_float+0xba>
 800445a:	f108 0801 	add.w	r8, r8, #1
 800445e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	eba3 030a 	sub.w	r3, r3, sl
 8004468:	4543      	cmp	r3, r8
 800446a:	dcee      	bgt.n	800444a <_printf_float+0x386>
 800446c:	e74a      	b.n	8004304 <_printf_float+0x240>
 800446e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004470:	2a01      	cmp	r2, #1
 8004472:	dc01      	bgt.n	8004478 <_printf_float+0x3b4>
 8004474:	07db      	lsls	r3, r3, #31
 8004476:	d53a      	bpl.n	80044ee <_printf_float+0x42a>
 8004478:	2301      	movs	r3, #1
 800447a:	4642      	mov	r2, r8
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	f43f ae7b 	beq.w	800417e <_printf_float+0xba>
 8004488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f108 0801 	add.w	r8, r8, #1
 8004498:	f43f ae71 	beq.w	800417e <_printf_float+0xba>
 800449c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800449e:	2200      	movs	r2, #0
 80044a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80044a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044a8:	2300      	movs	r3, #0
 80044aa:	f7fc fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80044ae:	b9c8      	cbnz	r0, 80044e4 <_printf_float+0x420>
 80044b0:	4653      	mov	r3, sl
 80044b2:	4642      	mov	r2, r8
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	d10e      	bne.n	80044dc <_printf_float+0x418>
 80044be:	e65e      	b.n	800417e <_printf_float+0xba>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4652      	mov	r2, sl
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f ae57 	beq.w	800417e <_printf_float+0xba>
 80044d0:	f108 0801 	add.w	r8, r8, #1
 80044d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	4543      	cmp	r3, r8
 80044da:	dcf1      	bgt.n	80044c0 <_printf_float+0x3fc>
 80044dc:	464b      	mov	r3, r9
 80044de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044e2:	e6de      	b.n	80042a2 <_printf_float+0x1de>
 80044e4:	f04f 0800 	mov.w	r8, #0
 80044e8:	f104 0a1a 	add.w	sl, r4, #26
 80044ec:	e7f2      	b.n	80044d4 <_printf_float+0x410>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e7df      	b.n	80044b2 <_printf_float+0x3ee>
 80044f2:	2301      	movs	r3, #1
 80044f4:	464a      	mov	r2, r9
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae3e 	beq.w	800417e <_printf_float+0xba>
 8004502:	f108 0801 	add.w	r8, r8, #1
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	4543      	cmp	r3, r8
 800450e:	dcf0      	bgt.n	80044f2 <_printf_float+0x42e>
 8004510:	e6fc      	b.n	800430c <_printf_float+0x248>
 8004512:	f04f 0800 	mov.w	r8, #0
 8004516:	f104 0919 	add.w	r9, r4, #25
 800451a:	e7f4      	b.n	8004506 <_printf_float+0x442>
 800451c:	2900      	cmp	r1, #0
 800451e:	f43f ae8b 	beq.w	8004238 <_printf_float+0x174>
 8004522:	2300      	movs	r3, #0
 8004524:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004528:	ab09      	add	r3, sp, #36	; 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	ec49 8b10 	vmov	d0, r8, r9
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	f8cd a004 	str.w	sl, [sp, #4]
 8004536:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800453a:	4628      	mov	r0, r5
 800453c:	f7ff fd2e 	bl	8003f9c <__cvt>
 8004540:	4680      	mov	r8, r0
 8004542:	e648      	b.n	80041d6 <_printf_float+0x112>

08004544 <_printf_common>:
 8004544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004548:	4691      	mov	r9, r2
 800454a:	461f      	mov	r7, r3
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	690b      	ldr	r3, [r1, #16]
 8004550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004554:	4293      	cmp	r3, r2
 8004556:	bfb8      	it	lt
 8004558:	4613      	movlt	r3, r2
 800455a:	f8c9 3000 	str.w	r3, [r9]
 800455e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004562:	4606      	mov	r6, r0
 8004564:	460c      	mov	r4, r1
 8004566:	b112      	cbz	r2, 800456e <_printf_common+0x2a>
 8004568:	3301      	adds	r3, #1
 800456a:	f8c9 3000 	str.w	r3, [r9]
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	0699      	lsls	r1, r3, #26
 8004572:	bf42      	ittt	mi
 8004574:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004578:	3302      	addmi	r3, #2
 800457a:	f8c9 3000 	strmi.w	r3, [r9]
 800457e:	6825      	ldr	r5, [r4, #0]
 8004580:	f015 0506 	ands.w	r5, r5, #6
 8004584:	d107      	bne.n	8004596 <_printf_common+0x52>
 8004586:	f104 0a19 	add.w	sl, r4, #25
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	f8d9 2000 	ldr.w	r2, [r9]
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	42ab      	cmp	r3, r5
 8004594:	dc28      	bgt.n	80045e8 <_printf_common+0xa4>
 8004596:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	3300      	adds	r3, #0
 800459e:	bf18      	it	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	0692      	lsls	r2, r2, #26
 80045a4:	d42d      	bmi.n	8004602 <_printf_common+0xbe>
 80045a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045aa:	4639      	mov	r1, r7
 80045ac:	4630      	mov	r0, r6
 80045ae:	47c0      	blx	r8
 80045b0:	3001      	adds	r0, #1
 80045b2:	d020      	beq.n	80045f6 <_printf_common+0xb2>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	68e5      	ldr	r5, [r4, #12]
 80045b8:	f8d9 2000 	ldr.w	r2, [r9]
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	bf08      	it	eq
 80045c4:	1aad      	subeq	r5, r5, r2
 80045c6:	68a3      	ldr	r3, [r4, #8]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	f04f 0900 	mov.w	r9, #0
 80045de:	341a      	adds	r4, #26
 80045e0:	454d      	cmp	r5, r9
 80045e2:	d11a      	bne.n	800461a <_printf_common+0xd6>
 80045e4:	2000      	movs	r0, #0
 80045e6:	e008      	b.n	80045fa <_printf_common+0xb6>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4652      	mov	r2, sl
 80045ec:	4639      	mov	r1, r7
 80045ee:	4630      	mov	r0, r6
 80045f0:	47c0      	blx	r8
 80045f2:	3001      	adds	r0, #1
 80045f4:	d103      	bne.n	80045fe <_printf_common+0xba>
 80045f6:	f04f 30ff 	mov.w	r0, #4294967295
 80045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fe:	3501      	adds	r5, #1
 8004600:	e7c3      	b.n	800458a <_printf_common+0x46>
 8004602:	18e1      	adds	r1, r4, r3
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	2030      	movs	r0, #48	; 0x30
 8004608:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460c:	4422      	add	r2, r4
 800460e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004616:	3302      	adds	r3, #2
 8004618:	e7c5      	b.n	80045a6 <_printf_common+0x62>
 800461a:	2301      	movs	r3, #1
 800461c:	4622      	mov	r2, r4
 800461e:	4639      	mov	r1, r7
 8004620:	4630      	mov	r0, r6
 8004622:	47c0      	blx	r8
 8004624:	3001      	adds	r0, #1
 8004626:	d0e6      	beq.n	80045f6 <_printf_common+0xb2>
 8004628:	f109 0901 	add.w	r9, r9, #1
 800462c:	e7d8      	b.n	80045e0 <_printf_common+0x9c>
	...

08004630 <_printf_i>:
 8004630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004634:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004638:	460c      	mov	r4, r1
 800463a:	7e09      	ldrb	r1, [r1, #24]
 800463c:	b085      	sub	sp, #20
 800463e:	296e      	cmp	r1, #110	; 0x6e
 8004640:	4617      	mov	r7, r2
 8004642:	4606      	mov	r6, r0
 8004644:	4698      	mov	r8, r3
 8004646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004648:	f000 80b3 	beq.w	80047b2 <_printf_i+0x182>
 800464c:	d822      	bhi.n	8004694 <_printf_i+0x64>
 800464e:	2963      	cmp	r1, #99	; 0x63
 8004650:	d036      	beq.n	80046c0 <_printf_i+0x90>
 8004652:	d80a      	bhi.n	800466a <_printf_i+0x3a>
 8004654:	2900      	cmp	r1, #0
 8004656:	f000 80b9 	beq.w	80047cc <_printf_i+0x19c>
 800465a:	2958      	cmp	r1, #88	; 0x58
 800465c:	f000 8083 	beq.w	8004766 <_printf_i+0x136>
 8004660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004664:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004668:	e032      	b.n	80046d0 <_printf_i+0xa0>
 800466a:	2964      	cmp	r1, #100	; 0x64
 800466c:	d001      	beq.n	8004672 <_printf_i+0x42>
 800466e:	2969      	cmp	r1, #105	; 0x69
 8004670:	d1f6      	bne.n	8004660 <_printf_i+0x30>
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	0605      	lsls	r5, r0, #24
 8004678:	f103 0104 	add.w	r1, r3, #4
 800467c:	d52a      	bpl.n	80046d4 <_printf_i+0xa4>
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	da03      	bge.n	800468e <_printf_i+0x5e>
 8004686:	222d      	movs	r2, #45	; 0x2d
 8004688:	425b      	negs	r3, r3
 800468a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800468e:	486f      	ldr	r0, [pc, #444]	; (800484c <_printf_i+0x21c>)
 8004690:	220a      	movs	r2, #10
 8004692:	e039      	b.n	8004708 <_printf_i+0xd8>
 8004694:	2973      	cmp	r1, #115	; 0x73
 8004696:	f000 809d 	beq.w	80047d4 <_printf_i+0x1a4>
 800469a:	d808      	bhi.n	80046ae <_printf_i+0x7e>
 800469c:	296f      	cmp	r1, #111	; 0x6f
 800469e:	d020      	beq.n	80046e2 <_printf_i+0xb2>
 80046a0:	2970      	cmp	r1, #112	; 0x70
 80046a2:	d1dd      	bne.n	8004660 <_printf_i+0x30>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e003      	b.n	80046b6 <_printf_i+0x86>
 80046ae:	2975      	cmp	r1, #117	; 0x75
 80046b0:	d017      	beq.n	80046e2 <_printf_i+0xb2>
 80046b2:	2978      	cmp	r1, #120	; 0x78
 80046b4:	d1d4      	bne.n	8004660 <_printf_i+0x30>
 80046b6:	2378      	movs	r3, #120	; 0x78
 80046b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046bc:	4864      	ldr	r0, [pc, #400]	; (8004850 <_printf_i+0x220>)
 80046be:	e055      	b.n	800476c <_printf_i+0x13c>
 80046c0:	6813      	ldr	r3, [r2, #0]
 80046c2:	1d19      	adds	r1, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6011      	str	r1, [r2, #0]
 80046c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d0:	2301      	movs	r3, #1
 80046d2:	e08c      	b.n	80047ee <_printf_i+0x1be>
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6011      	str	r1, [r2, #0]
 80046d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046dc:	bf18      	it	ne
 80046de:	b21b      	sxthne	r3, r3
 80046e0:	e7cf      	b.n	8004682 <_printf_i+0x52>
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	6825      	ldr	r5, [r4, #0]
 80046e6:	1d18      	adds	r0, r3, #4
 80046e8:	6010      	str	r0, [r2, #0]
 80046ea:	0628      	lsls	r0, r5, #24
 80046ec:	d501      	bpl.n	80046f2 <_printf_i+0xc2>
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <_printf_i+0xc8>
 80046f2:	0668      	lsls	r0, r5, #25
 80046f4:	d5fb      	bpl.n	80046ee <_printf_i+0xbe>
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	4854      	ldr	r0, [pc, #336]	; (800484c <_printf_i+0x21c>)
 80046fa:	296f      	cmp	r1, #111	; 0x6f
 80046fc:	bf14      	ite	ne
 80046fe:	220a      	movne	r2, #10
 8004700:	2208      	moveq	r2, #8
 8004702:	2100      	movs	r1, #0
 8004704:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004708:	6865      	ldr	r5, [r4, #4]
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	2d00      	cmp	r5, #0
 800470e:	f2c0 8095 	blt.w	800483c <_printf_i+0x20c>
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	f021 0104 	bic.w	r1, r1, #4
 8004718:	6021      	str	r1, [r4, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13d      	bne.n	800479a <_printf_i+0x16a>
 800471e:	2d00      	cmp	r5, #0
 8004720:	f040 808e 	bne.w	8004840 <_printf_i+0x210>
 8004724:	4665      	mov	r5, ip
 8004726:	2a08      	cmp	r2, #8
 8004728:	d10b      	bne.n	8004742 <_printf_i+0x112>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	07db      	lsls	r3, r3, #31
 800472e:	d508      	bpl.n	8004742 <_printf_i+0x112>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	bfde      	ittt	le
 8004738:	2330      	movle	r3, #48	; 0x30
 800473a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800473e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004742:	ebac 0305 	sub.w	r3, ip, r5
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	f8cd 8000 	str.w	r8, [sp]
 800474c:	463b      	mov	r3, r7
 800474e:	aa03      	add	r2, sp, #12
 8004750:	4621      	mov	r1, r4
 8004752:	4630      	mov	r0, r6
 8004754:	f7ff fef6 	bl	8004544 <_printf_common>
 8004758:	3001      	adds	r0, #1
 800475a:	d14d      	bne.n	80047f8 <_printf_i+0x1c8>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	b005      	add	sp, #20
 8004762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004766:	4839      	ldr	r0, [pc, #228]	; (800484c <_printf_i+0x21c>)
 8004768:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	1d1d      	adds	r5, r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6015      	str	r5, [r2, #0]
 8004776:	060a      	lsls	r2, r1, #24
 8004778:	d50b      	bpl.n	8004792 <_printf_i+0x162>
 800477a:	07ca      	lsls	r2, r1, #31
 800477c:	bf44      	itt	mi
 800477e:	f041 0120 	orrmi.w	r1, r1, #32
 8004782:	6021      	strmi	r1, [r4, #0]
 8004784:	b91b      	cbnz	r3, 800478e <_printf_i+0x15e>
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	f022 0220 	bic.w	r2, r2, #32
 800478c:	6022      	str	r2, [r4, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	e7b7      	b.n	8004702 <_printf_i+0xd2>
 8004792:	064d      	lsls	r5, r1, #25
 8004794:	bf48      	it	mi
 8004796:	b29b      	uxthmi	r3, r3
 8004798:	e7ef      	b.n	800477a <_printf_i+0x14a>
 800479a:	4665      	mov	r5, ip
 800479c:	fbb3 f1f2 	udiv	r1, r3, r2
 80047a0:	fb02 3311 	mls	r3, r2, r1, r3
 80047a4:	5cc3      	ldrb	r3, [r0, r3]
 80047a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047aa:	460b      	mov	r3, r1
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d1f5      	bne.n	800479c <_printf_i+0x16c>
 80047b0:	e7b9      	b.n	8004726 <_printf_i+0xf6>
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	6825      	ldr	r5, [r4, #0]
 80047b6:	6961      	ldr	r1, [r4, #20]
 80047b8:	1d18      	adds	r0, r3, #4
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	0628      	lsls	r0, r5, #24
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	d501      	bpl.n	80047c6 <_printf_i+0x196>
 80047c2:	6019      	str	r1, [r3, #0]
 80047c4:	e002      	b.n	80047cc <_printf_i+0x19c>
 80047c6:	066a      	lsls	r2, r5, #25
 80047c8:	d5fb      	bpl.n	80047c2 <_printf_i+0x192>
 80047ca:	8019      	strh	r1, [r3, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	4665      	mov	r5, ip
 80047d2:	e7b9      	b.n	8004748 <_printf_i+0x118>
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	1d19      	adds	r1, r3, #4
 80047d8:	6011      	str	r1, [r2, #0]
 80047da:	681d      	ldr	r5, [r3, #0]
 80047dc:	6862      	ldr	r2, [r4, #4]
 80047de:	2100      	movs	r1, #0
 80047e0:	4628      	mov	r0, r5
 80047e2:	f7fb fd1d 	bl	8000220 <memchr>
 80047e6:	b108      	cbz	r0, 80047ec <_printf_i+0x1bc>
 80047e8:	1b40      	subs	r0, r0, r5
 80047ea:	6060      	str	r0, [r4, #4]
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	2300      	movs	r3, #0
 80047f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f6:	e7a7      	b.n	8004748 <_printf_i+0x118>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	462a      	mov	r2, r5
 80047fc:	4639      	mov	r1, r7
 80047fe:	4630      	mov	r0, r6
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d0aa      	beq.n	800475c <_printf_i+0x12c>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	079b      	lsls	r3, r3, #30
 800480a:	d413      	bmi.n	8004834 <_printf_i+0x204>
 800480c:	68e0      	ldr	r0, [r4, #12]
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	4298      	cmp	r0, r3
 8004812:	bfb8      	it	lt
 8004814:	4618      	movlt	r0, r3
 8004816:	e7a3      	b.n	8004760 <_printf_i+0x130>
 8004818:	2301      	movs	r3, #1
 800481a:	464a      	mov	r2, r9
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	47c0      	blx	r8
 8004822:	3001      	adds	r0, #1
 8004824:	d09a      	beq.n	800475c <_printf_i+0x12c>
 8004826:	3501      	adds	r5, #1
 8004828:	68e3      	ldr	r3, [r4, #12]
 800482a:	9a03      	ldr	r2, [sp, #12]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	42ab      	cmp	r3, r5
 8004830:	dcf2      	bgt.n	8004818 <_printf_i+0x1e8>
 8004832:	e7eb      	b.n	800480c <_printf_i+0x1dc>
 8004834:	2500      	movs	r5, #0
 8004836:	f104 0919 	add.w	r9, r4, #25
 800483a:	e7f5      	b.n	8004828 <_printf_i+0x1f8>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ac      	bne.n	800479a <_printf_i+0x16a>
 8004840:	7803      	ldrb	r3, [r0, #0]
 8004842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004846:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484a:	e76c      	b.n	8004726 <_printf_i+0xf6>
 800484c:	08006072 	.word	0x08006072
 8004850:	08006083 	.word	0x08006083

08004854 <siprintf>:
 8004854:	b40e      	push	{r1, r2, r3}
 8004856:	b500      	push	{lr}
 8004858:	b09c      	sub	sp, #112	; 0x70
 800485a:	ab1d      	add	r3, sp, #116	; 0x74
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	9006      	str	r0, [sp, #24]
 8004860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004864:	4809      	ldr	r0, [pc, #36]	; (800488c <siprintf+0x38>)
 8004866:	9107      	str	r1, [sp, #28]
 8004868:	9104      	str	r1, [sp, #16]
 800486a:	4909      	ldr	r1, [pc, #36]	; (8004890 <siprintf+0x3c>)
 800486c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004870:	9105      	str	r1, [sp, #20]
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	a902      	add	r1, sp, #8
 8004878:	f001 fa5e 	bl	8005d38 <_svfiprintf_r>
 800487c:	9b02      	ldr	r3, [sp, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	b01c      	add	sp, #112	; 0x70
 8004884:	f85d eb04 	ldr.w	lr, [sp], #4
 8004888:	b003      	add	sp, #12
 800488a:	4770      	bx	lr
 800488c:	2000000c 	.word	0x2000000c
 8004890:	ffff0208 	.word	0xffff0208

08004894 <quorem>:
 8004894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	6903      	ldr	r3, [r0, #16]
 800489a:	690c      	ldr	r4, [r1, #16]
 800489c:	42a3      	cmp	r3, r4
 800489e:	4680      	mov	r8, r0
 80048a0:	f2c0 8082 	blt.w	80049a8 <quorem+0x114>
 80048a4:	3c01      	subs	r4, #1
 80048a6:	f101 0714 	add.w	r7, r1, #20
 80048aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80048ae:	f100 0614 	add.w	r6, r0, #20
 80048b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80048b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80048ba:	eb06 030c 	add.w	r3, r6, ip
 80048be:	3501      	adds	r5, #1
 80048c0:	eb07 090c 	add.w	r9, r7, ip
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80048ca:	b395      	cbz	r5, 8004932 <quorem+0x9e>
 80048cc:	f04f 0a00 	mov.w	sl, #0
 80048d0:	4638      	mov	r0, r7
 80048d2:	46b6      	mov	lr, r6
 80048d4:	46d3      	mov	fp, sl
 80048d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80048da:	b293      	uxth	r3, r2
 80048dc:	fb05 a303 	mla	r3, r5, r3, sl
 80048e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	ebab 0303 	sub.w	r3, fp, r3
 80048ea:	0c12      	lsrs	r2, r2, #16
 80048ec:	f8de b000 	ldr.w	fp, [lr]
 80048f0:	fb05 a202 	mla	r2, r5, r2, sl
 80048f4:	fa13 f38b 	uxtah	r3, r3, fp
 80048f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80048fc:	fa1f fb82 	uxth.w	fp, r2
 8004900:	f8de 2000 	ldr.w	r2, [lr]
 8004904:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800490c:	b29b      	uxth	r3, r3
 800490e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004912:	4581      	cmp	r9, r0
 8004914:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004918:	f84e 3b04 	str.w	r3, [lr], #4
 800491c:	d2db      	bcs.n	80048d6 <quorem+0x42>
 800491e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004922:	b933      	cbnz	r3, 8004932 <quorem+0x9e>
 8004924:	9b01      	ldr	r3, [sp, #4]
 8004926:	3b04      	subs	r3, #4
 8004928:	429e      	cmp	r6, r3
 800492a:	461a      	mov	r2, r3
 800492c:	d330      	bcc.n	8004990 <quorem+0xfc>
 800492e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004932:	4640      	mov	r0, r8
 8004934:	f001 f82a 	bl	800598c <__mcmp>
 8004938:	2800      	cmp	r0, #0
 800493a:	db25      	blt.n	8004988 <quorem+0xf4>
 800493c:	3501      	adds	r5, #1
 800493e:	4630      	mov	r0, r6
 8004940:	f04f 0c00 	mov.w	ip, #0
 8004944:	f857 2b04 	ldr.w	r2, [r7], #4
 8004948:	f8d0 e000 	ldr.w	lr, [r0]
 800494c:	b293      	uxth	r3, r2
 800494e:	ebac 0303 	sub.w	r3, ip, r3
 8004952:	0c12      	lsrs	r2, r2, #16
 8004954:	fa13 f38e 	uxtah	r3, r3, lr
 8004958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800495c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004966:	45b9      	cmp	r9, r7
 8004968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800496c:	f840 3b04 	str.w	r3, [r0], #4
 8004970:	d2e8      	bcs.n	8004944 <quorem+0xb0>
 8004972:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004976:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800497a:	b92a      	cbnz	r2, 8004988 <quorem+0xf4>
 800497c:	3b04      	subs	r3, #4
 800497e:	429e      	cmp	r6, r3
 8004980:	461a      	mov	r2, r3
 8004982:	d30b      	bcc.n	800499c <quorem+0x108>
 8004984:	f8c8 4010 	str.w	r4, [r8, #16]
 8004988:	4628      	mov	r0, r5
 800498a:	b003      	add	sp, #12
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	3b04      	subs	r3, #4
 8004994:	2a00      	cmp	r2, #0
 8004996:	d1ca      	bne.n	800492e <quorem+0x9a>
 8004998:	3c01      	subs	r4, #1
 800499a:	e7c5      	b.n	8004928 <quorem+0x94>
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	3b04      	subs	r3, #4
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d1ef      	bne.n	8004984 <quorem+0xf0>
 80049a4:	3c01      	subs	r4, #1
 80049a6:	e7ea      	b.n	800497e <quorem+0xea>
 80049a8:	2000      	movs	r0, #0
 80049aa:	e7ee      	b.n	800498a <quorem+0xf6>
 80049ac:	0000      	movs	r0, r0
	...

080049b0 <_dtoa_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	ec57 6b10 	vmov	r6, r7, d0
 80049b8:	b097      	sub	sp, #92	; 0x5c
 80049ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049bc:	9106      	str	r1, [sp, #24]
 80049be:	4604      	mov	r4, r0
 80049c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80049c2:	9312      	str	r3, [sp, #72]	; 0x48
 80049c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049c8:	e9cd 6700 	strd	r6, r7, [sp]
 80049cc:	b93d      	cbnz	r5, 80049de <_dtoa_r+0x2e>
 80049ce:	2010      	movs	r0, #16
 80049d0:	f000 fdb4 	bl	800553c <malloc>
 80049d4:	6260      	str	r0, [r4, #36]	; 0x24
 80049d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049da:	6005      	str	r5, [r0, #0]
 80049dc:	60c5      	str	r5, [r0, #12]
 80049de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	b151      	cbz	r1, 80049fa <_dtoa_r+0x4a>
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	604a      	str	r2, [r1, #4]
 80049e8:	2301      	movs	r3, #1
 80049ea:	4093      	lsls	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 fdeb 	bl	80055ca <_Bfree>
 80049f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	1e3b      	subs	r3, r7, #0
 80049fc:	bfbb      	ittet	lt
 80049fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a02:	9301      	strlt	r3, [sp, #4]
 8004a04:	2300      	movge	r3, #0
 8004a06:	2201      	movlt	r2, #1
 8004a08:	bfac      	ite	ge
 8004a0a:	f8c8 3000 	strge.w	r3, [r8]
 8004a0e:	f8c8 2000 	strlt.w	r2, [r8]
 8004a12:	4baf      	ldr	r3, [pc, #700]	; (8004cd0 <_dtoa_r+0x320>)
 8004a14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a18:	ea33 0308 	bics.w	r3, r3, r8
 8004a1c:	d114      	bne.n	8004a48 <_dtoa_r+0x98>
 8004a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	b923      	cbnz	r3, 8004a34 <_dtoa_r+0x84>
 8004a2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f000 8542 	beq.w	80054b8 <_dtoa_r+0xb08>
 8004a34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004ce4 <_dtoa_r+0x334>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8544 	beq.w	80054c8 <_dtoa_r+0xb18>
 8004a40:	f10b 0303 	add.w	r3, fp, #3
 8004a44:	f000 bd3e 	b.w	80054c4 <_dtoa_r+0xb14>
 8004a48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2300      	movs	r3, #0
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fc f858 	bl	8000b08 <__aeabi_dcmpeq>
 8004a58:	4681      	mov	r9, r0
 8004a5a:	b168      	cbz	r0, 8004a78 <_dtoa_r+0xc8>
 8004a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a5e:	2301      	movs	r3, #1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8524 	beq.w	80054b2 <_dtoa_r+0xb02>
 8004a6a:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <_dtoa_r+0x324>)
 8004a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	f000 bd28 	b.w	80054c8 <_dtoa_r+0xb18>
 8004a78:	aa14      	add	r2, sp, #80	; 0x50
 8004a7a:	a915      	add	r1, sp, #84	; 0x54
 8004a7c:	ec47 6b10 	vmov	d0, r6, r7
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 fffa 	bl	8005a7a <__d2b>
 8004a86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a8a:	9004      	str	r0, [sp, #16]
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	d07c      	beq.n	8004b8a <_dtoa_r+0x1da>
 8004a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004a98:	46b2      	mov	sl, r6
 8004a9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004aa2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <_dtoa_r+0x328>)
 8004aaa:	4650      	mov	r0, sl
 8004aac:	4659      	mov	r1, fp
 8004aae:	f7fb fc0b 	bl	80002c8 <__aeabi_dsub>
 8004ab2:	a381      	add	r3, pc, #516	; (adr r3, 8004cb8 <_dtoa_r+0x308>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fdbe 	bl	8000638 <__aeabi_dmul>
 8004abc:	a380      	add	r3, pc, #512	; (adr r3, 8004cc0 <_dtoa_r+0x310>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f7fb fc03 	bl	80002cc <__adddf3>
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	4628      	mov	r0, r5
 8004aca:	460f      	mov	r7, r1
 8004acc:	f7fb fd4a 	bl	8000564 <__aeabi_i2d>
 8004ad0:	a37d      	add	r3, pc, #500	; (adr r3, 8004cc8 <_dtoa_r+0x318>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fdaf 	bl	8000638 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	f7fb fbf3 	bl	80002cc <__adddf3>
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	460f      	mov	r7, r1
 8004aea:	f7fc f855 	bl	8000b98 <__aeabi_d2iz>
 8004aee:	2200      	movs	r2, #0
 8004af0:	4682      	mov	sl, r0
 8004af2:	2300      	movs	r3, #0
 8004af4:	4630      	mov	r0, r6
 8004af6:	4639      	mov	r1, r7
 8004af8:	f7fc f810 	bl	8000b1c <__aeabi_dcmplt>
 8004afc:	b148      	cbz	r0, 8004b12 <_dtoa_r+0x162>
 8004afe:	4650      	mov	r0, sl
 8004b00:	f7fb fd30 	bl	8000564 <__aeabi_i2d>
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	f7fb fffe 	bl	8000b08 <__aeabi_dcmpeq>
 8004b0c:	b908      	cbnz	r0, 8004b12 <_dtoa_r+0x162>
 8004b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b12:	f1ba 0f16 	cmp.w	sl, #22
 8004b16:	d859      	bhi.n	8004bcc <_dtoa_r+0x21c>
 8004b18:	4970      	ldr	r1, [pc, #448]	; (8004cdc <_dtoa_r+0x32c>)
 8004b1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b26:	f7fc f817 	bl	8000b58 <__aeabi_dcmpgt>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d050      	beq.n	8004bd0 <_dtoa_r+0x220>
 8004b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b32:	2300      	movs	r3, #0
 8004b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b38:	1b5d      	subs	r5, r3, r5
 8004b3a:	f1b5 0801 	subs.w	r8, r5, #1
 8004b3e:	bf49      	itett	mi
 8004b40:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b44:	2300      	movpl	r3, #0
 8004b46:	9305      	strmi	r3, [sp, #20]
 8004b48:	f04f 0800 	movmi.w	r8, #0
 8004b4c:	bf58      	it	pl
 8004b4e:	9305      	strpl	r3, [sp, #20]
 8004b50:	f1ba 0f00 	cmp.w	sl, #0
 8004b54:	db3e      	blt.n	8004bd4 <_dtoa_r+0x224>
 8004b56:	2300      	movs	r3, #0
 8004b58:	44d0      	add	r8, sl
 8004b5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b5e:	9307      	str	r3, [sp, #28]
 8004b60:	9b06      	ldr	r3, [sp, #24]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	f200 8090 	bhi.w	8004c88 <_dtoa_r+0x2d8>
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	bfc4      	itt	gt
 8004b6c:	3b04      	subgt	r3, #4
 8004b6e:	9306      	strgt	r3, [sp, #24]
 8004b70:	9b06      	ldr	r3, [sp, #24]
 8004b72:	f1a3 0302 	sub.w	r3, r3, #2
 8004b76:	bfcc      	ite	gt
 8004b78:	2500      	movgt	r5, #0
 8004b7a:	2501      	movle	r5, #1
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	f200 808f 	bhi.w	8004ca0 <_dtoa_r+0x2f0>
 8004b82:	e8df f003 	tbb	[pc, r3]
 8004b86:	7f7d      	.short	0x7f7d
 8004b88:	7131      	.short	0x7131
 8004b8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004b8e:	441d      	add	r5, r3
 8004b90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b94:	2820      	cmp	r0, #32
 8004b96:	dd13      	ble.n	8004bc0 <_dtoa_r+0x210>
 8004b98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b9c:	9b00      	ldr	r3, [sp, #0]
 8004b9e:	fa08 f800 	lsl.w	r8, r8, r0
 8004ba2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004ba6:	fa23 f000 	lsr.w	r0, r3, r0
 8004baa:	ea48 0000 	orr.w	r0, r8, r0
 8004bae:	f7fb fcc9 	bl	8000544 <__aeabi_ui2d>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004bba:	3d01      	subs	r5, #1
 8004bbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bbe:	e772      	b.n	8004aa6 <_dtoa_r+0xf6>
 8004bc0:	9b00      	ldr	r3, [sp, #0]
 8004bc2:	f1c0 0020 	rsb	r0, r0, #32
 8004bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004bca:	e7f0      	b.n	8004bae <_dtoa_r+0x1fe>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e7b1      	b.n	8004b34 <_dtoa_r+0x184>
 8004bd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bd2:	e7b0      	b.n	8004b36 <_dtoa_r+0x186>
 8004bd4:	9b05      	ldr	r3, [sp, #20]
 8004bd6:	eba3 030a 	sub.w	r3, r3, sl
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	f1ca 0300 	rsb	r3, sl, #0
 8004be0:	9307      	str	r3, [sp, #28]
 8004be2:	2300      	movs	r3, #0
 8004be4:	930e      	str	r3, [sp, #56]	; 0x38
 8004be6:	e7bb      	b.n	8004b60 <_dtoa_r+0x1b0>
 8004be8:	2301      	movs	r3, #1
 8004bea:	930a      	str	r3, [sp, #40]	; 0x28
 8004bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dd59      	ble.n	8004ca6 <_dtoa_r+0x2f6>
 8004bf2:	9302      	str	r3, [sp, #8]
 8004bf4:	4699      	mov	r9, r3
 8004bf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	6072      	str	r2, [r6, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f102 0014 	add.w	r0, r2, #20
 8004c02:	4298      	cmp	r0, r3
 8004c04:	6871      	ldr	r1, [r6, #4]
 8004c06:	d953      	bls.n	8004cb0 <_dtoa_r+0x300>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fcaa 	bl	8005562 <_Balloc>
 8004c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c10:	6030      	str	r0, [r6, #0]
 8004c12:	f1b9 0f0e 	cmp.w	r9, #14
 8004c16:	f8d3 b000 	ldr.w	fp, [r3]
 8004c1a:	f200 80e6 	bhi.w	8004dea <_dtoa_r+0x43a>
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	f000 80e3 	beq.w	8004dea <_dtoa_r+0x43a>
 8004c24:	ed9d 7b00 	vldr	d7, [sp]
 8004c28:	f1ba 0f00 	cmp.w	sl, #0
 8004c2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004c30:	dd74      	ble.n	8004d1c <_dtoa_r+0x36c>
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <_dtoa_r+0x32c>)
 8004c34:	f00a 030f 	and.w	r3, sl, #15
 8004c38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c3c:	ed93 7b00 	vldr	d7, [r3]
 8004c40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004c44:	06f0      	lsls	r0, r6, #27
 8004c46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004c4a:	d565      	bpl.n	8004d18 <_dtoa_r+0x368>
 8004c4c:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <_dtoa_r+0x330>)
 8004c4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c56:	f7fb fe19 	bl	800088c <__aeabi_ddiv>
 8004c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c5e:	f006 060f 	and.w	r6, r6, #15
 8004c62:	2503      	movs	r5, #3
 8004c64:	4f1e      	ldr	r7, [pc, #120]	; (8004ce0 <_dtoa_r+0x330>)
 8004c66:	e04c      	b.n	8004d02 <_dtoa_r+0x352>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c6e:	4453      	add	r3, sl
 8004c70:	f103 0901 	add.w	r9, r3, #1
 8004c74:	9302      	str	r3, [sp, #8]
 8004c76:	464b      	mov	r3, r9
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bfb8      	it	lt
 8004c7c:	2301      	movlt	r3, #1
 8004c7e:	e7ba      	b.n	8004bf6 <_dtoa_r+0x246>
 8004c80:	2300      	movs	r3, #0
 8004c82:	e7b2      	b.n	8004bea <_dtoa_r+0x23a>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e7f0      	b.n	8004c6a <_dtoa_r+0x2ba>
 8004c88:	2501      	movs	r5, #1
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9306      	str	r3, [sp, #24]
 8004c8e:	950a      	str	r5, [sp, #40]	; 0x28
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	9302      	str	r3, [sp, #8]
 8004c96:	4699      	mov	r9, r3
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2312      	movs	r3, #18
 8004c9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c9e:	e7aa      	b.n	8004bf6 <_dtoa_r+0x246>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca4:	e7f4      	b.n	8004c90 <_dtoa_r+0x2e0>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	4699      	mov	r9, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	e7f5      	b.n	8004c9c <_dtoa_r+0x2ec>
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	6071      	str	r1, [r6, #4]
 8004cb4:	0052      	lsls	r2, r2, #1
 8004cb6:	e7a2      	b.n	8004bfe <_dtoa_r+0x24e>
 8004cb8:	636f4361 	.word	0x636f4361
 8004cbc:	3fd287a7 	.word	0x3fd287a7
 8004cc0:	8b60c8b3 	.word	0x8b60c8b3
 8004cc4:	3fc68a28 	.word	0x3fc68a28
 8004cc8:	509f79fb 	.word	0x509f79fb
 8004ccc:	3fd34413 	.word	0x3fd34413
 8004cd0:	7ff00000 	.word	0x7ff00000
 8004cd4:	08006071 	.word	0x08006071
 8004cd8:	3ff80000 	.word	0x3ff80000
 8004cdc:	080060d0 	.word	0x080060d0
 8004ce0:	080060a8 	.word	0x080060a8
 8004ce4:	0800609d 	.word	0x0800609d
 8004ce8:	07f1      	lsls	r1, r6, #31
 8004cea:	d508      	bpl.n	8004cfe <_dtoa_r+0x34e>
 8004cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cf4:	f7fb fca0 	bl	8000638 <__aeabi_dmul>
 8004cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	1076      	asrs	r6, r6, #1
 8004d00:	3708      	adds	r7, #8
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d1f0      	bne.n	8004ce8 <_dtoa_r+0x338>
 8004d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0e:	f7fb fdbd 	bl	800088c <__aeabi_ddiv>
 8004d12:	e9cd 0100 	strd	r0, r1, [sp]
 8004d16:	e01a      	b.n	8004d4e <_dtoa_r+0x39e>
 8004d18:	2502      	movs	r5, #2
 8004d1a:	e7a3      	b.n	8004c64 <_dtoa_r+0x2b4>
 8004d1c:	f000 80a0 	beq.w	8004e60 <_dtoa_r+0x4b0>
 8004d20:	f1ca 0600 	rsb	r6, sl, #0
 8004d24:	4b9f      	ldr	r3, [pc, #636]	; (8004fa4 <_dtoa_r+0x5f4>)
 8004d26:	4fa0      	ldr	r7, [pc, #640]	; (8004fa8 <_dtoa_r+0x5f8>)
 8004d28:	f006 020f 	and.w	r2, r6, #15
 8004d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d38:	f7fb fc7e 	bl	8000638 <__aeabi_dmul>
 8004d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d40:	1136      	asrs	r6, r6, #4
 8004d42:	2300      	movs	r3, #0
 8004d44:	2502      	movs	r5, #2
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	d17f      	bne.n	8004e4a <_dtoa_r+0x49a>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <_dtoa_r+0x362>
 8004d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8087 	beq.w	8004e64 <_dtoa_r+0x4b4>
 8004d56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4b93      	ldr	r3, [pc, #588]	; (8004fac <_dtoa_r+0x5fc>)
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb fedb 	bl	8000b1c <__aeabi_dcmplt>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d07c      	beq.n	8004e64 <_dtoa_r+0x4b4>
 8004d6a:	f1b9 0f00 	cmp.w	r9, #0
 8004d6e:	d079      	beq.n	8004e64 <_dtoa_r+0x4b4>
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dd35      	ble.n	8004de2 <_dtoa_r+0x432>
 8004d76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d7a:	9308      	str	r3, [sp, #32]
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4b8b      	ldr	r3, [pc, #556]	; (8004fb0 <_dtoa_r+0x600>)
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fb fc58 	bl	8000638 <__aeabi_dmul>
 8004d88:	e9cd 0100 	strd	r0, r1, [sp]
 8004d8c:	9f02      	ldr	r7, [sp, #8]
 8004d8e:	3501      	adds	r5, #1
 8004d90:	4628      	mov	r0, r5
 8004d92:	f7fb fbe7 	bl	8000564 <__aeabi_i2d>
 8004d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d9a:	f7fb fc4d 	bl	8000638 <__aeabi_dmul>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4b84      	ldr	r3, [pc, #528]	; (8004fb4 <_dtoa_r+0x604>)
 8004da2:	f7fb fa93 	bl	80002cc <__adddf3>
 8004da6:	4605      	mov	r5, r0
 8004da8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	d15d      	bne.n	8004e6c <_dtoa_r+0x4bc>
 8004db0:	2200      	movs	r2, #0
 8004db2:	4b81      	ldr	r3, [pc, #516]	; (8004fb8 <_dtoa_r+0x608>)
 8004db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db8:	f7fb fa86 	bl	80002c8 <__aeabi_dsub>
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	4633      	mov	r3, r6
 8004dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8004dc4:	f7fb fec8 	bl	8000b58 <__aeabi_dcmpgt>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f040 8288 	bne.w	80052de <_dtoa_r+0x92e>
 8004dce:	462a      	mov	r2, r5
 8004dd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd8:	f7fb fea0 	bl	8000b1c <__aeabi_dcmplt>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	f040 827c 	bne.w	80052da <_dtoa_r+0x92a>
 8004de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004de6:	e9cd 2300 	strd	r2, r3, [sp]
 8004dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f2c0 8150 	blt.w	8005092 <_dtoa_r+0x6e2>
 8004df2:	f1ba 0f0e 	cmp.w	sl, #14
 8004df6:	f300 814c 	bgt.w	8005092 <_dtoa_r+0x6e2>
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <_dtoa_r+0x5f4>)
 8004dfc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e00:	ed93 7b00 	vldr	d7, [r3]
 8004e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e0c:	f280 80d8 	bge.w	8004fc0 <_dtoa_r+0x610>
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	f300 80d4 	bgt.w	8004fc0 <_dtoa_r+0x610>
 8004e18:	f040 825e 	bne.w	80052d8 <_dtoa_r+0x928>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b66      	ldr	r3, [pc, #408]	; (8004fb8 <_dtoa_r+0x608>)
 8004e20:	ec51 0b17 	vmov	r0, r1, d7
 8004e24:	f7fb fc08 	bl	8000638 <__aeabi_dmul>
 8004e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e2c:	f7fb fe8a 	bl	8000b44 <__aeabi_dcmpge>
 8004e30:	464f      	mov	r7, r9
 8004e32:	464e      	mov	r6, r9
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f040 8234 	bne.w	80052a2 <_dtoa_r+0x8f2>
 8004e3a:	2331      	movs	r3, #49	; 0x31
 8004e3c:	f10b 0501 	add.w	r5, fp, #1
 8004e40:	f88b 3000 	strb.w	r3, [fp]
 8004e44:	f10a 0a01 	add.w	sl, sl, #1
 8004e48:	e22f      	b.n	80052aa <_dtoa_r+0x8fa>
 8004e4a:	07f2      	lsls	r2, r6, #31
 8004e4c:	d505      	bpl.n	8004e5a <_dtoa_r+0x4aa>
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e52:	f7fb fbf1 	bl	8000638 <__aeabi_dmul>
 8004e56:	3501      	adds	r5, #1
 8004e58:	2301      	movs	r3, #1
 8004e5a:	1076      	asrs	r6, r6, #1
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	e772      	b.n	8004d46 <_dtoa_r+0x396>
 8004e60:	2502      	movs	r5, #2
 8004e62:	e774      	b.n	8004d4e <_dtoa_r+0x39e>
 8004e64:	f8cd a020 	str.w	sl, [sp, #32]
 8004e68:	464f      	mov	r7, r9
 8004e6a:	e791      	b.n	8004d90 <_dtoa_r+0x3e0>
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <_dtoa_r+0x5f4>)
 8004e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d047      	beq.n	8004f0c <_dtoa_r+0x55c>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	2000      	movs	r0, #0
 8004e82:	494e      	ldr	r1, [pc, #312]	; (8004fbc <_dtoa_r+0x60c>)
 8004e84:	f7fb fd02 	bl	800088c <__aeabi_ddiv>
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4633      	mov	r3, r6
 8004e8c:	f7fb fa1c 	bl	80002c8 <__aeabi_dsub>
 8004e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e94:	465d      	mov	r5, fp
 8004e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e9a:	f7fb fe7d 	bl	8000b98 <__aeabi_d2iz>
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	f7fb fb60 	bl	8000564 <__aeabi_i2d>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eac:	f7fb fa0c 	bl	80002c8 <__aeabi_dsub>
 8004eb0:	3630      	adds	r6, #48	; 0x30
 8004eb2:	f805 6b01 	strb.w	r6, [r5], #1
 8004eb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eba:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebe:	f7fb fe2d 	bl	8000b1c <__aeabi_dcmplt>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d163      	bne.n	8004f8e <_dtoa_r+0x5de>
 8004ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4937      	ldr	r1, [pc, #220]	; (8004fac <_dtoa_r+0x5fc>)
 8004ece:	f7fb f9fb 	bl	80002c8 <__aeabi_dsub>
 8004ed2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ed6:	f7fb fe21 	bl	8000b1c <__aeabi_dcmplt>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f040 80b7 	bne.w	800504e <_dtoa_r+0x69e>
 8004ee0:	eba5 030b 	sub.w	r3, r5, fp
 8004ee4:	429f      	cmp	r7, r3
 8004ee6:	f77f af7c 	ble.w	8004de2 <_dtoa_r+0x432>
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <_dtoa_r+0x600>)
 8004eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ef2:	f7fb fba1 	bl	8000638 <__aeabi_dmul>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004efc:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <_dtoa_r+0x600>)
 8004efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f02:	f7fb fb99 	bl	8000638 <__aeabi_dmul>
 8004f06:	e9cd 0100 	strd	r0, r1, [sp]
 8004f0a:	e7c4      	b.n	8004e96 <_dtoa_r+0x4e6>
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	4633      	mov	r3, r6
 8004f10:	f7fb fb92 	bl	8000638 <__aeabi_dmul>
 8004f14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f18:	eb0b 0507 	add.w	r5, fp, r7
 8004f1c:	465e      	mov	r6, fp
 8004f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f22:	f7fb fe39 	bl	8000b98 <__aeabi_d2iz>
 8004f26:	4607      	mov	r7, r0
 8004f28:	f7fb fb1c 	bl	8000564 <__aeabi_i2d>
 8004f2c:	3730      	adds	r7, #48	; 0x30
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f36:	f7fb f9c7 	bl	80002c8 <__aeabi_dsub>
 8004f3a:	f806 7b01 	strb.w	r7, [r6], #1
 8004f3e:	42ae      	cmp	r6, r5
 8004f40:	e9cd 0100 	strd	r0, r1, [sp]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	d126      	bne.n	8004f98 <_dtoa_r+0x5e8>
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <_dtoa_r+0x60c>)
 8004f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f50:	f7fb f9bc 	bl	80002cc <__adddf3>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f5c:	f7fb fdfc 	bl	8000b58 <__aeabi_dcmpgt>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d174      	bne.n	800504e <_dtoa_r+0x69e>
 8004f64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f68:	2000      	movs	r0, #0
 8004f6a:	4914      	ldr	r1, [pc, #80]	; (8004fbc <_dtoa_r+0x60c>)
 8004f6c:	f7fb f9ac 	bl	80002c8 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f78:	f7fb fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f43f af30 	beq.w	8004de2 <_dtoa_r+0x432>
 8004f82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f86:	2b30      	cmp	r3, #48	; 0x30
 8004f88:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f8c:	d002      	beq.n	8004f94 <_dtoa_r+0x5e4>
 8004f8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004f92:	e04a      	b.n	800502a <_dtoa_r+0x67a>
 8004f94:	4615      	mov	r5, r2
 8004f96:	e7f4      	b.n	8004f82 <_dtoa_r+0x5d2>
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <_dtoa_r+0x600>)
 8004f9a:	f7fb fb4d 	bl	8000638 <__aeabi_dmul>
 8004f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa2:	e7bc      	b.n	8004f1e <_dtoa_r+0x56e>
 8004fa4:	080060d0 	.word	0x080060d0
 8004fa8:	080060a8 	.word	0x080060a8
 8004fac:	3ff00000 	.word	0x3ff00000
 8004fb0:	40240000 	.word	0x40240000
 8004fb4:	401c0000 	.word	0x401c0000
 8004fb8:	40140000 	.word	0x40140000
 8004fbc:	3fe00000 	.word	0x3fe00000
 8004fc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fc4:	465d      	mov	r5, fp
 8004fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fca:	4630      	mov	r0, r6
 8004fcc:	4639      	mov	r1, r7
 8004fce:	f7fb fc5d 	bl	800088c <__aeabi_ddiv>
 8004fd2:	f7fb fde1 	bl	8000b98 <__aeabi_d2iz>
 8004fd6:	4680      	mov	r8, r0
 8004fd8:	f7fb fac4 	bl	8000564 <__aeabi_i2d>
 8004fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe0:	f7fb fb2a 	bl	8000638 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004ff0:	f7fb f96a 	bl	80002c8 <__aeabi_dsub>
 8004ff4:	f805 6b01 	strb.w	r6, [r5], #1
 8004ff8:	eba5 060b 	sub.w	r6, r5, fp
 8004ffc:	45b1      	cmp	r9, r6
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	d139      	bne.n	8005078 <_dtoa_r+0x6c8>
 8005004:	f7fb f962 	bl	80002cc <__adddf3>
 8005008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800500c:	4606      	mov	r6, r0
 800500e:	460f      	mov	r7, r1
 8005010:	f7fb fda2 	bl	8000b58 <__aeabi_dcmpgt>
 8005014:	b9c8      	cbnz	r0, 800504a <_dtoa_r+0x69a>
 8005016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb fd73 	bl	8000b08 <__aeabi_dcmpeq>
 8005022:	b110      	cbz	r0, 800502a <_dtoa_r+0x67a>
 8005024:	f018 0f01 	tst.w	r8, #1
 8005028:	d10f      	bne.n	800504a <_dtoa_r+0x69a>
 800502a:	9904      	ldr	r1, [sp, #16]
 800502c:	4620      	mov	r0, r4
 800502e:	f000 facc 	bl	80055ca <_Bfree>
 8005032:	2300      	movs	r3, #0
 8005034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005036:	702b      	strb	r3, [r5, #0]
 8005038:	f10a 0301 	add.w	r3, sl, #1
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8241 	beq.w	80054c8 <_dtoa_r+0xb18>
 8005046:	601d      	str	r5, [r3, #0]
 8005048:	e23e      	b.n	80054c8 <_dtoa_r+0xb18>
 800504a:	f8cd a020 	str.w	sl, [sp, #32]
 800504e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005052:	2a39      	cmp	r2, #57	; 0x39
 8005054:	f105 33ff 	add.w	r3, r5, #4294967295
 8005058:	d108      	bne.n	800506c <_dtoa_r+0x6bc>
 800505a:	459b      	cmp	fp, r3
 800505c:	d10a      	bne.n	8005074 <_dtoa_r+0x6c4>
 800505e:	9b08      	ldr	r3, [sp, #32]
 8005060:	3301      	adds	r3, #1
 8005062:	9308      	str	r3, [sp, #32]
 8005064:	2330      	movs	r3, #48	; 0x30
 8005066:	f88b 3000 	strb.w	r3, [fp]
 800506a:	465b      	mov	r3, fp
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	3201      	adds	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e78c      	b.n	8004f8e <_dtoa_r+0x5de>
 8005074:	461d      	mov	r5, r3
 8005076:	e7ea      	b.n	800504e <_dtoa_r+0x69e>
 8005078:	2200      	movs	r2, #0
 800507a:	4b9b      	ldr	r3, [pc, #620]	; (80052e8 <_dtoa_r+0x938>)
 800507c:	f7fb fadc 	bl	8000638 <__aeabi_dmul>
 8005080:	2200      	movs	r2, #0
 8005082:	2300      	movs	r3, #0
 8005084:	4606      	mov	r6, r0
 8005086:	460f      	mov	r7, r1
 8005088:	f7fb fd3e 	bl	8000b08 <__aeabi_dcmpeq>
 800508c:	2800      	cmp	r0, #0
 800508e:	d09a      	beq.n	8004fc6 <_dtoa_r+0x616>
 8005090:	e7cb      	b.n	800502a <_dtoa_r+0x67a>
 8005092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005094:	2a00      	cmp	r2, #0
 8005096:	f000 808b 	beq.w	80051b0 <_dtoa_r+0x800>
 800509a:	9a06      	ldr	r2, [sp, #24]
 800509c:	2a01      	cmp	r2, #1
 800509e:	dc6e      	bgt.n	800517e <_dtoa_r+0x7ce>
 80050a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	d067      	beq.n	8005176 <_dtoa_r+0x7c6>
 80050a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050aa:	9f07      	ldr	r7, [sp, #28]
 80050ac:	9d05      	ldr	r5, [sp, #20]
 80050ae:	9a05      	ldr	r2, [sp, #20]
 80050b0:	2101      	movs	r1, #1
 80050b2:	441a      	add	r2, r3
 80050b4:	4620      	mov	r0, r4
 80050b6:	9205      	str	r2, [sp, #20]
 80050b8:	4498      	add	r8, r3
 80050ba:	f000 fb26 	bl	800570a <__i2b>
 80050be:	4606      	mov	r6, r0
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	dd0c      	ble.n	80050de <_dtoa_r+0x72e>
 80050c4:	f1b8 0f00 	cmp.w	r8, #0
 80050c8:	dd09      	ble.n	80050de <_dtoa_r+0x72e>
 80050ca:	4545      	cmp	r5, r8
 80050cc:	9a05      	ldr	r2, [sp, #20]
 80050ce:	462b      	mov	r3, r5
 80050d0:	bfa8      	it	ge
 80050d2:	4643      	movge	r3, r8
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	9205      	str	r2, [sp, #20]
 80050d8:	1aed      	subs	r5, r5, r3
 80050da:	eba8 0803 	sub.w	r8, r8, r3
 80050de:	9b07      	ldr	r3, [sp, #28]
 80050e0:	b1eb      	cbz	r3, 800511e <_dtoa_r+0x76e>
 80050e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d067      	beq.n	80051b8 <_dtoa_r+0x808>
 80050e8:	b18f      	cbz	r7, 800510e <_dtoa_r+0x75e>
 80050ea:	4631      	mov	r1, r6
 80050ec:	463a      	mov	r2, r7
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 fbaa 	bl	8005848 <__pow5mult>
 80050f4:	9a04      	ldr	r2, [sp, #16]
 80050f6:	4601      	mov	r1, r0
 80050f8:	4606      	mov	r6, r0
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 fb0e 	bl	800571c <__multiply>
 8005100:	9904      	ldr	r1, [sp, #16]
 8005102:	9008      	str	r0, [sp, #32]
 8005104:	4620      	mov	r0, r4
 8005106:	f000 fa60 	bl	80055ca <_Bfree>
 800510a:	9b08      	ldr	r3, [sp, #32]
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	9b07      	ldr	r3, [sp, #28]
 8005110:	1bda      	subs	r2, r3, r7
 8005112:	d004      	beq.n	800511e <_dtoa_r+0x76e>
 8005114:	9904      	ldr	r1, [sp, #16]
 8005116:	4620      	mov	r0, r4
 8005118:	f000 fb96 	bl	8005848 <__pow5mult>
 800511c:	9004      	str	r0, [sp, #16]
 800511e:	2101      	movs	r1, #1
 8005120:	4620      	mov	r0, r4
 8005122:	f000 faf2 	bl	800570a <__i2b>
 8005126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005128:	4607      	mov	r7, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81d0 	beq.w	80054d0 <_dtoa_r+0xb20>
 8005130:	461a      	mov	r2, r3
 8005132:	4601      	mov	r1, r0
 8005134:	4620      	mov	r0, r4
 8005136:	f000 fb87 	bl	8005848 <__pow5mult>
 800513a:	9b06      	ldr	r3, [sp, #24]
 800513c:	2b01      	cmp	r3, #1
 800513e:	4607      	mov	r7, r0
 8005140:	dc40      	bgt.n	80051c4 <_dtoa_r+0x814>
 8005142:	9b00      	ldr	r3, [sp, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d139      	bne.n	80051bc <_dtoa_r+0x80c>
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800514e:	2b00      	cmp	r3, #0
 8005150:	d136      	bne.n	80051c0 <_dtoa_r+0x810>
 8005152:	9b01      	ldr	r3, [sp, #4]
 8005154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005158:	0d1b      	lsrs	r3, r3, #20
 800515a:	051b      	lsls	r3, r3, #20
 800515c:	b12b      	cbz	r3, 800516a <_dtoa_r+0x7ba>
 800515e:	9b05      	ldr	r3, [sp, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	f108 0801 	add.w	r8, r8, #1
 8005168:	2301      	movs	r3, #1
 800516a:	9307      	str	r3, [sp, #28]
 800516c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800516e:	2b00      	cmp	r3, #0
 8005170:	d12a      	bne.n	80051c8 <_dtoa_r+0x818>
 8005172:	2001      	movs	r0, #1
 8005174:	e030      	b.n	80051d8 <_dtoa_r+0x828>
 8005176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005178:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800517c:	e795      	b.n	80050aa <_dtoa_r+0x6fa>
 800517e:	9b07      	ldr	r3, [sp, #28]
 8005180:	f109 37ff 	add.w	r7, r9, #4294967295
 8005184:	42bb      	cmp	r3, r7
 8005186:	bfbf      	itttt	lt
 8005188:	9b07      	ldrlt	r3, [sp, #28]
 800518a:	9707      	strlt	r7, [sp, #28]
 800518c:	1afa      	sublt	r2, r7, r3
 800518e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005190:	bfbb      	ittet	lt
 8005192:	189b      	addlt	r3, r3, r2
 8005194:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005196:	1bdf      	subge	r7, r3, r7
 8005198:	2700      	movlt	r7, #0
 800519a:	f1b9 0f00 	cmp.w	r9, #0
 800519e:	bfb5      	itete	lt
 80051a0:	9b05      	ldrlt	r3, [sp, #20]
 80051a2:	9d05      	ldrge	r5, [sp, #20]
 80051a4:	eba3 0509 	sublt.w	r5, r3, r9
 80051a8:	464b      	movge	r3, r9
 80051aa:	bfb8      	it	lt
 80051ac:	2300      	movlt	r3, #0
 80051ae:	e77e      	b.n	80050ae <_dtoa_r+0x6fe>
 80051b0:	9f07      	ldr	r7, [sp, #28]
 80051b2:	9d05      	ldr	r5, [sp, #20]
 80051b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80051b6:	e783      	b.n	80050c0 <_dtoa_r+0x710>
 80051b8:	9a07      	ldr	r2, [sp, #28]
 80051ba:	e7ab      	b.n	8005114 <_dtoa_r+0x764>
 80051bc:	2300      	movs	r3, #0
 80051be:	e7d4      	b.n	800516a <_dtoa_r+0x7ba>
 80051c0:	9b00      	ldr	r3, [sp, #0]
 80051c2:	e7d2      	b.n	800516a <_dtoa_r+0x7ba>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80051ce:	6918      	ldr	r0, [r3, #16]
 80051d0:	f000 fa4d 	bl	800566e <__hi0bits>
 80051d4:	f1c0 0020 	rsb	r0, r0, #32
 80051d8:	4440      	add	r0, r8
 80051da:	f010 001f 	ands.w	r0, r0, #31
 80051de:	d047      	beq.n	8005270 <_dtoa_r+0x8c0>
 80051e0:	f1c0 0320 	rsb	r3, r0, #32
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	dd3b      	ble.n	8005260 <_dtoa_r+0x8b0>
 80051e8:	9b05      	ldr	r3, [sp, #20]
 80051ea:	f1c0 001c 	rsb	r0, r0, #28
 80051ee:	4403      	add	r3, r0
 80051f0:	9305      	str	r3, [sp, #20]
 80051f2:	4405      	add	r5, r0
 80051f4:	4480      	add	r8, r0
 80051f6:	9b05      	ldr	r3, [sp, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dd05      	ble.n	8005208 <_dtoa_r+0x858>
 80051fc:	461a      	mov	r2, r3
 80051fe:	9904      	ldr	r1, [sp, #16]
 8005200:	4620      	mov	r0, r4
 8005202:	f000 fb6f 	bl	80058e4 <__lshift>
 8005206:	9004      	str	r0, [sp, #16]
 8005208:	f1b8 0f00 	cmp.w	r8, #0
 800520c:	dd05      	ble.n	800521a <_dtoa_r+0x86a>
 800520e:	4639      	mov	r1, r7
 8005210:	4642      	mov	r2, r8
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fb66 	bl	80058e4 <__lshift>
 8005218:	4607      	mov	r7, r0
 800521a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800521c:	b353      	cbz	r3, 8005274 <_dtoa_r+0x8c4>
 800521e:	4639      	mov	r1, r7
 8005220:	9804      	ldr	r0, [sp, #16]
 8005222:	f000 fbb3 	bl	800598c <__mcmp>
 8005226:	2800      	cmp	r0, #0
 8005228:	da24      	bge.n	8005274 <_dtoa_r+0x8c4>
 800522a:	2300      	movs	r3, #0
 800522c:	220a      	movs	r2, #10
 800522e:	9904      	ldr	r1, [sp, #16]
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f9e1 	bl	80055f8 <__multadd>
 8005236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005238:	9004      	str	r0, [sp, #16]
 800523a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 814d 	beq.w	80054de <_dtoa_r+0xb2e>
 8005244:	2300      	movs	r3, #0
 8005246:	4631      	mov	r1, r6
 8005248:	220a      	movs	r2, #10
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f9d4 	bl	80055f8 <__multadd>
 8005250:	9b02      	ldr	r3, [sp, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	4606      	mov	r6, r0
 8005256:	dc4f      	bgt.n	80052f8 <_dtoa_r+0x948>
 8005258:	9b06      	ldr	r3, [sp, #24]
 800525a:	2b02      	cmp	r3, #2
 800525c:	dd4c      	ble.n	80052f8 <_dtoa_r+0x948>
 800525e:	e011      	b.n	8005284 <_dtoa_r+0x8d4>
 8005260:	d0c9      	beq.n	80051f6 <_dtoa_r+0x846>
 8005262:	9a05      	ldr	r2, [sp, #20]
 8005264:	331c      	adds	r3, #28
 8005266:	441a      	add	r2, r3
 8005268:	9205      	str	r2, [sp, #20]
 800526a:	441d      	add	r5, r3
 800526c:	4498      	add	r8, r3
 800526e:	e7c2      	b.n	80051f6 <_dtoa_r+0x846>
 8005270:	4603      	mov	r3, r0
 8005272:	e7f6      	b.n	8005262 <_dtoa_r+0x8b2>
 8005274:	f1b9 0f00 	cmp.w	r9, #0
 8005278:	dc38      	bgt.n	80052ec <_dtoa_r+0x93c>
 800527a:	9b06      	ldr	r3, [sp, #24]
 800527c:	2b02      	cmp	r3, #2
 800527e:	dd35      	ble.n	80052ec <_dtoa_r+0x93c>
 8005280:	f8cd 9008 	str.w	r9, [sp, #8]
 8005284:	9b02      	ldr	r3, [sp, #8]
 8005286:	b963      	cbnz	r3, 80052a2 <_dtoa_r+0x8f2>
 8005288:	4639      	mov	r1, r7
 800528a:	2205      	movs	r2, #5
 800528c:	4620      	mov	r0, r4
 800528e:	f000 f9b3 	bl	80055f8 <__multadd>
 8005292:	4601      	mov	r1, r0
 8005294:	4607      	mov	r7, r0
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	f000 fb78 	bl	800598c <__mcmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	f73f adcc 	bgt.w	8004e3a <_dtoa_r+0x48a>
 80052a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a4:	465d      	mov	r5, fp
 80052a6:	ea6f 0a03 	mvn.w	sl, r3
 80052aa:	f04f 0900 	mov.w	r9, #0
 80052ae:	4639      	mov	r1, r7
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 f98a 	bl	80055ca <_Bfree>
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	f43f aeb7 	beq.w	800502a <_dtoa_r+0x67a>
 80052bc:	f1b9 0f00 	cmp.w	r9, #0
 80052c0:	d005      	beq.n	80052ce <_dtoa_r+0x91e>
 80052c2:	45b1      	cmp	r9, r6
 80052c4:	d003      	beq.n	80052ce <_dtoa_r+0x91e>
 80052c6:	4649      	mov	r1, r9
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 f97e 	bl	80055ca <_Bfree>
 80052ce:	4631      	mov	r1, r6
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 f97a 	bl	80055ca <_Bfree>
 80052d6:	e6a8      	b.n	800502a <_dtoa_r+0x67a>
 80052d8:	2700      	movs	r7, #0
 80052da:	463e      	mov	r6, r7
 80052dc:	e7e1      	b.n	80052a2 <_dtoa_r+0x8f2>
 80052de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80052e2:	463e      	mov	r6, r7
 80052e4:	e5a9      	b.n	8004e3a <_dtoa_r+0x48a>
 80052e6:	bf00      	nop
 80052e8:	40240000 	.word	0x40240000
 80052ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80fa 	beq.w	80054ec <_dtoa_r+0xb3c>
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	dd05      	ble.n	8005308 <_dtoa_r+0x958>
 80052fc:	4631      	mov	r1, r6
 80052fe:	462a      	mov	r2, r5
 8005300:	4620      	mov	r0, r4
 8005302:	f000 faef 	bl	80058e4 <__lshift>
 8005306:	4606      	mov	r6, r0
 8005308:	9b07      	ldr	r3, [sp, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04c      	beq.n	80053a8 <_dtoa_r+0x9f8>
 800530e:	6871      	ldr	r1, [r6, #4]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f926 	bl	8005562 <_Balloc>
 8005316:	6932      	ldr	r2, [r6, #16]
 8005318:	3202      	adds	r2, #2
 800531a:	4605      	mov	r5, r0
 800531c:	0092      	lsls	r2, r2, #2
 800531e:	f106 010c 	add.w	r1, r6, #12
 8005322:	300c      	adds	r0, #12
 8005324:	f000 f912 	bl	800554c <memcpy>
 8005328:	2201      	movs	r2, #1
 800532a:	4629      	mov	r1, r5
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fad9 	bl	80058e4 <__lshift>
 8005332:	9b00      	ldr	r3, [sp, #0]
 8005334:	f8cd b014 	str.w	fp, [sp, #20]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	46b1      	mov	r9, r6
 800533e:	9307      	str	r3, [sp, #28]
 8005340:	4606      	mov	r6, r0
 8005342:	4639      	mov	r1, r7
 8005344:	9804      	ldr	r0, [sp, #16]
 8005346:	f7ff faa5 	bl	8004894 <quorem>
 800534a:	4649      	mov	r1, r9
 800534c:	4605      	mov	r5, r0
 800534e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005352:	9804      	ldr	r0, [sp, #16]
 8005354:	f000 fb1a 	bl	800598c <__mcmp>
 8005358:	4632      	mov	r2, r6
 800535a:	9000      	str	r0, [sp, #0]
 800535c:	4639      	mov	r1, r7
 800535e:	4620      	mov	r0, r4
 8005360:	f000 fb2e 	bl	80059c0 <__mdiff>
 8005364:	68c3      	ldr	r3, [r0, #12]
 8005366:	4602      	mov	r2, r0
 8005368:	bb03      	cbnz	r3, 80053ac <_dtoa_r+0x9fc>
 800536a:	4601      	mov	r1, r0
 800536c:	9008      	str	r0, [sp, #32]
 800536e:	9804      	ldr	r0, [sp, #16]
 8005370:	f000 fb0c 	bl	800598c <__mcmp>
 8005374:	9a08      	ldr	r2, [sp, #32]
 8005376:	4603      	mov	r3, r0
 8005378:	4611      	mov	r1, r2
 800537a:	4620      	mov	r0, r4
 800537c:	9308      	str	r3, [sp, #32]
 800537e:	f000 f924 	bl	80055ca <_Bfree>
 8005382:	9b08      	ldr	r3, [sp, #32]
 8005384:	b9a3      	cbnz	r3, 80053b0 <_dtoa_r+0xa00>
 8005386:	9a06      	ldr	r2, [sp, #24]
 8005388:	b992      	cbnz	r2, 80053b0 <_dtoa_r+0xa00>
 800538a:	9a07      	ldr	r2, [sp, #28]
 800538c:	b982      	cbnz	r2, 80053b0 <_dtoa_r+0xa00>
 800538e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005392:	d029      	beq.n	80053e8 <_dtoa_r+0xa38>
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	dd01      	ble.n	800539e <_dtoa_r+0x9ee>
 800539a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	1c5d      	adds	r5, r3, #1
 80053a2:	f883 8000 	strb.w	r8, [r3]
 80053a6:	e782      	b.n	80052ae <_dtoa_r+0x8fe>
 80053a8:	4630      	mov	r0, r6
 80053aa:	e7c2      	b.n	8005332 <_dtoa_r+0x982>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e7e3      	b.n	8005378 <_dtoa_r+0x9c8>
 80053b0:	9a00      	ldr	r2, [sp, #0]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	db04      	blt.n	80053c0 <_dtoa_r+0xa10>
 80053b6:	d125      	bne.n	8005404 <_dtoa_r+0xa54>
 80053b8:	9a06      	ldr	r2, [sp, #24]
 80053ba:	bb1a      	cbnz	r2, 8005404 <_dtoa_r+0xa54>
 80053bc:	9a07      	ldr	r2, [sp, #28]
 80053be:	bb0a      	cbnz	r2, 8005404 <_dtoa_r+0xa54>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	ddec      	ble.n	800539e <_dtoa_r+0x9ee>
 80053c4:	2201      	movs	r2, #1
 80053c6:	9904      	ldr	r1, [sp, #16]
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fa8b 	bl	80058e4 <__lshift>
 80053ce:	4639      	mov	r1, r7
 80053d0:	9004      	str	r0, [sp, #16]
 80053d2:	f000 fadb 	bl	800598c <__mcmp>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	dc03      	bgt.n	80053e2 <_dtoa_r+0xa32>
 80053da:	d1e0      	bne.n	800539e <_dtoa_r+0x9ee>
 80053dc:	f018 0f01 	tst.w	r8, #1
 80053e0:	d0dd      	beq.n	800539e <_dtoa_r+0x9ee>
 80053e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80053e6:	d1d8      	bne.n	800539a <_dtoa_r+0x9ea>
 80053e8:	9b05      	ldr	r3, [sp, #20]
 80053ea:	9a05      	ldr	r2, [sp, #20]
 80053ec:	1c5d      	adds	r5, r3, #1
 80053ee:	2339      	movs	r3, #57	; 0x39
 80053f0:	7013      	strb	r3, [r2, #0]
 80053f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053f6:	2b39      	cmp	r3, #57	; 0x39
 80053f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80053fc:	d04f      	beq.n	800549e <_dtoa_r+0xaee>
 80053fe:	3301      	adds	r3, #1
 8005400:	7013      	strb	r3, [r2, #0]
 8005402:	e754      	b.n	80052ae <_dtoa_r+0x8fe>
 8005404:	9a05      	ldr	r2, [sp, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f102 0501 	add.w	r5, r2, #1
 800540c:	dd06      	ble.n	800541c <_dtoa_r+0xa6c>
 800540e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005412:	d0e9      	beq.n	80053e8 <_dtoa_r+0xa38>
 8005414:	f108 0801 	add.w	r8, r8, #1
 8005418:	9b05      	ldr	r3, [sp, #20]
 800541a:	e7c2      	b.n	80053a2 <_dtoa_r+0x9f2>
 800541c:	9a02      	ldr	r2, [sp, #8]
 800541e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005422:	eba5 030b 	sub.w	r3, r5, fp
 8005426:	4293      	cmp	r3, r2
 8005428:	d021      	beq.n	800546e <_dtoa_r+0xabe>
 800542a:	2300      	movs	r3, #0
 800542c:	220a      	movs	r2, #10
 800542e:	9904      	ldr	r1, [sp, #16]
 8005430:	4620      	mov	r0, r4
 8005432:	f000 f8e1 	bl	80055f8 <__multadd>
 8005436:	45b1      	cmp	r9, r6
 8005438:	9004      	str	r0, [sp, #16]
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f04f 020a 	mov.w	r2, #10
 8005442:	4649      	mov	r1, r9
 8005444:	4620      	mov	r0, r4
 8005446:	d105      	bne.n	8005454 <_dtoa_r+0xaa4>
 8005448:	f000 f8d6 	bl	80055f8 <__multadd>
 800544c:	4681      	mov	r9, r0
 800544e:	4606      	mov	r6, r0
 8005450:	9505      	str	r5, [sp, #20]
 8005452:	e776      	b.n	8005342 <_dtoa_r+0x992>
 8005454:	f000 f8d0 	bl	80055f8 <__multadd>
 8005458:	4631      	mov	r1, r6
 800545a:	4681      	mov	r9, r0
 800545c:	2300      	movs	r3, #0
 800545e:	220a      	movs	r2, #10
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f8c9 	bl	80055f8 <__multadd>
 8005466:	4606      	mov	r6, r0
 8005468:	e7f2      	b.n	8005450 <_dtoa_r+0xaa0>
 800546a:	f04f 0900 	mov.w	r9, #0
 800546e:	2201      	movs	r2, #1
 8005470:	9904      	ldr	r1, [sp, #16]
 8005472:	4620      	mov	r0, r4
 8005474:	f000 fa36 	bl	80058e4 <__lshift>
 8005478:	4639      	mov	r1, r7
 800547a:	9004      	str	r0, [sp, #16]
 800547c:	f000 fa86 	bl	800598c <__mcmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	dcb6      	bgt.n	80053f2 <_dtoa_r+0xa42>
 8005484:	d102      	bne.n	800548c <_dtoa_r+0xadc>
 8005486:	f018 0f01 	tst.w	r8, #1
 800548a:	d1b2      	bne.n	80053f2 <_dtoa_r+0xa42>
 800548c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	f105 32ff 	add.w	r2, r5, #4294967295
 8005496:	f47f af0a 	bne.w	80052ae <_dtoa_r+0x8fe>
 800549a:	4615      	mov	r5, r2
 800549c:	e7f6      	b.n	800548c <_dtoa_r+0xadc>
 800549e:	4593      	cmp	fp, r2
 80054a0:	d105      	bne.n	80054ae <_dtoa_r+0xafe>
 80054a2:	2331      	movs	r3, #49	; 0x31
 80054a4:	f10a 0a01 	add.w	sl, sl, #1
 80054a8:	f88b 3000 	strb.w	r3, [fp]
 80054ac:	e6ff      	b.n	80052ae <_dtoa_r+0x8fe>
 80054ae:	4615      	mov	r5, r2
 80054b0:	e79f      	b.n	80053f2 <_dtoa_r+0xa42>
 80054b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005518 <_dtoa_r+0xb68>
 80054b6:	e007      	b.n	80054c8 <_dtoa_r+0xb18>
 80054b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800551c <_dtoa_r+0xb6c>
 80054be:	b11b      	cbz	r3, 80054c8 <_dtoa_r+0xb18>
 80054c0:	f10b 0308 	add.w	r3, fp, #8
 80054c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4658      	mov	r0, fp
 80054ca:	b017      	add	sp, #92	; 0x5c
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	9b06      	ldr	r3, [sp, #24]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f77f ae35 	ble.w	8005142 <_dtoa_r+0x792>
 80054d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054da:	9307      	str	r3, [sp, #28]
 80054dc:	e649      	b.n	8005172 <_dtoa_r+0x7c2>
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc03      	bgt.n	80054ec <_dtoa_r+0xb3c>
 80054e4:	9b06      	ldr	r3, [sp, #24]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	f73f aecc 	bgt.w	8005284 <_dtoa_r+0x8d4>
 80054ec:	465d      	mov	r5, fp
 80054ee:	4639      	mov	r1, r7
 80054f0:	9804      	ldr	r0, [sp, #16]
 80054f2:	f7ff f9cf 	bl	8004894 <quorem>
 80054f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054fa:	f805 8b01 	strb.w	r8, [r5], #1
 80054fe:	9a02      	ldr	r2, [sp, #8]
 8005500:	eba5 030b 	sub.w	r3, r5, fp
 8005504:	429a      	cmp	r2, r3
 8005506:	ddb0      	ble.n	800546a <_dtoa_r+0xaba>
 8005508:	2300      	movs	r3, #0
 800550a:	220a      	movs	r2, #10
 800550c:	9904      	ldr	r1, [sp, #16]
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f872 	bl	80055f8 <__multadd>
 8005514:	9004      	str	r0, [sp, #16]
 8005516:	e7ea      	b.n	80054ee <_dtoa_r+0xb3e>
 8005518:	08006070 	.word	0x08006070
 800551c:	08006094 	.word	0x08006094

08005520 <_localeconv_r>:
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <_localeconv_r+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6a18      	ldr	r0, [r3, #32]
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <_localeconv_r+0x18>)
 8005528:	2800      	cmp	r0, #0
 800552a:	bf08      	it	eq
 800552c:	4618      	moveq	r0, r3
 800552e:	30f0      	adds	r0, #240	; 0xf0
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c
 8005538:	20000070 	.word	0x20000070

0800553c <malloc>:
 800553c:	4b02      	ldr	r3, [pc, #8]	; (8005548 <malloc+0xc>)
 800553e:	4601      	mov	r1, r0
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	f000 bb45 	b.w	8005bd0 <_malloc_r>
 8005546:	bf00      	nop
 8005548:	2000000c 	.word	0x2000000c

0800554c <memcpy>:
 800554c:	b510      	push	{r4, lr}
 800554e:	1e43      	subs	r3, r0, #1
 8005550:	440a      	add	r2, r1
 8005552:	4291      	cmp	r1, r2
 8005554:	d100      	bne.n	8005558 <memcpy+0xc>
 8005556:	bd10      	pop	{r4, pc}
 8005558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005560:	e7f7      	b.n	8005552 <memcpy+0x6>

08005562 <_Balloc>:
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005566:	4604      	mov	r4, r0
 8005568:	460e      	mov	r6, r1
 800556a:	b93d      	cbnz	r5, 800557c <_Balloc+0x1a>
 800556c:	2010      	movs	r0, #16
 800556e:	f7ff ffe5 	bl	800553c <malloc>
 8005572:	6260      	str	r0, [r4, #36]	; 0x24
 8005574:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005578:	6005      	str	r5, [r0, #0]
 800557a:	60c5      	str	r5, [r0, #12]
 800557c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800557e:	68eb      	ldr	r3, [r5, #12]
 8005580:	b183      	cbz	r3, 80055a4 <_Balloc+0x42>
 8005582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800558a:	b9b8      	cbnz	r0, 80055bc <_Balloc+0x5a>
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f506 	lsl.w	r5, r1, r6
 8005592:	1d6a      	adds	r2, r5, #5
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	4620      	mov	r0, r4
 8005598:	f000 fabe 	bl	8005b18 <_calloc_r>
 800559c:	b160      	cbz	r0, 80055b8 <_Balloc+0x56>
 800559e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80055a2:	e00e      	b.n	80055c2 <_Balloc+0x60>
 80055a4:	2221      	movs	r2, #33	; 0x21
 80055a6:	2104      	movs	r1, #4
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fab5 	bl	8005b18 <_calloc_r>
 80055ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b0:	60e8      	str	r0, [r5, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e4      	bne.n	8005582 <_Balloc+0x20>
 80055b8:	2000      	movs	r0, #0
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	6802      	ldr	r2, [r0, #0]
 80055be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80055c2:	2300      	movs	r3, #0
 80055c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055c8:	e7f7      	b.n	80055ba <_Balloc+0x58>

080055ca <_Bfree>:
 80055ca:	b570      	push	{r4, r5, r6, lr}
 80055cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055ce:	4606      	mov	r6, r0
 80055d0:	460d      	mov	r5, r1
 80055d2:	b93c      	cbnz	r4, 80055e4 <_Bfree+0x1a>
 80055d4:	2010      	movs	r0, #16
 80055d6:	f7ff ffb1 	bl	800553c <malloc>
 80055da:	6270      	str	r0, [r6, #36]	; 0x24
 80055dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055e0:	6004      	str	r4, [r0, #0]
 80055e2:	60c4      	str	r4, [r0, #12]
 80055e4:	b13d      	cbz	r5, 80055f6 <_Bfree+0x2c>
 80055e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80055e8:	686a      	ldr	r2, [r5, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055f0:	6029      	str	r1, [r5, #0]
 80055f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80055f6:	bd70      	pop	{r4, r5, r6, pc}

080055f8 <__multadd>:
 80055f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fc:	690d      	ldr	r5, [r1, #16]
 80055fe:	461f      	mov	r7, r3
 8005600:	4606      	mov	r6, r0
 8005602:	460c      	mov	r4, r1
 8005604:	f101 0c14 	add.w	ip, r1, #20
 8005608:	2300      	movs	r3, #0
 800560a:	f8dc 0000 	ldr.w	r0, [ip]
 800560e:	b281      	uxth	r1, r0
 8005610:	fb02 7101 	mla	r1, r2, r1, r7
 8005614:	0c0f      	lsrs	r7, r1, #16
 8005616:	0c00      	lsrs	r0, r0, #16
 8005618:	fb02 7000 	mla	r0, r2, r0, r7
 800561c:	b289      	uxth	r1, r1
 800561e:	3301      	adds	r3, #1
 8005620:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005624:	429d      	cmp	r5, r3
 8005626:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800562a:	f84c 1b04 	str.w	r1, [ip], #4
 800562e:	dcec      	bgt.n	800560a <__multadd+0x12>
 8005630:	b1d7      	cbz	r7, 8005668 <__multadd+0x70>
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc12      	bgt.n	800565e <__multadd+0x66>
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	4630      	mov	r0, r6
 800563c:	3101      	adds	r1, #1
 800563e:	f7ff ff90 	bl	8005562 <_Balloc>
 8005642:	6922      	ldr	r2, [r4, #16]
 8005644:	3202      	adds	r2, #2
 8005646:	f104 010c 	add.w	r1, r4, #12
 800564a:	4680      	mov	r8, r0
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	300c      	adds	r0, #12
 8005650:	f7ff ff7c 	bl	800554c <memcpy>
 8005654:	4621      	mov	r1, r4
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff ffb7 	bl	80055ca <_Bfree>
 800565c:	4644      	mov	r4, r8
 800565e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005662:	3501      	adds	r5, #1
 8005664:	615f      	str	r7, [r3, #20]
 8005666:	6125      	str	r5, [r4, #16]
 8005668:	4620      	mov	r0, r4
 800566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800566e <__hi0bits>:
 800566e:	0c02      	lsrs	r2, r0, #16
 8005670:	0412      	lsls	r2, r2, #16
 8005672:	4603      	mov	r3, r0
 8005674:	b9b2      	cbnz	r2, 80056a4 <__hi0bits+0x36>
 8005676:	0403      	lsls	r3, r0, #16
 8005678:	2010      	movs	r0, #16
 800567a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800567e:	bf04      	itt	eq
 8005680:	021b      	lsleq	r3, r3, #8
 8005682:	3008      	addeq	r0, #8
 8005684:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005688:	bf04      	itt	eq
 800568a:	011b      	lsleq	r3, r3, #4
 800568c:	3004      	addeq	r0, #4
 800568e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005692:	bf04      	itt	eq
 8005694:	009b      	lsleq	r3, r3, #2
 8005696:	3002      	addeq	r0, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	db06      	blt.n	80056aa <__hi0bits+0x3c>
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	d503      	bpl.n	80056a8 <__hi0bits+0x3a>
 80056a0:	3001      	adds	r0, #1
 80056a2:	4770      	bx	lr
 80056a4:	2000      	movs	r0, #0
 80056a6:	e7e8      	b.n	800567a <__hi0bits+0xc>
 80056a8:	2020      	movs	r0, #32
 80056aa:	4770      	bx	lr

080056ac <__lo0bits>:
 80056ac:	6803      	ldr	r3, [r0, #0]
 80056ae:	f013 0207 	ands.w	r2, r3, #7
 80056b2:	4601      	mov	r1, r0
 80056b4:	d00b      	beq.n	80056ce <__lo0bits+0x22>
 80056b6:	07da      	lsls	r2, r3, #31
 80056b8:	d423      	bmi.n	8005702 <__lo0bits+0x56>
 80056ba:	0798      	lsls	r0, r3, #30
 80056bc:	bf49      	itett	mi
 80056be:	085b      	lsrmi	r3, r3, #1
 80056c0:	089b      	lsrpl	r3, r3, #2
 80056c2:	2001      	movmi	r0, #1
 80056c4:	600b      	strmi	r3, [r1, #0]
 80056c6:	bf5c      	itt	pl
 80056c8:	600b      	strpl	r3, [r1, #0]
 80056ca:	2002      	movpl	r0, #2
 80056cc:	4770      	bx	lr
 80056ce:	b298      	uxth	r0, r3
 80056d0:	b9a8      	cbnz	r0, 80056fe <__lo0bits+0x52>
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	2010      	movs	r0, #16
 80056d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80056da:	bf04      	itt	eq
 80056dc:	0a1b      	lsreq	r3, r3, #8
 80056de:	3008      	addeq	r0, #8
 80056e0:	071a      	lsls	r2, r3, #28
 80056e2:	bf04      	itt	eq
 80056e4:	091b      	lsreq	r3, r3, #4
 80056e6:	3004      	addeq	r0, #4
 80056e8:	079a      	lsls	r2, r3, #30
 80056ea:	bf04      	itt	eq
 80056ec:	089b      	lsreq	r3, r3, #2
 80056ee:	3002      	addeq	r0, #2
 80056f0:	07da      	lsls	r2, r3, #31
 80056f2:	d402      	bmi.n	80056fa <__lo0bits+0x4e>
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	d006      	beq.n	8005706 <__lo0bits+0x5a>
 80056f8:	3001      	adds	r0, #1
 80056fa:	600b      	str	r3, [r1, #0]
 80056fc:	4770      	bx	lr
 80056fe:	4610      	mov	r0, r2
 8005700:	e7e9      	b.n	80056d6 <__lo0bits+0x2a>
 8005702:	2000      	movs	r0, #0
 8005704:	4770      	bx	lr
 8005706:	2020      	movs	r0, #32
 8005708:	4770      	bx	lr

0800570a <__i2b>:
 800570a:	b510      	push	{r4, lr}
 800570c:	460c      	mov	r4, r1
 800570e:	2101      	movs	r1, #1
 8005710:	f7ff ff27 	bl	8005562 <_Balloc>
 8005714:	2201      	movs	r2, #1
 8005716:	6144      	str	r4, [r0, #20]
 8005718:	6102      	str	r2, [r0, #16]
 800571a:	bd10      	pop	{r4, pc}

0800571c <__multiply>:
 800571c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	4614      	mov	r4, r2
 8005722:	690a      	ldr	r2, [r1, #16]
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	bfb8      	it	lt
 800572a:	460b      	movlt	r3, r1
 800572c:	4688      	mov	r8, r1
 800572e:	bfbc      	itt	lt
 8005730:	46a0      	movlt	r8, r4
 8005732:	461c      	movlt	r4, r3
 8005734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005738:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800573c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005740:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005744:	eb07 0609 	add.w	r6, r7, r9
 8005748:	42b3      	cmp	r3, r6
 800574a:	bfb8      	it	lt
 800574c:	3101      	addlt	r1, #1
 800574e:	f7ff ff08 	bl	8005562 <_Balloc>
 8005752:	f100 0514 	add.w	r5, r0, #20
 8005756:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800575a:	462b      	mov	r3, r5
 800575c:	2200      	movs	r2, #0
 800575e:	4573      	cmp	r3, lr
 8005760:	d316      	bcc.n	8005790 <__multiply+0x74>
 8005762:	f104 0214 	add.w	r2, r4, #20
 8005766:	f108 0114 	add.w	r1, r8, #20
 800576a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800576e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	9b00      	ldr	r3, [sp, #0]
 8005776:	9201      	str	r2, [sp, #4]
 8005778:	4293      	cmp	r3, r2
 800577a:	d80c      	bhi.n	8005796 <__multiply+0x7a>
 800577c:	2e00      	cmp	r6, #0
 800577e:	dd03      	ble.n	8005788 <__multiply+0x6c>
 8005780:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05d      	beq.n	8005844 <__multiply+0x128>
 8005788:	6106      	str	r6, [r0, #16]
 800578a:	b003      	add	sp, #12
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	f843 2b04 	str.w	r2, [r3], #4
 8005794:	e7e3      	b.n	800575e <__multiply+0x42>
 8005796:	f8b2 b000 	ldrh.w	fp, [r2]
 800579a:	f1bb 0f00 	cmp.w	fp, #0
 800579e:	d023      	beq.n	80057e8 <__multiply+0xcc>
 80057a0:	4689      	mov	r9, r1
 80057a2:	46ac      	mov	ip, r5
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80057ac:	f8dc a000 	ldr.w	sl, [ip]
 80057b0:	b2a3      	uxth	r3, r4
 80057b2:	fa1f fa8a 	uxth.w	sl, sl
 80057b6:	fb0b a303 	mla	r3, fp, r3, sl
 80057ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80057be:	f8dc 4000 	ldr.w	r4, [ip]
 80057c2:	4443      	add	r3, r8
 80057c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80057c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80057cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80057d0:	46e2      	mov	sl, ip
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80057d8:	454f      	cmp	r7, r9
 80057da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80057de:	f84a 3b04 	str.w	r3, [sl], #4
 80057e2:	d82b      	bhi.n	800583c <__multiply+0x120>
 80057e4:	f8cc 8004 	str.w	r8, [ip, #4]
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80057ee:	3204      	adds	r2, #4
 80057f0:	f1ba 0f00 	cmp.w	sl, #0
 80057f4:	d020      	beq.n	8005838 <__multiply+0x11c>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	4689      	mov	r9, r1
 80057fa:	46a8      	mov	r8, r5
 80057fc:	f04f 0b00 	mov.w	fp, #0
 8005800:	f8b9 c000 	ldrh.w	ip, [r9]
 8005804:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005808:	fb0a 440c 	mla	r4, sl, ip, r4
 800580c:	445c      	add	r4, fp
 800580e:	46c4      	mov	ip, r8
 8005810:	b29b      	uxth	r3, r3
 8005812:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005816:	f84c 3b04 	str.w	r3, [ip], #4
 800581a:	f859 3b04 	ldr.w	r3, [r9], #4
 800581e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	fb0a b303 	mla	r3, sl, r3, fp
 8005828:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800582c:	454f      	cmp	r7, r9
 800582e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005832:	d805      	bhi.n	8005840 <__multiply+0x124>
 8005834:	f8c8 3004 	str.w	r3, [r8, #4]
 8005838:	3504      	adds	r5, #4
 800583a:	e79b      	b.n	8005774 <__multiply+0x58>
 800583c:	46d4      	mov	ip, sl
 800583e:	e7b3      	b.n	80057a8 <__multiply+0x8c>
 8005840:	46e0      	mov	r8, ip
 8005842:	e7dd      	b.n	8005800 <__multiply+0xe4>
 8005844:	3e01      	subs	r6, #1
 8005846:	e799      	b.n	800577c <__multiply+0x60>

08005848 <__pow5mult>:
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584c:	4615      	mov	r5, r2
 800584e:	f012 0203 	ands.w	r2, r2, #3
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	d007      	beq.n	8005868 <__pow5mult+0x20>
 8005858:	3a01      	subs	r2, #1
 800585a:	4c21      	ldr	r4, [pc, #132]	; (80058e0 <__pow5mult+0x98>)
 800585c:	2300      	movs	r3, #0
 800585e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005862:	f7ff fec9 	bl	80055f8 <__multadd>
 8005866:	4607      	mov	r7, r0
 8005868:	10ad      	asrs	r5, r5, #2
 800586a:	d035      	beq.n	80058d8 <__pow5mult+0x90>
 800586c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800586e:	b93c      	cbnz	r4, 8005880 <__pow5mult+0x38>
 8005870:	2010      	movs	r0, #16
 8005872:	f7ff fe63 	bl	800553c <malloc>
 8005876:	6270      	str	r0, [r6, #36]	; 0x24
 8005878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800587c:	6004      	str	r4, [r0, #0]
 800587e:	60c4      	str	r4, [r0, #12]
 8005880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005888:	b94c      	cbnz	r4, 800589e <__pow5mult+0x56>
 800588a:	f240 2171 	movw	r1, #625	; 0x271
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ff3b 	bl	800570a <__i2b>
 8005894:	2300      	movs	r3, #0
 8005896:	f8c8 0008 	str.w	r0, [r8, #8]
 800589a:	4604      	mov	r4, r0
 800589c:	6003      	str	r3, [r0, #0]
 800589e:	f04f 0800 	mov.w	r8, #0
 80058a2:	07eb      	lsls	r3, r5, #31
 80058a4:	d50a      	bpl.n	80058bc <__pow5mult+0x74>
 80058a6:	4639      	mov	r1, r7
 80058a8:	4622      	mov	r2, r4
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ff36 	bl	800571c <__multiply>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4681      	mov	r9, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff fe88 	bl	80055ca <_Bfree>
 80058ba:	464f      	mov	r7, r9
 80058bc:	106d      	asrs	r5, r5, #1
 80058be:	d00b      	beq.n	80058d8 <__pow5mult+0x90>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	b938      	cbnz	r0, 80058d4 <__pow5mult+0x8c>
 80058c4:	4622      	mov	r2, r4
 80058c6:	4621      	mov	r1, r4
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff ff27 	bl	800571c <__multiply>
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	f8c0 8000 	str.w	r8, [r0]
 80058d4:	4604      	mov	r4, r0
 80058d6:	e7e4      	b.n	80058a2 <__pow5mult+0x5a>
 80058d8:	4638      	mov	r0, r7
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058de:	bf00      	nop
 80058e0:	08006198 	.word	0x08006198

080058e4 <__lshift>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	6849      	ldr	r1, [r1, #4]
 80058f2:	eb0a 0903 	add.w	r9, sl, r3
 80058f6:	68a3      	ldr	r3, [r4, #8]
 80058f8:	4607      	mov	r7, r0
 80058fa:	4616      	mov	r6, r2
 80058fc:	f109 0501 	add.w	r5, r9, #1
 8005900:	42ab      	cmp	r3, r5
 8005902:	db32      	blt.n	800596a <__lshift+0x86>
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff fe2c 	bl	8005562 <_Balloc>
 800590a:	2300      	movs	r3, #0
 800590c:	4680      	mov	r8, r0
 800590e:	f100 0114 	add.w	r1, r0, #20
 8005912:	461a      	mov	r2, r3
 8005914:	4553      	cmp	r3, sl
 8005916:	db2b      	blt.n	8005970 <__lshift+0x8c>
 8005918:	6920      	ldr	r0, [r4, #16]
 800591a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800591e:	f104 0314 	add.w	r3, r4, #20
 8005922:	f016 021f 	ands.w	r2, r6, #31
 8005926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800592a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800592e:	d025      	beq.n	800597c <__lshift+0x98>
 8005930:	f1c2 0e20 	rsb	lr, r2, #32
 8005934:	2000      	movs	r0, #0
 8005936:	681e      	ldr	r6, [r3, #0]
 8005938:	468a      	mov	sl, r1
 800593a:	4096      	lsls	r6, r2
 800593c:	4330      	orrs	r0, r6
 800593e:	f84a 0b04 	str.w	r0, [sl], #4
 8005942:	f853 0b04 	ldr.w	r0, [r3], #4
 8005946:	459c      	cmp	ip, r3
 8005948:	fa20 f00e 	lsr.w	r0, r0, lr
 800594c:	d814      	bhi.n	8005978 <__lshift+0x94>
 800594e:	6048      	str	r0, [r1, #4]
 8005950:	b108      	cbz	r0, 8005956 <__lshift+0x72>
 8005952:	f109 0502 	add.w	r5, r9, #2
 8005956:	3d01      	subs	r5, #1
 8005958:	4638      	mov	r0, r7
 800595a:	f8c8 5010 	str.w	r5, [r8, #16]
 800595e:	4621      	mov	r1, r4
 8005960:	f7ff fe33 	bl	80055ca <_Bfree>
 8005964:	4640      	mov	r0, r8
 8005966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596a:	3101      	adds	r1, #1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	e7c7      	b.n	8005900 <__lshift+0x1c>
 8005970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005974:	3301      	adds	r3, #1
 8005976:	e7cd      	b.n	8005914 <__lshift+0x30>
 8005978:	4651      	mov	r1, sl
 800597a:	e7dc      	b.n	8005936 <__lshift+0x52>
 800597c:	3904      	subs	r1, #4
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	f841 2f04 	str.w	r2, [r1, #4]!
 8005986:	459c      	cmp	ip, r3
 8005988:	d8f9      	bhi.n	800597e <__lshift+0x9a>
 800598a:	e7e4      	b.n	8005956 <__lshift+0x72>

0800598c <__mcmp>:
 800598c:	6903      	ldr	r3, [r0, #16]
 800598e:	690a      	ldr	r2, [r1, #16]
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	b530      	push	{r4, r5, lr}
 8005994:	d10c      	bne.n	80059b0 <__mcmp+0x24>
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	3014      	adds	r0, #20
 800599a:	3114      	adds	r1, #20
 800599c:	1884      	adds	r4, r0, r2
 800599e:	4411      	add	r1, r2
 80059a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059a8:	4295      	cmp	r5, r2
 80059aa:	d003      	beq.n	80059b4 <__mcmp+0x28>
 80059ac:	d305      	bcc.n	80059ba <__mcmp+0x2e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	42a0      	cmp	r0, r4
 80059b6:	d3f3      	bcc.n	80059a0 <__mcmp+0x14>
 80059b8:	e7fa      	b.n	80059b0 <__mcmp+0x24>
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	e7f7      	b.n	80059b0 <__mcmp+0x24>

080059c0 <__mdiff>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	460d      	mov	r5, r1
 80059c6:	4607      	mov	r7, r0
 80059c8:	4611      	mov	r1, r2
 80059ca:	4628      	mov	r0, r5
 80059cc:	4614      	mov	r4, r2
 80059ce:	f7ff ffdd 	bl	800598c <__mcmp>
 80059d2:	1e06      	subs	r6, r0, #0
 80059d4:	d108      	bne.n	80059e8 <__mdiff+0x28>
 80059d6:	4631      	mov	r1, r6
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff fdc2 	bl	8005562 <_Balloc>
 80059de:	2301      	movs	r3, #1
 80059e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80059e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e8:	bfa4      	itt	ge
 80059ea:	4623      	movge	r3, r4
 80059ec:	462c      	movge	r4, r5
 80059ee:	4638      	mov	r0, r7
 80059f0:	6861      	ldr	r1, [r4, #4]
 80059f2:	bfa6      	itte	ge
 80059f4:	461d      	movge	r5, r3
 80059f6:	2600      	movge	r6, #0
 80059f8:	2601      	movlt	r6, #1
 80059fa:	f7ff fdb2 	bl	8005562 <_Balloc>
 80059fe:	692b      	ldr	r3, [r5, #16]
 8005a00:	60c6      	str	r6, [r0, #12]
 8005a02:	6926      	ldr	r6, [r4, #16]
 8005a04:	f105 0914 	add.w	r9, r5, #20
 8005a08:	f104 0214 	add.w	r2, r4, #20
 8005a0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005a10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005a14:	f100 0514 	add.w	r5, r0, #20
 8005a18:	f04f 0e00 	mov.w	lr, #0
 8005a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005a20:	f859 4b04 	ldr.w	r4, [r9], #4
 8005a24:	fa1e f18a 	uxtah	r1, lr, sl
 8005a28:	b2a3      	uxth	r3, r4
 8005a2a:	1ac9      	subs	r1, r1, r3
 8005a2c:	0c23      	lsrs	r3, r4, #16
 8005a2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005a32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005a36:	b289      	uxth	r1, r1
 8005a38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005a3c:	45c8      	cmp	r8, r9
 8005a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005a42:	4694      	mov	ip, r2
 8005a44:	f845 3b04 	str.w	r3, [r5], #4
 8005a48:	d8e8      	bhi.n	8005a1c <__mdiff+0x5c>
 8005a4a:	45bc      	cmp	ip, r7
 8005a4c:	d304      	bcc.n	8005a58 <__mdiff+0x98>
 8005a4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005a52:	b183      	cbz	r3, 8005a76 <__mdiff+0xb6>
 8005a54:	6106      	str	r6, [r0, #16]
 8005a56:	e7c5      	b.n	80059e4 <__mdiff+0x24>
 8005a58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005a5c:	fa1e f381 	uxtah	r3, lr, r1
 8005a60:	141a      	asrs	r2, r3, #16
 8005a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005a70:	f845 3b04 	str.w	r3, [r5], #4
 8005a74:	e7e9      	b.n	8005a4a <__mdiff+0x8a>
 8005a76:	3e01      	subs	r6, #1
 8005a78:	e7e9      	b.n	8005a4e <__mdiff+0x8e>

08005a7a <__d2b>:
 8005a7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a7e:	460e      	mov	r6, r1
 8005a80:	2101      	movs	r1, #1
 8005a82:	ec59 8b10 	vmov	r8, r9, d0
 8005a86:	4615      	mov	r5, r2
 8005a88:	f7ff fd6b 	bl	8005562 <_Balloc>
 8005a8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a90:	4607      	mov	r7, r0
 8005a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a96:	bb34      	cbnz	r4, 8005ae6 <__d2b+0x6c>
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f1b8 0300 	subs.w	r3, r8, #0
 8005a9e:	d027      	beq.n	8005af0 <__d2b+0x76>
 8005aa0:	a802      	add	r0, sp, #8
 8005aa2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005aa6:	f7ff fe01 	bl	80056ac <__lo0bits>
 8005aaa:	9900      	ldr	r1, [sp, #0]
 8005aac:	b1f0      	cbz	r0, 8005aec <__d2b+0x72>
 8005aae:	9a01      	ldr	r2, [sp, #4]
 8005ab0:	f1c0 0320 	rsb	r3, r0, #32
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	40c2      	lsrs	r2, r0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	9b01      	ldr	r3, [sp, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf14      	ite	ne
 8005ac8:	2102      	movne	r1, #2
 8005aca:	2101      	moveq	r1, #1
 8005acc:	6139      	str	r1, [r7, #16]
 8005ace:	b1c4      	cbz	r4, 8005b02 <__d2b+0x88>
 8005ad0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005ad4:	4404      	add	r4, r0
 8005ad6:	6034      	str	r4, [r6, #0]
 8005ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005adc:	6028      	str	r0, [r5, #0]
 8005ade:	4638      	mov	r0, r7
 8005ae0:	b003      	add	sp, #12
 8005ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aea:	e7d5      	b.n	8005a98 <__d2b+0x1e>
 8005aec:	6179      	str	r1, [r7, #20]
 8005aee:	e7e7      	b.n	8005ac0 <__d2b+0x46>
 8005af0:	a801      	add	r0, sp, #4
 8005af2:	f7ff fddb 	bl	80056ac <__lo0bits>
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	2101      	movs	r1, #1
 8005afc:	6139      	str	r1, [r7, #16]
 8005afe:	3020      	adds	r0, #32
 8005b00:	e7e5      	b.n	8005ace <__d2b+0x54>
 8005b02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005b06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b0a:	6030      	str	r0, [r6, #0]
 8005b0c:	6918      	ldr	r0, [r3, #16]
 8005b0e:	f7ff fdae 	bl	800566e <__hi0bits>
 8005b12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005b16:	e7e1      	b.n	8005adc <__d2b+0x62>

08005b18 <_calloc_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	fb02 f401 	mul.w	r4, r2, r1
 8005b1e:	4621      	mov	r1, r4
 8005b20:	f000 f856 	bl	8005bd0 <_malloc_r>
 8005b24:	4605      	mov	r5, r0
 8005b26:	b118      	cbz	r0, 8005b30 <_calloc_r+0x18>
 8005b28:	4622      	mov	r2, r4
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f7fe fa2e 	bl	8003f8c <memset>
 8005b30:	4628      	mov	r0, r5
 8005b32:	bd38      	pop	{r3, r4, r5, pc}

08005b34 <_free_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4605      	mov	r5, r0
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	d045      	beq.n	8005bc8 <_free_r+0x94>
 8005b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b40:	1f0c      	subs	r4, r1, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bfb8      	it	lt
 8005b46:	18e4      	addlt	r4, r4, r3
 8005b48:	f000 fa29 	bl	8005f9e <__malloc_lock>
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <_free_r+0x98>)
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	4610      	mov	r0, r2
 8005b52:	b933      	cbnz	r3, 8005b62 <_free_r+0x2e>
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	6014      	str	r4, [r2, #0]
 8005b58:	4628      	mov	r0, r5
 8005b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b5e:	f000 ba1f 	b.w	8005fa0 <__malloc_unlock>
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	d90c      	bls.n	8005b80 <_free_r+0x4c>
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	1862      	adds	r2, r4, r1
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	bf04      	itt	eq
 8005b6e:	681a      	ldreq	r2, [r3, #0]
 8005b70:	685b      	ldreq	r3, [r3, #4]
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	bf04      	itt	eq
 8005b76:	1852      	addeq	r2, r2, r1
 8005b78:	6022      	streq	r2, [r4, #0]
 8005b7a:	6004      	str	r4, [r0, #0]
 8005b7c:	e7ec      	b.n	8005b58 <_free_r+0x24>
 8005b7e:	4613      	mov	r3, r2
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	b10a      	cbz	r2, 8005b88 <_free_r+0x54>
 8005b84:	42a2      	cmp	r2, r4
 8005b86:	d9fa      	bls.n	8005b7e <_free_r+0x4a>
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	1858      	adds	r0, r3, r1
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	d10b      	bne.n	8005ba8 <_free_r+0x74>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	4401      	add	r1, r0
 8005b94:	1858      	adds	r0, r3, r1
 8005b96:	4282      	cmp	r2, r0
 8005b98:	6019      	str	r1, [r3, #0]
 8005b9a:	d1dd      	bne.n	8005b58 <_free_r+0x24>
 8005b9c:	6810      	ldr	r0, [r2, #0]
 8005b9e:	6852      	ldr	r2, [r2, #4]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	6019      	str	r1, [r3, #0]
 8005ba6:	e7d7      	b.n	8005b58 <_free_r+0x24>
 8005ba8:	d902      	bls.n	8005bb0 <_free_r+0x7c>
 8005baa:	230c      	movs	r3, #12
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	e7d3      	b.n	8005b58 <_free_r+0x24>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428a      	cmp	r2, r1
 8005bb6:	bf04      	itt	eq
 8005bb8:	6811      	ldreq	r1, [r2, #0]
 8005bba:	6852      	ldreq	r2, [r2, #4]
 8005bbc:	6062      	str	r2, [r4, #4]
 8005bbe:	bf04      	itt	eq
 8005bc0:	1809      	addeq	r1, r1, r0
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	605c      	str	r4, [r3, #4]
 8005bc6:	e7c7      	b.n	8005b58 <_free_r+0x24>
 8005bc8:	bd38      	pop	{r3, r4, r5, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000200 	.word	0x20000200

08005bd0 <_malloc_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	1ccd      	adds	r5, r1, #3
 8005bd4:	f025 0503 	bic.w	r5, r5, #3
 8005bd8:	3508      	adds	r5, #8
 8005bda:	2d0c      	cmp	r5, #12
 8005bdc:	bf38      	it	cc
 8005bde:	250c      	movcc	r5, #12
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	4606      	mov	r6, r0
 8005be4:	db01      	blt.n	8005bea <_malloc_r+0x1a>
 8005be6:	42a9      	cmp	r1, r5
 8005be8:	d903      	bls.n	8005bf2 <_malloc_r+0x22>
 8005bea:	230c      	movs	r3, #12
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	2000      	movs	r0, #0
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	f000 f9d4 	bl	8005f9e <__malloc_lock>
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <_malloc_r+0xac>)
 8005bf8:	6814      	ldr	r4, [r2, #0]
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	b991      	cbnz	r1, 8005c24 <_malloc_r+0x54>
 8005bfe:	4c20      	ldr	r4, [pc, #128]	; (8005c80 <_malloc_r+0xb0>)
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	b91b      	cbnz	r3, 8005c0c <_malloc_r+0x3c>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f000 f98f 	bl	8005f28 <_sbrk_r>
 8005c0a:	6020      	str	r0, [r4, #0]
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 f98a 	bl	8005f28 <_sbrk_r>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d124      	bne.n	8005c62 <_malloc_r+0x92>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	6033      	str	r3, [r6, #0]
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f000 f9bf 	bl	8005fa0 <__malloc_unlock>
 8005c22:	e7e4      	b.n	8005bee <_malloc_r+0x1e>
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	1b5b      	subs	r3, r3, r5
 8005c28:	d418      	bmi.n	8005c5c <_malloc_r+0x8c>
 8005c2a:	2b0b      	cmp	r3, #11
 8005c2c:	d90f      	bls.n	8005c4e <_malloc_r+0x7e>
 8005c2e:	600b      	str	r3, [r1, #0]
 8005c30:	50cd      	str	r5, [r1, r3]
 8005c32:	18cc      	adds	r4, r1, r3
 8005c34:	4630      	mov	r0, r6
 8005c36:	f000 f9b3 	bl	8005fa0 <__malloc_unlock>
 8005c3a:	f104 000b 	add.w	r0, r4, #11
 8005c3e:	1d23      	adds	r3, r4, #4
 8005c40:	f020 0007 	bic.w	r0, r0, #7
 8005c44:	1ac3      	subs	r3, r0, r3
 8005c46:	d0d3      	beq.n	8005bf0 <_malloc_r+0x20>
 8005c48:	425a      	negs	r2, r3
 8005c4a:	50e2      	str	r2, [r4, r3]
 8005c4c:	e7d0      	b.n	8005bf0 <_malloc_r+0x20>
 8005c4e:	428c      	cmp	r4, r1
 8005c50:	684b      	ldr	r3, [r1, #4]
 8005c52:	bf16      	itet	ne
 8005c54:	6063      	strne	r3, [r4, #4]
 8005c56:	6013      	streq	r3, [r2, #0]
 8005c58:	460c      	movne	r4, r1
 8005c5a:	e7eb      	b.n	8005c34 <_malloc_r+0x64>
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6849      	ldr	r1, [r1, #4]
 8005c60:	e7cc      	b.n	8005bfc <_malloc_r+0x2c>
 8005c62:	1cc4      	adds	r4, r0, #3
 8005c64:	f024 0403 	bic.w	r4, r4, #3
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	d005      	beq.n	8005c78 <_malloc_r+0xa8>
 8005c6c:	1a21      	subs	r1, r4, r0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 f95a 	bl	8005f28 <_sbrk_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d0cf      	beq.n	8005c18 <_malloc_r+0x48>
 8005c78:	6025      	str	r5, [r4, #0]
 8005c7a:	e7db      	b.n	8005c34 <_malloc_r+0x64>
 8005c7c:	20000200 	.word	0x20000200
 8005c80:	20000204 	.word	0x20000204

08005c84 <__ssputs_r>:
 8005c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	688e      	ldr	r6, [r1, #8]
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4690      	mov	r8, r2
 8005c92:	4699      	mov	r9, r3
 8005c94:	d837      	bhi.n	8005d06 <__ssputs_r+0x82>
 8005c96:	898a      	ldrh	r2, [r1, #12]
 8005c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c9c:	d031      	beq.n	8005d02 <__ssputs_r+0x7e>
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	6909      	ldr	r1, [r1, #16]
 8005ca2:	1a6f      	subs	r7, r5, r1
 8005ca4:	6965      	ldr	r5, [r4, #20]
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cac:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cb0:	f109 0301 	add.w	r3, r9, #1
 8005cb4:	443b      	add	r3, r7
 8005cb6:	429d      	cmp	r5, r3
 8005cb8:	bf38      	it	cc
 8005cba:	461d      	movcc	r5, r3
 8005cbc:	0553      	lsls	r3, r2, #21
 8005cbe:	d530      	bpl.n	8005d22 <__ssputs_r+0x9e>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7ff ff85 	bl	8005bd0 <_malloc_r>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	b950      	cbnz	r0, 8005ce0 <__ssputs_r+0x5c>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8ca 3000 	str.w	r3, [sl]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	463a      	mov	r2, r7
 8005ce2:	6921      	ldr	r1, [r4, #16]
 8005ce4:	f7ff fc32 	bl	800554c <memcpy>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	6126      	str	r6, [r4, #16]
 8005cf6:	6165      	str	r5, [r4, #20]
 8005cf8:	443e      	add	r6, r7
 8005cfa:	1bed      	subs	r5, r5, r7
 8005cfc:	6026      	str	r6, [r4, #0]
 8005cfe:	60a5      	str	r5, [r4, #8]
 8005d00:	464e      	mov	r6, r9
 8005d02:	454e      	cmp	r6, r9
 8005d04:	d900      	bls.n	8005d08 <__ssputs_r+0x84>
 8005d06:	464e      	mov	r6, r9
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	f000 f92d 	bl	8005f6c <memmove>
 8005d12:	68a3      	ldr	r3, [r4, #8]
 8005d14:	1b9b      	subs	r3, r3, r6
 8005d16:	60a3      	str	r3, [r4, #8]
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	441e      	add	r6, r3
 8005d1c:	6026      	str	r6, [r4, #0]
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e7dc      	b.n	8005cdc <__ssputs_r+0x58>
 8005d22:	462a      	mov	r2, r5
 8005d24:	f000 f93d 	bl	8005fa2 <_realloc_r>
 8005d28:	4606      	mov	r6, r0
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d1e2      	bne.n	8005cf4 <__ssputs_r+0x70>
 8005d2e:	6921      	ldr	r1, [r4, #16]
 8005d30:	4650      	mov	r0, sl
 8005d32:	f7ff feff 	bl	8005b34 <_free_r>
 8005d36:	e7c8      	b.n	8005cca <__ssputs_r+0x46>

08005d38 <_svfiprintf_r>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	898b      	ldrh	r3, [r1, #12]
 8005d40:	061f      	lsls	r7, r3, #24
 8005d42:	b09d      	sub	sp, #116	; 0x74
 8005d44:	4680      	mov	r8, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4616      	mov	r6, r2
 8005d4a:	d50f      	bpl.n	8005d6c <_svfiprintf_r+0x34>
 8005d4c:	690b      	ldr	r3, [r1, #16]
 8005d4e:	b96b      	cbnz	r3, 8005d6c <_svfiprintf_r+0x34>
 8005d50:	2140      	movs	r1, #64	; 0x40
 8005d52:	f7ff ff3d 	bl	8005bd0 <_malloc_r>
 8005d56:	6020      	str	r0, [r4, #0]
 8005d58:	6120      	str	r0, [r4, #16]
 8005d5a:	b928      	cbnz	r0, 8005d68 <_svfiprintf_r+0x30>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	f8c8 3000 	str.w	r3, [r8]
 8005d62:	f04f 30ff 	mov.w	r0, #4294967295
 8005d66:	e0c8      	b.n	8005efa <_svfiprintf_r+0x1c2>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	6163      	str	r3, [r4, #20]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	2320      	movs	r3, #32
 8005d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d76:	2330      	movs	r3, #48	; 0x30
 8005d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d7c:	9503      	str	r5, [sp, #12]
 8005d7e:	f04f 0b01 	mov.w	fp, #1
 8005d82:	4637      	mov	r7, r6
 8005d84:	463d      	mov	r5, r7
 8005d86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d8a:	b10b      	cbz	r3, 8005d90 <_svfiprintf_r+0x58>
 8005d8c:	2b25      	cmp	r3, #37	; 0x25
 8005d8e:	d13e      	bne.n	8005e0e <_svfiprintf_r+0xd6>
 8005d90:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d94:	d00b      	beq.n	8005dae <_svfiprintf_r+0x76>
 8005d96:	4653      	mov	r3, sl
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	f7ff ff71 	bl	8005c84 <__ssputs_r>
 8005da2:	3001      	adds	r0, #1
 8005da4:	f000 80a4 	beq.w	8005ef0 <_svfiprintf_r+0x1b8>
 8005da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005daa:	4453      	add	r3, sl
 8005dac:	9309      	str	r3, [sp, #36]	; 0x24
 8005dae:	783b      	ldrb	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 809d 	beq.w	8005ef0 <_svfiprintf_r+0x1b8>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	9307      	str	r3, [sp, #28]
 8005dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8005dca:	462f      	mov	r7, r5
 8005dcc:	2205      	movs	r2, #5
 8005dce:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dd2:	4850      	ldr	r0, [pc, #320]	; (8005f14 <_svfiprintf_r+0x1dc>)
 8005dd4:	f7fa fa24 	bl	8000220 <memchr>
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	b9d0      	cbnz	r0, 8005e12 <_svfiprintf_r+0xda>
 8005ddc:	06d9      	lsls	r1, r3, #27
 8005dde:	bf44      	itt	mi
 8005de0:	2220      	movmi	r2, #32
 8005de2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005de6:	071a      	lsls	r2, r3, #28
 8005de8:	bf44      	itt	mi
 8005dea:	222b      	movmi	r2, #43	; 0x2b
 8005dec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005df0:	782a      	ldrb	r2, [r5, #0]
 8005df2:	2a2a      	cmp	r2, #42	; 0x2a
 8005df4:	d015      	beq.n	8005e22 <_svfiprintf_r+0xea>
 8005df6:	9a07      	ldr	r2, [sp, #28]
 8005df8:	462f      	mov	r7, r5
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	250a      	movs	r5, #10
 8005dfe:	4639      	mov	r1, r7
 8005e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e04:	3b30      	subs	r3, #48	; 0x30
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d94d      	bls.n	8005ea6 <_svfiprintf_r+0x16e>
 8005e0a:	b1b8      	cbz	r0, 8005e3c <_svfiprintf_r+0x104>
 8005e0c:	e00f      	b.n	8005e2e <_svfiprintf_r+0xf6>
 8005e0e:	462f      	mov	r7, r5
 8005e10:	e7b8      	b.n	8005d84 <_svfiprintf_r+0x4c>
 8005e12:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <_svfiprintf_r+0x1dc>)
 8005e14:	1a80      	subs	r0, r0, r2
 8005e16:	fa0b f000 	lsl.w	r0, fp, r0
 8005e1a:	4318      	orrs	r0, r3
 8005e1c:	9004      	str	r0, [sp, #16]
 8005e1e:	463d      	mov	r5, r7
 8005e20:	e7d3      	b.n	8005dca <_svfiprintf_r+0x92>
 8005e22:	9a03      	ldr	r2, [sp, #12]
 8005e24:	1d11      	adds	r1, r2, #4
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	9103      	str	r1, [sp, #12]
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	db01      	blt.n	8005e32 <_svfiprintf_r+0xfa>
 8005e2e:	9207      	str	r2, [sp, #28]
 8005e30:	e004      	b.n	8005e3c <_svfiprintf_r+0x104>
 8005e32:	4252      	negs	r2, r2
 8005e34:	f043 0302 	orr.w	r3, r3, #2
 8005e38:	9207      	str	r2, [sp, #28]
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	783b      	ldrb	r3, [r7, #0]
 8005e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e40:	d10c      	bne.n	8005e5c <_svfiprintf_r+0x124>
 8005e42:	787b      	ldrb	r3, [r7, #1]
 8005e44:	2b2a      	cmp	r3, #42	; 0x2a
 8005e46:	d133      	bne.n	8005eb0 <_svfiprintf_r+0x178>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	9203      	str	r2, [sp, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bfb8      	it	lt
 8005e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e58:	3702      	adds	r7, #2
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	4d2e      	ldr	r5, [pc, #184]	; (8005f18 <_svfiprintf_r+0x1e0>)
 8005e5e:	7839      	ldrb	r1, [r7, #0]
 8005e60:	2203      	movs	r2, #3
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7fa f9dc 	bl	8000220 <memchr>
 8005e68:	b138      	cbz	r0, 8005e7a <_svfiprintf_r+0x142>
 8005e6a:	2340      	movs	r3, #64	; 0x40
 8005e6c:	1b40      	subs	r0, r0, r5
 8005e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	4303      	orrs	r3, r0
 8005e76:	3701      	adds	r7, #1
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	7839      	ldrb	r1, [r7, #0]
 8005e7c:	4827      	ldr	r0, [pc, #156]	; (8005f1c <_svfiprintf_r+0x1e4>)
 8005e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e82:	2206      	movs	r2, #6
 8005e84:	1c7e      	adds	r6, r7, #1
 8005e86:	f7fa f9cb 	bl	8000220 <memchr>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d038      	beq.n	8005f00 <_svfiprintf_r+0x1c8>
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <_svfiprintf_r+0x1e8>)
 8005e90:	bb13      	cbnz	r3, 8005ed8 <_svfiprintf_r+0x1a0>
 8005e92:	9b03      	ldr	r3, [sp, #12]
 8005e94:	3307      	adds	r3, #7
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	9303      	str	r3, [sp, #12]
 8005e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea0:	444b      	add	r3, r9
 8005ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea4:	e76d      	b.n	8005d82 <_svfiprintf_r+0x4a>
 8005ea6:	fb05 3202 	mla	r2, r5, r2, r3
 8005eaa:	2001      	movs	r0, #1
 8005eac:	460f      	mov	r7, r1
 8005eae:	e7a6      	b.n	8005dfe <_svfiprintf_r+0xc6>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	3701      	adds	r7, #1
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	250a      	movs	r5, #10
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec0:	3a30      	subs	r2, #48	; 0x30
 8005ec2:	2a09      	cmp	r2, #9
 8005ec4:	d903      	bls.n	8005ece <_svfiprintf_r+0x196>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0c8      	beq.n	8005e5c <_svfiprintf_r+0x124>
 8005eca:	9105      	str	r1, [sp, #20]
 8005ecc:	e7c6      	b.n	8005e5c <_svfiprintf_r+0x124>
 8005ece:	fb05 2101 	mla	r1, r5, r1, r2
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	e7f0      	b.n	8005eba <_svfiprintf_r+0x182>
 8005ed8:	ab03      	add	r3, sp, #12
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	4622      	mov	r2, r4
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <_svfiprintf_r+0x1ec>)
 8005ee0:	a904      	add	r1, sp, #16
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	f7fe f8ee 	bl	80040c4 <_printf_float>
 8005ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005eec:	4681      	mov	r9, r0
 8005eee:	d1d6      	bne.n	8005e9e <_svfiprintf_r+0x166>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	065b      	lsls	r3, r3, #25
 8005ef4:	f53f af35 	bmi.w	8005d62 <_svfiprintf_r+0x2a>
 8005ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005efa:	b01d      	add	sp, #116	; 0x74
 8005efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f00:	ab03      	add	r3, sp, #12
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	4622      	mov	r2, r4
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <_svfiprintf_r+0x1ec>)
 8005f08:	a904      	add	r1, sp, #16
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f7fe fb90 	bl	8004630 <_printf_i>
 8005f10:	e7ea      	b.n	8005ee8 <_svfiprintf_r+0x1b0>
 8005f12:	bf00      	nop
 8005f14:	080061a4 	.word	0x080061a4
 8005f18:	080061aa 	.word	0x080061aa
 8005f1c:	080061ae 	.word	0x080061ae
 8005f20:	080040c5 	.word	0x080040c5
 8005f24:	08005c85 	.word	0x08005c85

08005f28 <_sbrk_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4c06      	ldr	r4, [pc, #24]	; (8005f44 <_sbrk_r+0x1c>)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4605      	mov	r5, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	f7fb fa9e 	bl	8001474 <_sbrk>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_sbrk_r+0x1a>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_sbrk_r+0x1a>
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	2000026c 	.word	0x2000026c

08005f48 <__ascii_mbtowc>:
 8005f48:	b082      	sub	sp, #8
 8005f4a:	b901      	cbnz	r1, 8005f4e <__ascii_mbtowc+0x6>
 8005f4c:	a901      	add	r1, sp, #4
 8005f4e:	b142      	cbz	r2, 8005f62 <__ascii_mbtowc+0x1a>
 8005f50:	b14b      	cbz	r3, 8005f66 <__ascii_mbtowc+0x1e>
 8005f52:	7813      	ldrb	r3, [r2, #0]
 8005f54:	600b      	str	r3, [r1, #0]
 8005f56:	7812      	ldrb	r2, [r2, #0]
 8005f58:	1c10      	adds	r0, r2, #0
 8005f5a:	bf18      	it	ne
 8005f5c:	2001      	movne	r0, #1
 8005f5e:	b002      	add	sp, #8
 8005f60:	4770      	bx	lr
 8005f62:	4610      	mov	r0, r2
 8005f64:	e7fb      	b.n	8005f5e <__ascii_mbtowc+0x16>
 8005f66:	f06f 0001 	mvn.w	r0, #1
 8005f6a:	e7f8      	b.n	8005f5e <__ascii_mbtowc+0x16>

08005f6c <memmove>:
 8005f6c:	4288      	cmp	r0, r1
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	eb01 0302 	add.w	r3, r1, r2
 8005f74:	d807      	bhi.n	8005f86 <memmove+0x1a>
 8005f76:	1e42      	subs	r2, r0, #1
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	d00a      	beq.n	8005f92 <memmove+0x26>
 8005f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f84:	e7f8      	b.n	8005f78 <memmove+0xc>
 8005f86:	4283      	cmp	r3, r0
 8005f88:	d9f5      	bls.n	8005f76 <memmove+0xa>
 8005f8a:	1881      	adds	r1, r0, r2
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	42d3      	cmn	r3, r2
 8005f90:	d100      	bne.n	8005f94 <memmove+0x28>
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f9c:	e7f7      	b.n	8005f8e <memmove+0x22>

08005f9e <__malloc_lock>:
 8005f9e:	4770      	bx	lr

08005fa0 <__malloc_unlock>:
 8005fa0:	4770      	bx	lr

08005fa2 <_realloc_r>:
 8005fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	460e      	mov	r6, r1
 8005faa:	b921      	cbnz	r1, 8005fb6 <_realloc_r+0x14>
 8005fac:	4611      	mov	r1, r2
 8005fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fb2:	f7ff be0d 	b.w	8005bd0 <_malloc_r>
 8005fb6:	b922      	cbnz	r2, 8005fc2 <_realloc_r+0x20>
 8005fb8:	f7ff fdbc 	bl	8005b34 <_free_r>
 8005fbc:	4625      	mov	r5, r4
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc2:	f000 f821 	bl	8006008 <_malloc_usable_size_r>
 8005fc6:	42a0      	cmp	r0, r4
 8005fc8:	d20f      	bcs.n	8005fea <_realloc_r+0x48>
 8005fca:	4621      	mov	r1, r4
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff fdff 	bl	8005bd0 <_malloc_r>
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d0f2      	beq.n	8005fbe <_realloc_r+0x1c>
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4622      	mov	r2, r4
 8005fdc:	f7ff fab6 	bl	800554c <memcpy>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff fda6 	bl	8005b34 <_free_r>
 8005fe8:	e7e9      	b.n	8005fbe <_realloc_r+0x1c>
 8005fea:	4635      	mov	r5, r6
 8005fec:	e7e7      	b.n	8005fbe <_realloc_r+0x1c>

08005fee <__ascii_wctomb>:
 8005fee:	b149      	cbz	r1, 8006004 <__ascii_wctomb+0x16>
 8005ff0:	2aff      	cmp	r2, #255	; 0xff
 8005ff2:	bf85      	ittet	hi
 8005ff4:	238a      	movhi	r3, #138	; 0x8a
 8005ff6:	6003      	strhi	r3, [r0, #0]
 8005ff8:	700a      	strbls	r2, [r1, #0]
 8005ffa:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ffe:	bf98      	it	ls
 8006000:	2001      	movls	r0, #1
 8006002:	4770      	bx	lr
 8006004:	4608      	mov	r0, r1
 8006006:	4770      	bx	lr

08006008 <_malloc_usable_size_r>:
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f18      	subs	r0, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfbc      	itt	lt
 8006012:	580b      	ldrlt	r3, [r1, r0]
 8006014:	18c0      	addlt	r0, r0, r3
 8006016:	4770      	bx	lr

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
