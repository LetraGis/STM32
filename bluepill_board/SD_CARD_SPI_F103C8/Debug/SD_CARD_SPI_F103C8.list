
SD_CARD_SPI_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08005dac  08005dac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dac  08005dac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  20000024  08005dd8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  08005dd8  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba66  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f4b  00000000  00000000  0002bab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002e538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c3f  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c62  00000000  00000000  00043ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d659  00000000  00000000  0004d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bae62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf0  00000000  00000000  000baee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08005bec 	.word	0x08005bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08005bec 	.word	0x08005bec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <SELECT+0x14>)
 8000166:	f001 fa9f 	bl	80016a8 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010c00 	.word	0x40010c00

08000174 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2101      	movs	r1, #1
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <DESELECT+0x14>)
 800017e:	f001 fa93 	bl	80016a8 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010c00 	.word	0x40010c00

0800018c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000196:	bf00      	nop
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <SPI_TxByte+0x30>)
 800019a:	f002 f9f0 	bl	800257e <HAL_SPI_GetState>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d1f9      	bne.n	8000198 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80001a4:	1df9      	adds	r1, r7, #7
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	2201      	movs	r2, #1
 80001ac:	4803      	ldr	r0, [pc, #12]	; (80001bc <SPI_TxByte+0x30>)
 80001ae:	f001 ff10 	bl	8001fd2 <HAL_SPI_Transmit>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000390 	.word	0x20000390

080001c0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001c6:	23ff      	movs	r3, #255	; 0xff
 80001c8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001ce:	bf00      	nop
 80001d0:	4809      	ldr	r0, [pc, #36]	; (80001f8 <SPI_RxByte+0x38>)
 80001d2:	f002 f9d4 	bl	800257e <HAL_SPI_GetState>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d1f9      	bne.n	80001d0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001dc:	1dba      	adds	r2, r7, #6
 80001de:	1df9      	adds	r1, r7, #7
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <SPI_RxByte+0x38>)
 80001ea:	f002 f826 	bl	800223a <HAL_SPI_TransmitReceive>
  
  return data;
 80001ee:	79bb      	ldrb	r3, [r7, #6]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000390 	.word	0x20000390

080001fc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000204:	f7ff ffdc 	bl	80001c0 <SPI_RxByte>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	701a      	strb	r2, [r3, #0]
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SD_ReadyWait+0x34>)
 8000220:	2232      	movs	r2, #50	; 0x32
 8000222:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000224:	f7ff ffcc 	bl	80001c0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000228:	f7ff ffca 	bl	80001c0 <SPI_RxByte>
 800022c:	4603      	mov	r3, r0
 800022e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2bff      	cmp	r3, #255	; 0xff
 8000234:	d004      	beq.n	8000240 <SD_ReadyWait+0x28>
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <SD_ReadyWait+0x34>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f3      	bne.n	8000228 <SD_ReadyWait+0x10>
  
  return res;
 8000240:	79fb      	ldrb	r3, [r7, #7]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000618 	.word	0x20000618

08000250 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000256:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800025a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800025c:	f7ff ff8a 	bl	8000174 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e005      	b.n	8000272 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000266:	20ff      	movs	r0, #255	; 0xff
 8000268:	f7ff ff90 	bl	800018c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	3301      	adds	r3, #1
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	2b09      	cmp	r3, #9
 8000276:	ddf6      	ble.n	8000266 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000278:	f7ff ff70 	bl	800015c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800027c:	2340      	movs	r3, #64	; 0x40
 800027e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000290:	2395      	movs	r3, #149	; 0x95
 8000292:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e009      	b.n	80002ae <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800029a:	1d3a      	adds	r2, r7, #4
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff72 	bl	800018c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b05      	cmp	r3, #5
 80002b2:	ddf2      	ble.n	800029a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80002b4:	e002      	b.n	80002bc <SD_PowerOn+0x6c>
  {
    Count--;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002bc:	f7ff ff80 	bl	80001c0 <SPI_RxByte>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d002      	beq.n	80002cc <SD_PowerOn+0x7c>
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1f4      	bne.n	80002b6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80002cc:	f7ff ff52 	bl	8000174 <DESELECT>
  SPI_TxByte(0XFF);
 80002d0:	20ff      	movs	r0, #255	; 0xff
 80002d2:	f7ff ff5b 	bl	800018c <SPI_TxByte>
  
  PowerFlag = 1;
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <SD_PowerOn+0x94>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000041 	.word	0x20000041

080002e8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <SD_PowerOff+0x14>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000041 	.word	0x20000041

08000300 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <SD_CheckPower+0x10>)
 8000306:	781b      	ldrb	r3, [r3, #0]
}
 8000308:	4618      	mov	r0, r3
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20000041 	.word	0x20000041

08000314 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <SD_RxDataBlock+0x68>)
 8000320:	220a      	movs	r2, #10
 8000322:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000324:	f7ff ff4c 	bl	80001c0 <SPI_RxByte>
 8000328:	4603      	mov	r3, r0
 800032a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bff      	cmp	r3, #255	; 0xff
 8000330:	d104      	bne.n	800033c <SD_RxDataBlock+0x28>
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <SD_RxDataBlock+0x68>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f3      	bne.n	8000324 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bfe      	cmp	r3, #254	; 0xfe
 8000340:	d001      	beq.n	8000346 <SD_RxDataBlock+0x32>
    return FALSE;
 8000342:	2300      	movs	r3, #0
 8000344:	e016      	b.n	8000374 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff55 	bl	80001fc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff4f 	bl	80001fc <SPI_RxBytePtr>
  } while(btr -= 2);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3b02      	subs	r3, #2
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1ed      	bne.n	8000346 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800036a:	f7ff ff29 	bl	80001c0 <SPI_RxByte>
  SPI_RxByte();
 800036e:	f7ff ff27 	bl	80001c0 <SPI_RxByte>
  
  return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000619 	.word	0x20000619

08000380 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000390:	f7ff ff42 	bl	8000218 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
    return FALSE;
 800039a:	2300      	movs	r3, #0
 800039c:	e040      	b.n	8000420 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fef3 	bl	800018c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	; 0xfd
 80003aa:	d031      	beq.n	8000410 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fee7 	bl	800018c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	1c5a      	adds	r2, r3, #1
 80003c2:	607a      	str	r2, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff fee0 	bl	800018c <SPI_TxByte>
    } while (--wc);
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	73bb      	strb	r3, [r7, #14]
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1eb      	bne.n	80003b0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80003d8:	f7ff fef2 	bl	80001c0 <SPI_RxByte>
    SPI_RxByte();
 80003dc:	f7ff fef0 	bl	80001c0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80003e0:	e00b      	b.n	80003fa <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80003e2:	f7ff feed 	bl	80001c0 <SPI_RxByte>
 80003e6:	4603      	mov	r3, r0
 80003e8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	f003 031f 	and.w	r3, r3, #31
 80003f0:	2b05      	cmp	r3, #5
 80003f2:	d006      	beq.n	8000402 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80003f4:	7b7b      	ldrb	r3, [r7, #13]
 80003f6:	3301      	adds	r3, #1
 80003f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80003fa:	7b7b      	ldrb	r3, [r7, #13]
 80003fc:	2b40      	cmp	r3, #64	; 0x40
 80003fe:	d9f0      	bls.n	80003e2 <SD_TxDataBlock+0x62>
 8000400:	e000      	b.n	8000404 <SD_TxDataBlock+0x84>
        break;
 8000402:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000404:	bf00      	nop
 8000406:	f7ff fedb 	bl	80001c0 <SPI_RxByte>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0fa      	beq.n	8000406 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	f003 031f 	and.w	r3, r3, #31
 8000416:	2b05      	cmp	r3, #5
 8000418:	d101      	bne.n	800041e <SD_TxDataBlock+0x9e>
    return TRUE;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000434:	f7ff fef0 	bl	8000218 <SD_ReadyWait>
 8000438:	4603      	mov	r3, r0
 800043a:	2bff      	cmp	r3, #255	; 0xff
 800043c:	d001      	beq.n	8000442 <SD_SendCmd+0x1a>
    return 0xFF;
 800043e:	23ff      	movs	r3, #255	; 0xff
 8000440:	e040      	b.n	80004c4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff fea1 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	0e1b      	lsrs	r3, r3, #24
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe9b 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe95 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe8f 	bl	800018c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff fe8a 	bl	800018c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b40      	cmp	r3, #64	; 0x40
 8000480:	d101      	bne.n	8000486 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000482:	2395      	movs	r3, #149	; 0x95
 8000484:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b48      	cmp	r3, #72	; 0x48
 800048a:	d101      	bne.n	8000490 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800048c:	2387      	movs	r3, #135	; 0x87
 800048e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe7a 	bl	800018c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b4c      	cmp	r3, #76	; 0x4c
 800049c:	d101      	bne.n	80004a2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800049e:	f7ff fe8f 	bl	80001c0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80004a2:	230a      	movs	r3, #10
 80004a4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80004a6:	f7ff fe8b 	bl	80001c0 <SPI_RxByte>
 80004aa:	4603      	mov	r3, r0
 80004ac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da05      	bge.n	80004c2 <SD_SendCmd+0x9a>
 80004b6:	7bbb      	ldrb	r3, [r7, #14]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	7bbb      	ldrb	r3, [r7, #14]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d1f1      	bne.n	80004a6 <SD_SendCmd+0x7e>
  
  return res;
 80004c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80004dc:	2301      	movs	r3, #1
 80004de:	e0d5      	b.n	800068c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004e0:	4b6c      	ldr	r3, [pc, #432]	; (8000694 <SD_disk_initialize+0x1c8>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <SD_disk_initialize+0x2a>
    return Stat;        
 80004ee:	4b69      	ldr	r3, [pc, #420]	; (8000694 <SD_disk_initialize+0x1c8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	e0ca      	b.n	800068c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80004f6:	f7ff feab 	bl	8000250 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80004fa:	f7ff fe2f 	bl	800015c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000502:	2100      	movs	r1, #0
 8000504:	2040      	movs	r0, #64	; 0x40
 8000506:	f7ff ff8f 	bl	8000428 <SD_SendCmd>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	f040 80a5 	bne.w	800065c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000512:	4b61      	ldr	r3, [pc, #388]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000518:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800051c:	2048      	movs	r0, #72	; 0x48
 800051e:	f7ff ff83 	bl	8000428 <SD_SendCmd>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d158      	bne.n	80005da <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e00c      	b.n	8000548 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800052e:	7bfc      	ldrb	r4, [r7, #15]
 8000530:	f7ff fe46 	bl	80001c0 <SPI_RxByte>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4423      	add	r3, r4
 800053e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	3301      	adds	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d9ef      	bls.n	800052e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800054e:	7abb      	ldrb	r3, [r7, #10]
 8000550:	2b01      	cmp	r3, #1
 8000552:	f040 8083 	bne.w	800065c <SD_disk_initialize+0x190>
 8000556:	7afb      	ldrb	r3, [r7, #11]
 8000558:	2baa      	cmp	r3, #170	; 0xaa
 800055a:	d17f      	bne.n	800065c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800055c:	2100      	movs	r1, #0
 800055e:	2077      	movs	r0, #119	; 0x77
 8000560:	f7ff ff62 	bl	8000428 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	d807      	bhi.n	800057a <SD_disk_initialize+0xae>
 800056a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800056e:	2069      	movs	r0, #105	; 0x69
 8000570:	f7ff ff5a 	bl	8000428 <SD_SendCmd>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d005      	beq.n	8000586 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <SD_disk_initialize+0x1cc>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1eb      	bne.n	800055c <SD_disk_initialize+0x90>
 8000584:	e000      	b.n	8000588 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000586:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <SD_disk_initialize+0x1cc>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d064      	beq.n	800065c <SD_disk_initialize+0x190>
 8000592:	2100      	movs	r1, #0
 8000594:	207a      	movs	r0, #122	; 0x7a
 8000596:	f7ff ff47 	bl	8000428 <SD_SendCmd>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d15d      	bne.n	800065c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e00c      	b.n	80005c0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80005a6:	7bfc      	ldrb	r4, [r7, #15]
 80005a8:	f7ff fe0a 	bl	80001c0 <SPI_RxByte>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4423      	add	r3, r4
 80005b6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	3301      	adds	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d9ef      	bls.n	80005a6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80005c6:	7a3b      	ldrb	r3, [r7, #8]
 80005c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SD_disk_initialize+0x108>
 80005d0:	2306      	movs	r3, #6
 80005d2:	e000      	b.n	80005d6 <SD_disk_initialize+0x10a>
 80005d4:	2302      	movs	r3, #2
 80005d6:	73bb      	strb	r3, [r7, #14]
 80005d8:	e040      	b.n	800065c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005da:	2100      	movs	r1, #0
 80005dc:	2077      	movs	r0, #119	; 0x77
 80005de:	f7ff ff23 	bl	8000428 <SD_SendCmd>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d808      	bhi.n	80005fa <SD_disk_initialize+0x12e>
 80005e8:	2100      	movs	r1, #0
 80005ea:	2069      	movs	r0, #105	; 0x69
 80005ec:	f7ff ff1c 	bl	8000428 <SD_SendCmd>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d801      	bhi.n	80005fa <SD_disk_initialize+0x12e>
 80005f6:	2302      	movs	r3, #2
 80005f8:	e000      	b.n	80005fc <SD_disk_initialize+0x130>
 80005fa:	2301      	movs	r3, #1
 80005fc:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d10e      	bne.n	8000622 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000604:	2100      	movs	r1, #0
 8000606:	2077      	movs	r0, #119	; 0x77
 8000608:	f7ff ff0e 	bl	8000428 <SD_SendCmd>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d80e      	bhi.n	8000630 <SD_disk_initialize+0x164>
 8000612:	2100      	movs	r1, #0
 8000614:	2069      	movs	r0, #105	; 0x69
 8000616:	f7ff ff07 	bl	8000428 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d107      	bne.n	8000630 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000620:	e00d      	b.n	800063e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000622:	2100      	movs	r1, #0
 8000624:	2041      	movs	r0, #65	; 0x41
 8000626:	f7ff feff 	bl	8000428 <SD_SendCmd>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1e1      	bne.n	80005fe <SD_disk_initialize+0x132>
 800063a:	e000      	b.n	800063e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800063c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <SD_disk_initialize+0x1cc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d007      	beq.n	8000658 <SD_disk_initialize+0x18c>
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	2050      	movs	r0, #80	; 0x50
 800064e:	f7ff feeb 	bl	8000428 <SD_SendCmd>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <SD_disk_initialize+0x1d0>)
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000662:	f7ff fd87 	bl	8000174 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000666:	f7ff fdab 	bl	80001c0 <SPI_RxByte>
  
  if (type) 
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SD_disk_initialize+0x1c8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SD_disk_initialize+0x1c8>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e001      	b.n	8000686 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000682:	f7ff fe31 	bl	80002e8 <SD_PowerOff>
  }
  
  return Stat;
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_disk_initialize+0x1c8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000619 	.word	0x20000619
 800069c:	20000040 	.word	0x20000040

080006a0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80006b0:	2301      	movs	r3, #1
 80006b2:	e002      	b.n	80006ba <SD_disk_status+0x1a>
  
  return Stat;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <SD_disk_status+0x24>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000000 	.word	0x20000000

080006c8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4603      	mov	r3, r0
 80006d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d102      	bne.n	80006e4 <SD_disk_read+0x1c>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006e4:	2304      	movs	r3, #4
 80006e6:	e051      	b.n	800078c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <SD_disk_read+0xcc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006f6:	2303      	movs	r3, #3
 80006f8:	e048      	b.n	800078c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SD_disk_read+0xd0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	025b      	lsls	r3, r3, #9
 800070a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800070c:	f7ff fd26 	bl	800015c <SELECT>
  
  if (count == 1) 
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d111      	bne.n	800073a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2051      	movs	r0, #81	; 0x51
 800071a:	f7ff fe85 	bl	8000428 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d129      	bne.n	8000778 <SD_disk_read+0xb0>
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdf3 	bl	8000314 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d021      	beq.n	8000778 <SD_disk_read+0xb0>
      count = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	e01e      	b.n	8000778 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2052      	movs	r0, #82	; 0x52
 800073e:	f7ff fe73 	bl	8000428 <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d117      	bne.n	8000778 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	f7ff fde1 	bl	8000314 <SD_RxDataBlock>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800075e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ed      	bne.n	8000748 <SD_disk_read+0x80>
 800076c:	e000      	b.n	8000770 <SD_disk_read+0xa8>
          break;
 800076e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000770:	2100      	movs	r1, #0
 8000772:	204c      	movs	r0, #76	; 0x4c
 8000774:	f7ff fe58 	bl	8000428 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000778:	f7ff fcfc 	bl	8000174 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800077c:	f7ff fd20 	bl	80001c0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000040 	.word	0x20000040

0800079c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <SD_disk_write+0x1c>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <SD_disk_write+0x20>
    return RES_PARERR;
 80007b8:	2304      	movs	r3, #4
 80007ba:	e06b      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <SD_disk_write+0x100>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ca:	2303      	movs	r3, #3
 80007cc:	e062      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <SD_disk_write+0x100>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007dc:	2302      	movs	r3, #2
 80007de:	e059      	b.n	8000894 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <SD_disk_write+0x104>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80007f2:	f7ff fcb3 	bl	800015c <SELECT>
  
  if (count == 1) 
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d110      	bne.n	800081e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	2058      	movs	r0, #88	; 0x58
 8000800:	f7ff fe12 	bl	8000428 <SD_SendCmd>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d13a      	bne.n	8000880 <SD_disk_write+0xe4>
 800080a:	21fe      	movs	r1, #254	; 0xfe
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	f7ff fdb7 	bl	8000380 <SD_TxDataBlock>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d033      	beq.n	8000880 <SD_disk_write+0xe4>
      count = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	e030      	b.n	8000880 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <SD_disk_write+0x104>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2077      	movs	r0, #119	; 0x77
 800082e:	f7ff fdfb 	bl	8000428 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	2057      	movs	r0, #87	; 0x57
 8000836:	f7ff fdf7 	bl	8000428 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2059      	movs	r0, #89	; 0x59
 800083e:	f7ff fdf3 	bl	8000428 <SD_SendCmd>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11b      	bne.n	8000880 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000848:	21fc      	movs	r1, #252	; 0xfc
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fd98 	bl	8000380 <SD_TxDataBlock>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00a      	beq.n	800086c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800085c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1ee      	bne.n	8000848 <SD_disk_write+0xac>
 800086a:	e000      	b.n	800086e <SD_disk_write+0xd2>
          break;
 800086c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800086e:	21fd      	movs	r1, #253	; 0xfd
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fd85 	bl	8000380 <SD_TxDataBlock>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <SD_disk_write+0xe4>
      {        
        count = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000880:	f7ff fc78 	bl	8000174 <DESELECT>
  SPI_RxByte();
 8000884:	f7ff fc9c 	bl	80001c0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000040 	.word	0x20000040

080008a4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	603a      	str	r2, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	460b      	mov	r3, r1
 80008b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008be:	2304      	movs	r3, #4
 80008c0:	e117      	b.n	8000af2 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d126      	bne.n	800091c <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00e      	beq.n	80008f4 <SD_disk_ioctl+0x50>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d012      	beq.n	8000900 <SD_disk_ioctl+0x5c>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d11a      	bne.n	8000914 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80008de:	f7ff fd0f 	bl	8000300 <SD_CheckPower>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80008e8:	f7ff fcfe 	bl	80002e8 <SD_PowerOff>
      res = RES_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008f2:	e0fc      	b.n	8000aee <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80008f4:	f7ff fcac 	bl	8000250 <SD_PowerOn>
      res = RES_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008fe:	e0f6      	b.n	8000aee <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	1c5c      	adds	r4, r3, #1
 8000904:	f7ff fcfc 	bl	8000300 <SD_CheckPower>
 8000908:	4603      	mov	r3, r0
 800090a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000912:	e0ec      	b.n	8000aee <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000914:	2304      	movs	r3, #4
 8000916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800091a:	e0e8      	b.n	8000aee <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800091c:	4b77      	ldr	r3, [pc, #476]	; (8000afc <SD_disk_ioctl+0x258>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800092a:	2303      	movs	r3, #3
 800092c:	e0e1      	b.n	8000af2 <SD_disk_ioctl+0x24e>
    
    SELECT();
 800092e:	f7ff fc15 	bl	800015c <SELECT>
    
    switch (ctrl) 
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	2b0d      	cmp	r3, #13
 8000936:	f200 80cb 	bhi.w	8000ad0 <SD_disk_ioctl+0x22c>
 800093a:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <SD_disk_ioctl+0x9c>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000a3b 	.word	0x08000a3b
 8000944:	08000979 	.word	0x08000979
 8000948:	08000a2b 	.word	0x08000a2b
 800094c:	08000ad1 	.word	0x08000ad1
 8000950:	08000ad1 	.word	0x08000ad1
 8000954:	08000ad1 	.word	0x08000ad1
 8000958:	08000ad1 	.word	0x08000ad1
 800095c:	08000ad1 	.word	0x08000ad1
 8000960:	08000ad1 	.word	0x08000ad1
 8000964:	08000ad1 	.word	0x08000ad1
 8000968:	08000ad1 	.word	0x08000ad1
 800096c:	08000a4d 	.word	0x08000a4d
 8000970:	08000a71 	.word	0x08000a71
 8000974:	08000a95 	.word	0x08000a95
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000978:	2100      	movs	r1, #0
 800097a:	2049      	movs	r0, #73	; 0x49
 800097c:	f7ff fd54 	bl	8000428 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 80a8 	bne.w	8000ad8 <SD_disk_ioctl+0x234>
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2110      	movs	r1, #16
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fcc0 	bl	8000314 <SD_RxDataBlock>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 809e 	beq.w	8000ad8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 800099c:	7b3b      	ldrb	r3, [r7, #12]
 800099e:	099b      	lsrs	r3, r3, #6
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10e      	bne.n	80009c4 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80009a6:	7d7b      	ldrb	r3, [r7, #21]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	7d3b      	ldrb	r3, [r7, #20]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4413      	add	r3, r2
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	3301      	adds	r3, #1
 80009b8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009ba:	8bfb      	ldrh	r3, [r7, #30]
 80009bc:	029a      	lsls	r2, r3, #10
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e02e      	b.n	8000a22 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009c4:	7c7b      	ldrb	r3, [r7, #17]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	7dbb      	ldrb	r3, [r7, #22]
 80009ce:	09db      	lsrs	r3, r3, #7
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	7d7b      	ldrb	r3, [r7, #21]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 0306 	and.w	r3, r3, #6
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4413      	add	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3302      	adds	r3, #2
 80009e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009ec:	7d3b      	ldrb	r3, [r7, #20]
 80009ee:	099b      	lsrs	r3, r3, #6
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	7cfb      	ldrb	r3, [r7, #19]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	7cbb      	ldrb	r3, [r7, #18]
 8000a02:	029b      	lsls	r3, r3, #10
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	3301      	adds	r3, #1
 8000a12:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a14:	8bfa      	ldrh	r2, [r7, #30]
 8000a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a1a:	3b09      	subs	r3, #9
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a28:	e056      	b.n	8000ad8 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a38:	e055      	b.n	8000ae6 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a3a:	f7ff fbed 	bl	8000218 <SD_ReadyWait>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2bff      	cmp	r3, #255	; 0xff
 8000a42:	d14b      	bne.n	8000adc <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a4a:	e047      	b.n	8000adc <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2049      	movs	r0, #73	; 0x49
 8000a50:	f7ff fcea 	bl	8000428 <SD_SendCmd>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d142      	bne.n	8000ae0 <SD_disk_ioctl+0x23c>
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	6a38      	ldr	r0, [r7, #32]
 8000a5e:	f7ff fc59 	bl	8000314 <SD_RxDataBlock>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d03b      	beq.n	8000ae0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a6e:	e037      	b.n	8000ae0 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a70:	2100      	movs	r1, #0
 8000a72:	204a      	movs	r0, #74	; 0x4a
 8000a74:	f7ff fcd8 	bl	8000428 <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d132      	bne.n	8000ae4 <SD_disk_ioctl+0x240>
 8000a7e:	2110      	movs	r1, #16
 8000a80:	6a38      	ldr	r0, [r7, #32]
 8000a82:	f7ff fc47 	bl	8000314 <SD_RxDataBlock>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d02b      	beq.n	8000ae4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a92:	e027      	b.n	8000ae4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000a94:	2100      	movs	r1, #0
 8000a96:	207a      	movs	r0, #122	; 0x7a
 8000a98:	f7ff fcc6 	bl	8000428 <SD_SendCmd>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d116      	bne.n	8000ad0 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aa8:	e00b      	b.n	8000ac2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000aaa:	6a3c      	ldr	r4, [r7, #32]
 8000aac:	1c63      	adds	r3, r4, #1
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	f7ff fb86 	bl	80001c0 <SPI_RxByte>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000abc:	3301      	adds	r3, #1
 8000abe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d9ef      	bls.n	8000aaa <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ad6:	e006      	b.n	8000ae6 <SD_disk_ioctl+0x242>
      break;
 8000ad8:	bf00      	nop
 8000ada:	e004      	b.n	8000ae6 <SD_disk_ioctl+0x242>
      break;
 8000adc:	bf00      	nop
 8000ade:	e002      	b.n	8000ae6 <SD_disk_ioctl+0x242>
      break;
 8000ae0:	bf00      	nop
 8000ae2:	e000      	b.n	8000ae6 <SD_disk_ioctl+0x242>
      break;
 8000ae4:	bf00      	nop
    }
    
    DESELECT();
 8000ae6:	f7ff fb45 	bl	8000174 <DESELECT>
    SPI_RxByte();
 8000aea:	f7ff fb69 	bl	80001c0 <SPI_RxByte>
  }
  
  return res;
 8000aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	372c      	adds	r7, #44	; 0x2c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000

08000b00 <clear_buffer>:
		i++;
	return i;
}

void clear_buffer (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFFER_SIZE; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e007      	b.n	8000b1c <clear_buffer+0x1c>
		buffer[i] = '\0';
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <clear_buffer+0x2c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	ddf4      	ble.n	8000b0c <clear_buffer+0xc>
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000304 	.word	0x20000304

08000b30 <send_uart>:

void send_uart(char *string)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fb07 	bl	800014c <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <send_uart+0x2c>)
 8000b4e:	f001 fdf8 	bl	8002742 <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002c4 	.word	0x200002c4

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fb00 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f886 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 f92a 	bl	8000dc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b70:	f000 f8c8 	bl	8000d04 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 f8fc 	bl	8000d70 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000b78:	f001 ffa0 	bl	8002abc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	fresult = f_mount(&fs, "/", 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4931      	ldr	r1, [pc, #196]	; (8000c44 <main+0xe4>)
 8000b80:	4831      	ldr	r0, [pc, #196]	; (8000c48 <main+0xe8>)
 8000b82:	f003 fe8b 	bl	800489c <f_mount>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <main+0xec>)
 8000b8c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <main+0xec>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <main+0x3e>
		send_uart("ERROR!!! in mounting SD CARD...\n\n");
 8000b96:	482e      	ldr	r0, [pc, #184]	; (8000c50 <main+0xf0>)
 8000b98:	f7ff ffca 	bl	8000b30 <send_uart>
 8000b9c:	e002      	b.n	8000ba4 <main+0x44>
	else
		send_uart("SD CARD mounted successfully...\n\n");
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <main+0xf4>)
 8000ba0:	f7ff ffc6 	bl	8000b30 <send_uart>
	clear_buffer();*/

	/*********************UPDATING an existing file ***************************/

	//Open the file with write access
	fresult = f_open(&fil, "log3.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	492c      	ldr	r1, [pc, #176]	; (8000c58 <main+0xf8>)
 8000ba8:	482c      	ldr	r0, [pc, #176]	; (8000c5c <main+0xfc>)
 8000baa:	f003 febf 	bl	800492c <f_open>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <main+0xec>)
 8000bb4:	701a      	strb	r2, [r3, #0]
	//fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);

	//Move to offset to the end of the file
	fresult = f_lseek(&fil, f_size(&fil));
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <main+0xfc>)
 8000bb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4827      	ldr	r0, [pc, #156]	; (8000c5c <main+0xfc>)
 8000bc0:	f004 fcb9 	bl	8005536 <f_lseek>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <main+0xec>)
 8000bca:	701a      	strb	r2, [r3, #0]

	if(fresult == FR_OK)
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <main+0xec>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <main+0x7a>
		send_uart("About to update the log3.txt\n");
 8000bd4:	4822      	ldr	r0, [pc, #136]	; (8000c60 <main+0x100>)
 8000bd6:	f7ff ffab 	bl	8000b30 <send_uart>
		//send_uart("About to update the file2.txt\n");

	//Write the string to the file
	fresult = f_puts("\nActualización", &fil);
 8000bda:	4920      	ldr	r1, [pc, #128]	; (8000c5c <main+0xfc>)
 8000bdc:	4821      	ldr	r0, [pc, #132]	; (8000c64 <main+0x104>)
 8000bde:	f004 ff45 	bl	8005a6c <f_puts>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <main+0xec>)
 8000be8:	701a      	strb	r2, [r3, #0]
	//fresult = f_puts("1", &fil);

	f_close(&fil);
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <main+0xfc>)
 8000bec:	f004 fc7b 	bl	80054e6 <f_close>

	clear_buffer();
 8000bf0:	f7ff ff86 	bl	8000b00 <clear_buffer>

	//Open to read the file
	//fresult = f_open (&fil, "file2.txt", FA_READ);
	fresult = f_open(&fil, "log3.txt", FA_READ);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4918      	ldr	r1, [pc, #96]	; (8000c58 <main+0xf8>)
 8000bf8:	4818      	ldr	r0, [pc, #96]	; (8000c5c <main+0xfc>)
 8000bfa:	f003 fe97 	bl	800492c <f_open>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <main+0xec>)
 8000c04:	701a      	strb	r2, [r3, #0]

	//Read string from the file
	fresult = f_read(&fil, buffer, f_size(&fil), &br);
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <main+0xfc>)
 8000c08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <main+0x108>)
 8000c0e:	4917      	ldr	r1, [pc, #92]	; (8000c6c <main+0x10c>)
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <main+0xfc>)
 8000c12:	f004 f896 	bl	8004d42 <f_read>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <main+0xec>)
 8000c1c:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK)
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <main+0xec>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <main+0xcc>
		send_uart("Below is the data from updated log3.txt\n");
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <main+0x110>)
 8000c28:	f7ff ff82 	bl	8000b30 <send_uart>

	send_uart(buffer);
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <main+0x10c>)
 8000c2e:	f7ff ff7f 	bl	8000b30 <send_uart>
	send_uart("\n\n");
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <main+0x114>)
 8000c34:	f7ff ff7c 	bl	8000b30 <send_uart>

	//Close file
	f_close(&fil);
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <main+0xfc>)
 8000c3a:	f004 fc54 	bl	80054e6 <f_close>

	clear_buffer();
 8000c3e:	f7ff ff5f 	bl	8000b00 <clear_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0xe2>
 8000c44:	08005c04 	.word	0x08005c04
 8000c48:	2000008c 	.word	0x2000008c
 8000c4c:	2000038c 	.word	0x2000038c
 8000c50:	08005c08 	.word	0x08005c08
 8000c54:	08005c2c 	.word	0x08005c2c
 8000c58:	08005c50 	.word	0x08005c50
 8000c5c:	200003ec 	.word	0x200003ec
 8000c60:	08005c5c 	.word	0x08005c5c
 8000c64:	08005c7c 	.word	0x08005c7c
 8000c68:	200002bc 	.word	0x200002bc
 8000c6c:	20000304 	.word	0x20000304
 8000c70:	08005c8c 	.word	0x08005c8c
 8000c74:	08005cb8 	.word	0x08005cb8

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	; 0x40
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 ffa8 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fd09 	bl	80016d8 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ccc:	f000 f8c4 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ff74 	bl	8001bd8 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf6:	f000 f8af 	bl	8000e58 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3740      	adds	r7, #64	; 0x40
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <MX_SPI1_Init+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d38:	2220      	movs	r2, #32
 8000d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d56:	f001 f8db 	bl	8001f10 <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d60:	f000 f87a 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000390 	.word	0x20000390
 8000d6c:	40013000 	.word	0x40013000

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_USART1_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART1_UART_Init+0x4c>)
 8000da8:	f001 fc7e 	bl	80026a8 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f000 f851 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002c4 	.word	0x200002c4
 8000dc0:	40013800 	.word	0x40013800

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_GPIO_Init+0x8c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e26:	f000 fc3f 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e42:	f000 fad7 	bl	80013f4 <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_MspInit+0x60>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_MspInit+0x60>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d12f      	bne.n	8000f48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f18:	23a0      	movs	r3, #160	; 0xa0
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <HAL_SPI_MspInit+0x90>)
 8000f2c:	f000 fa62 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_SPI_MspInit+0x90>)
 8000f44:	f000 fa56 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40013000 	.word	0x40013000
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010800 	.word	0x40010800

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_UART_MspInit+0x8c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d131      	bne.n	8000fe0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_UART_MspInit+0x90>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000fc2:	f000 fa17 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x94>)
 8000fdc:	f000 fa0a 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SDTimer_Handler+0x3c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <SDTimer_Handler+0x1c>
    Timer1--;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <SDTimer_Handler+0x3c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <SDTimer_Handler+0x3c>)
 800100e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SDTimer_Handler+0x40>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <SDTimer_Handler+0x34>
    Timer2--;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SDTimer_Handler+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	3b01      	subs	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <SDTimer_Handler+0x40>)
 8001026:	701a      	strb	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000619 	.word	0x20000619
 8001034:	20000618 	.word	0x20000618

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <HardFault_Handler+0x4>

0800104a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <BusFault_Handler+0x4>

08001056 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <SysTick_Handler+0x30>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SysTick_Handler+0x30>)
 8001090:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <SysTick_Handler+0x30>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b09      	cmp	r3, #9
 800109a:	d904      	bls.n	80010a6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Handler+0x30>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80010a2:	f7ff ffa7 	bl	8000ff4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a6:	f000 f8a5 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000042 	.word	0x20000042

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <SystemInit+0x5c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <SystemInit+0x5c>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <SystemInit+0x5c>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4911      	ldr	r1, [pc, #68]	; (8001110 <SystemInit+0x5c>)
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <SystemInit+0x60>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SystemInit+0x5c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <SystemInit+0x5c>)
 80010d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <SystemInit+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SystemInit+0x5c>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SystemInit+0x5c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <SystemInit+0x5c>)
 80010f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SystemInit+0x5c>)
 80010fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SystemInit+0x64>)
 8001102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001106:	609a      	str	r2, [r3, #8]
#endif 
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000
 8001114:	f8ff0000 	.word	0xf8ff0000
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800111c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800111e:	e003      	b.n	8001128 <LoopCopyDataInit>

08001120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001126:	3104      	adds	r1, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800112c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001130:	d3f6      	bcc.n	8001120 <CopyDataInit>
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001134:	e002      	b.n	800113c <LoopFillZerobss>

08001136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001138:	f842 3b04 	str.w	r3, [r2], #4

0800113c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001140:	d3f9      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ffb7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f004 fd25 	bl	8005b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff fd09 	bl	8000b60 <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r3, =_sidata
 8001150:	08005db4 	.word	0x08005db4
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001158:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800115c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001160:	20000a84 	.word	0x20000a84

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f907 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fe6e 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f911 	bl	80013da <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f8e7 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000000c 	.word	0x2000000c
 8001214:	2000061c 	.word	0x2000061c

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	2000061c 	.word	0x2000061c

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff90 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff49 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb0 	bl	8001348 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e127      	b.n	8001658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8116 	bne.w	8001652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b12      	cmp	r3, #18
 800142c:	d034      	beq.n	8001498 <HAL_GPIO_Init+0xa4>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d80d      	bhi.n	800144e <HAL_GPIO_Init+0x5a>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d02b      	beq.n	800148e <HAL_GPIO_Init+0x9a>
 8001436:	2b02      	cmp	r3, #2
 8001438:	d804      	bhi.n	8001444 <HAL_GPIO_Init+0x50>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d031      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d01c      	beq.n	800147c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001442:	e048      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001444:	2b03      	cmp	r3, #3
 8001446:	d043      	beq.n	80014d0 <HAL_GPIO_Init+0xdc>
 8001448:	2b11      	cmp	r3, #17
 800144a:	d01b      	beq.n	8001484 <HAL_GPIO_Init+0x90>
          break;
 800144c:	e043      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800144e:	4a89      	ldr	r2, [pc, #548]	; (8001674 <HAL_GPIO_Init+0x280>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d026      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001454:	4a87      	ldr	r2, [pc, #540]	; (8001674 <HAL_GPIO_Init+0x280>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d806      	bhi.n	8001468 <HAL_GPIO_Init+0x74>
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_GPIO_Init+0x284>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d020      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001460:	4a86      	ldr	r2, [pc, #536]	; (800167c <HAL_GPIO_Init+0x288>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01d      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
          break;
 8001466:	e036      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001468:	4a85      	ldr	r2, [pc, #532]	; (8001680 <HAL_GPIO_Init+0x28c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 800146e:	4a85      	ldr	r2, [pc, #532]	; (8001684 <HAL_GPIO_Init+0x290>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d016      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
 8001474:	4a84      	ldr	r2, [pc, #528]	; (8001688 <HAL_GPIO_Init+0x294>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xae>
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e028      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e023      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01e      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e019      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e012      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e008      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2bff      	cmp	r3, #255	; 0xff
 80014da:	d801      	bhi.n	80014e0 <HAL_GPIO_Init+0xec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	e001      	b.n	80014e4 <HAL_GPIO_Init+0xf0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d802      	bhi.n	80014f2 <HAL_GPIO_Init+0xfe>
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x104>
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b08      	subs	r3, #8
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	210f      	movs	r1, #15
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	401a      	ands	r2, r3
 800150a:	6a39      	ldr	r1, [r7, #32]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8096 	beq.w	8001652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_GPIO_Init+0x298>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_GPIO_Init+0x298>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_GPIO_Init+0x298>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800153e:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x29c>)
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x19e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x19a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a49      	ldr	r2, [pc, #292]	; (800169c <HAL_GPIO_Init+0x2a8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x196>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x192>
 8001582:	2303      	movs	r3, #3
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 8001586:	2304      	movs	r3, #4
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x1a0>
 8001592:	2300      	movs	r3, #0
 8001594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a4:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_GPIO_Init+0x29c>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4938      	ldr	r1, [pc, #224]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
 80015ca:	e006      	b.n	80015da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4933      	ldr	r1, [pc, #204]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	492e      	ldr	r1, [pc, #184]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 80015fe:	4013      	ands	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4924      	ldr	r1, [pc, #144]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	491f      	ldr	r1, [pc, #124]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001626:	4013      	ands	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	491a      	ldr	r1, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800164e:	4013      	ands	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f aed0 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	372c      	adds	r7, #44	; 0x2c
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	10210000 	.word	0x10210000
 8001678:	10110000 	.word	0x10110000
 800167c:	10120000 	.word	0x10120000
 8001680:	10310000 	.word	0x10310000
 8001684:	10320000 	.word	0x10320000
 8001688:	10220000 	.word	0x10220000
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40011000 	.word	0x40011000
 80016a0:	40011400 	.word	0x40011400
 80016a4:	40010400 	.word	0x40010400

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e26c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00c      	beq.n	800171e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d112      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06c      	beq.n	8001804 <HAL_RCC_OscConfig+0x12c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d168      	bne.n	8001804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e246      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x76>
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a77      	ldr	r2, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0xbc>
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a71      	ldr	r2, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fd30 	bl	8001218 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fd2c 	bl	8001218 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1fa      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xe4>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fd1c 	bl	8001218 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fd18 	bl	8001218 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1e6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10c>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1ba      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fcd1 	bl	8001218 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fccd 	bl	8001218 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e19b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fcb0 	bl	8001218 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fcac 	bl	8001218 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e17a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03a      	beq.n	800195c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fc90 	bl	8001218 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fc8c 	bl	8001218 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e15a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fada 	bl	8001ed4 <RCC_Delay>
 8001920:	e01c      	b.n	800195c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff fc76 	bl	8001218 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fc72 	bl	8001218 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d908      	bls.n	8001950 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e140      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	42420000 	.word	0x42420000
 800194c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b9e      	ldr	r3, [pc, #632]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e9      	bne.n	8001930 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a6 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b97      	ldr	r3, [pc, #604]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a93      	ldr	r2, [pc, #588]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b91      	ldr	r3, [pc, #580]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fc33 	bl	8001218 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fc2f 	bl	8001218 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0fd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x312>
 80019dc:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a7a      	ldr	r2, [pc, #488]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e02d      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x334>
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x356>
 8001a14:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a6c      	ldr	r2, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a63      	ldr	r2, [pc, #396]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fbe3 	bl	8001218 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fbdf 	bl	8001218 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0ab      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x37e>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbcd 	bl	8001218 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fbc9 	bl	8001218 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e095      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a47      	ldr	r2, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8081 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d061      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d146      	bne.n	8001b62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fb9d 	bl	8001218 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fb99 	bl	8001218 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e067      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	492d      	ldr	r1, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a19      	ldr	r1, [r3, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb6d 	bl	8001218 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fb69 	bl	8001218 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e037      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46a>
 8001b60:	e02f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fb56 	bl	8001218 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff fb52 	bl	8001218 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e020      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x498>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e013      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060

08001bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0d0      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4965      	ldr	r1, [pc, #404]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	494d      	ldr	r1, [pc, #308]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d040      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d115      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e073      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06b      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4936      	ldr	r1, [pc, #216]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff faa6 	bl	8001218 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff faa2 	bl	8001218 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e053      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d210      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	4922      	ldr	r1, [pc, #136]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e032      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f821 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1cc>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1d0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa04 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08005d14 	.word	0x08005d14
 8001da4:	20000004 	.word	0x20000004
 8001da8:	20000008 	.word	0x20000008

08001dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b490      	push	{r4, r7}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001db4:	1d3c      	adds	r4, r7, #4
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x40>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dea:	e02d      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dee:	623b      	str	r3, [r7, #32]
      break;
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	0c9b      	lsrs	r3, r3, #18
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dfe:	4413      	add	r3, r2
 8001e00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c5b      	lsrs	r3, r3, #17
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e1e:	4413      	add	r3, r2
 8001e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e004      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	623b      	str	r3, [r7, #32]
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4a:	623b      	str	r3, [r7, #32]
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc90      	pop	{r4, r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	08005cbc 	.word	0x08005cbc
 8001e60:	08005ccc 	.word	0x08005ccc
 8001e64:	40021000 	.word	0x40021000
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	003d0900 	.word	0x003d0900

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e88:	f7ff fff2 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08005d24 	.word	0x08005d24

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08005d24 	.word	0x08005d24

08001ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <RCC_Delay+0x34>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <RCC_Delay+0x38>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0a5b      	lsrs	r3, r3, #9
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ef0:	bf00      	nop
  }
  while (Delay --);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	60fa      	str	r2, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <RCC_Delay+0x1c>
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e053      	b.n	8001fca <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7fe ffc3 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	ea42 0103 	orr.w	r1, r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	0c1a      	lsrs	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f002 0204 	and.w	r2, r2, #4
 8001fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b088      	sub	sp, #32
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_SPI_Transmit+0x22>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e11e      	b.n	8002232 <HAL_SPI_Transmit+0x260>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ffc:	f7ff f90c 	bl	8001218 <HAL_GetTick>
 8002000:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d002      	beq.n	8002018 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002016:	e103      	b.n	8002220 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_SPI_Transmit+0x52>
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002028:	e0fa      	b.n	8002220 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002070:	d107      	bne.n	8002082 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d007      	beq.n	80020a0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a8:	d14b      	bne.n	8002142 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_SPI_Transmit+0xe6>
 80020b2:	8afb      	ldrh	r3, [r7, #22]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d13e      	bne.n	8002136 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	1c9a      	adds	r2, r3, #2
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020dc:	e02b      	b.n	8002136 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d112      	bne.n	8002112 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	1c9a      	adds	r2, r3, #2
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002110:	e011      	b.n	8002136 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002112:	f7ff f881 	bl	8001218 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d803      	bhi.n	800212a <HAL_SPI_Transmit+0x158>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d102      	bne.n	8002130 <HAL_SPI_Transmit+0x15e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002134:	e074      	b.n	8002220 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ce      	bne.n	80020de <HAL_SPI_Transmit+0x10c>
 8002140:	e04c      	b.n	80021dc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_SPI_Transmit+0x17e>
 800214a:	8afb      	ldrh	r3, [r7, #22]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d140      	bne.n	80021d2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002176:	e02c      	b.n	80021d2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d113      	bne.n	80021ae <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ac:	e011      	b.n	80021d2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ae:	f7ff f833 	bl	8001218 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d803      	bhi.n	80021c6 <HAL_SPI_Transmit+0x1f4>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_Transmit+0x1fa>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021d0:	e026      	b.n	8002220 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1cd      	bne.n	8002178 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fa43 	bl	800266c <SPI_EndRxTxTransaction>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
 800221c:	e000      	b.n	8002220 <HAL_SPI_Transmit+0x24e>
  }

error:
 800221e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002230:	7ffb      	ldrb	r3, [r7, #31]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b08c      	sub	sp, #48	; 0x30
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002248:	2301      	movs	r3, #1
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_SPI_TransmitReceive+0x26>
 800225c:	2302      	movs	r3, #2
 800225e:	e18a      	b.n	8002576 <HAL_SPI_TransmitReceive+0x33c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002268:	f7fe ffd6 	bl	8001218 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00f      	beq.n	80022aa <HAL_SPI_TransmitReceive+0x70>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002290:	d107      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x68>
 800229a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d003      	beq.n	80022aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022a8:	e15b      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_SPI_TransmitReceive+0x82>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_TransmitReceive+0x82>
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022c2:	e14e      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d003      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2205      	movs	r2, #5
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d007      	beq.n	800232c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800232a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002334:	d178      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x10a>
 800233e:	8b7b      	ldrh	r3, [r7, #26]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d166      	bne.n	8002412 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	1c9a      	adds	r2, r3, #2
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002368:	e053      	b.n	8002412 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d11b      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x176>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x176>
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d113      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	1c9a      	adds	r2, r3, #2
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d119      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x1b8>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d014      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	b292      	uxth	r2, r2
 80023d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	1c9a      	adds	r2, r3, #2
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023f2:	f7fe ff11 	bl	8001218 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fe:	429a      	cmp	r2, r3
 8002400:	d807      	bhi.n	8002412 <HAL_SPI_TransmitReceive+0x1d8>
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d003      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002410:	e0a7      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1a6      	bne.n	800236a <HAL_SPI_TransmitReceive+0x130>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1a1      	bne.n	800236a <HAL_SPI_TransmitReceive+0x130>
 8002426:	e07c      	b.n	8002522 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_TransmitReceive+0x1fc>
 8002430:	8b7b      	ldrh	r3, [r7, #26]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d16b      	bne.n	800250e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245c:	e057      	b.n	800250e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d11c      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x26c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d017      	beq.n	80024a6 <HAL_SPI_TransmitReceive+0x26c>
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d114      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d119      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x2ae>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d014      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024e8:	f7fe fe96 	bl	8001218 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d803      	bhi.n	8002500 <HAL_SPI_TransmitReceive+0x2c6>
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d102      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x2cc>
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800250c:	e029      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1a2      	bne.n	800245e <HAL_SPI_TransmitReceive+0x224>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d19d      	bne.n	800245e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f8a0 	bl	800266c <SPI_EndRxTxTransaction>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800253e:	e010      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	e000      	b.n	8002562 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002560:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002572:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002576:	4618      	mov	r0, r3
 8002578:	3730      	adds	r7, #48	; 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258c:	b2db      	uxtb	r3, r3
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a8:	e04c      	b.n	8002644 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d048      	beq.n	8002644 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80025b2:	f7fe fe31 	bl	8001218 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d902      	bls.n	80025c8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d13d      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e0:	d111      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ea:	d004      	beq.n	80025f6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d107      	bne.n	8002606 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d10f      	bne.n	8002630 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e00f      	b.n	8002664 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	429a      	cmp	r2, r3
 8002660:	d1a3      	bne.n	80025aa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff ff88 	bl	8002598 <SPI_WaitFlagStateUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0220 	orr.w	r2, r3, #32
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e000      	b.n	80026a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e03f      	b.n	800273a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fc44 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f90b 	bl	8002908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b088      	sub	sp, #32
 8002746:	af02      	add	r7, sp, #8
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 8083 	bne.w	800286a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Transmit+0x2e>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e07b      	b.n	800286c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Transmit+0x40>
 800277e:	2302      	movs	r3, #2
 8002780:	e074      	b.n	800286c <HAL_UART_Transmit+0x12a>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002798:	f7fe fd3e 	bl	8001218 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027aa:	e042      	b.n	8002832 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d122      	bne.n	800280a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f850 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e046      	b.n	800286c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3302      	adds	r3, #2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	e017      	b.n	8002832 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e013      	b.n	8002832 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f82d 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e023      	b.n	800286c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60ba      	str	r2, [r7, #8]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1b7      	bne.n	80027ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2200      	movs	r2, #0
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f814 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e00a      	b.n	800286c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	e02c      	b.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d028      	beq.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002894:	f7fe fcc0 	bl	8001218 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d21d      	bcs.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00f      	b.n	8002900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d0c3      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002942:	f023 030c 	bic.w	r3, r3, #12
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <UART_SetConfig+0x1ac>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d14e      	bne.n	8002a0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff fa9c 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8002974:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <UART_SetConfig+0x1b0>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	0119      	lsls	r1, r3, #4
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009a      	lsls	r2, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <UART_SetConfig+0x1b0>)
 80029ae:	fba3 0302 	umull	r0, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	3332      	adds	r3, #50	; 0x32
 80029c0:	4a3d      	ldr	r2, [pc, #244]	; (8002ab8 <UART_SetConfig+0x1b0>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029cc:	4419      	add	r1, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009a      	lsls	r2, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <UART_SetConfig+0x1b0>)
 80029e6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2064      	movs	r0, #100	; 0x64
 80029ee:	fb00 f303 	mul.w	r3, r0, r3
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	3332      	adds	r3, #50	; 0x32
 80029f8:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <UART_SetConfig+0x1b0>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	440a      	add	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002a0c:	e04d      	b.n	8002aaa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a0e:	f7ff fa39 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002a12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <UART_SetConfig+0x1b0>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	0119      	lsls	r1, r3, #4
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009a      	lsls	r2, r3, #2
 8002a3e:	441a      	add	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <UART_SetConfig+0x1b0>)
 8002a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	2064      	movs	r0, #100	; 0x64
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	3332      	adds	r3, #50	; 0x32
 8002a5e:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <UART_SetConfig+0x1b0>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6a:	4419      	add	r1, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <UART_SetConfig+0x1b0>)
 8002a84:	fba3 0302 	umull	r0, r3, r3, r2
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	2064      	movs	r0, #100	; 0x64
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	3332      	adds	r3, #50	; 0x32
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <UART_SetConfig+0x1b0>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	51eb851f 	.word	0x51eb851f

08002abc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002ac0:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <MX_FATFS_Init+0x18>)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_FATFS_Init+0x1c>)
 8002ac4:	f003 f856 	bl	8005b74 <FATFS_LinkDriver>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <MX_FATFS_Init+0x20>)
 8002ace:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000620 	.word	0x20000620
 8002ad8:	20000010 	.word	0x20000010
 8002adc:	20000624 	.word	0x20000624

08002ae0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002ae4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fce6 	bl	80004cc <SD_disk_initialize>
 8002b00:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fdc2 	bl	80006a0 <SD_disk_status>
 8002b1c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8002b36:	7bf8      	ldrb	r0, [r7, #15]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	f7fd fdc3 	bl	80006c8 <SD_disk_read>
 8002b42:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8002b5c:	7bf8      	ldrb	r0, [r7, #15]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	f7fd fe1a 	bl	800079c <SD_disk_write>
 8002b68:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	603a      	str	r2, [r7, #0]
 8002b7c:	71fb      	strb	r3, [r7, #7]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8002b82:	79b9      	ldrb	r1, [r7, #6]
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fe8b 	bl	80008a4 <SD_disk_ioctl>
 8002b8e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <disk_status+0x30>)
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	79fa      	ldrb	r2, [r7, #7]
 8002bb0:	4905      	ldr	r1, [pc, #20]	; (8002bc8 <disk_status+0x30>)
 8002bb2:	440a      	add	r2, r1
 8002bb4:	7a12      	ldrb	r2, [r2, #8]
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4798      	blx	r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000064 	.word	0x20000064

08002bcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <disk_initialize+0x48>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <disk_initialize+0x48>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <disk_initialize+0x48>)
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	4906      	ldr	r1, [pc, #24]	; (8002c14 <disk_initialize+0x48>)
 8002bfc:	440a      	add	r2, r1
 8002bfe:	7a12      	ldrb	r2, [r2, #8]
 8002c00:	4610      	mov	r0, r2
 8002c02:	4798      	blx	r3
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000064 	.word	0x20000064

08002c18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <disk_read+0x3c>)
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	689c      	ldr	r4, [r3, #8]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <disk_read+0x3c>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	7a18      	ldrb	r0, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	47a0      	blx	r4
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]
  return res;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000064 	.word	0x20000064

08002c58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <disk_write+0x3c>)
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68dc      	ldr	r4, [r3, #12]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <disk_write+0x3c>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	7a18      	ldrb	r0, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	47a0      	blx	r4
 8002c84:	4603      	mov	r3, r0
 8002c86:	75fb      	strb	r3, [r7, #23]
  return res;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000064 	.word	0x20000064

08002c98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	603a      	str	r2, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <disk_ioctl+0x38>)
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	4906      	ldr	r1, [pc, #24]	; (8002cd0 <disk_ioctl+0x38>)
 8002cb8:	440a      	add	r2, r1
 8002cba:	7a10      	ldrb	r0, [r2, #8]
 8002cbc:	79b9      	ldrb	r1, [r7, #6]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	4798      	blx	r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000064 	.word	0x20000064

08002cd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002ce8:	e007      	b.n	8002cfa <mem_cpy+0x26>
		*d++ = *s++;
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	1c53      	adds	r3, r2, #1
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	6179      	str	r1, [r7, #20]
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1e5a      	subs	r2, r3, #1
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f2      	bne.n	8002cea <mem_cpy+0x16>
}
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002d0e:	b480      	push	{r7}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002d1e:	e005      	b.n	8002d2c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	617a      	str	r2, [r7, #20]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f4      	bne.n	8002d20 <mem_set+0x12>
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002d58:	bf00      	nop
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <mem_cmp+0x40>
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	61fa      	str	r2, [r7, #28]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	61ba      	str	r2, [r7, #24]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	1acb      	subs	r3, r1, r3
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ec      	beq.n	8002d5a <mem_cmp+0x1a>
	return r;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002d96:	e002      	b.n	8002d9e <chk_chr+0x12>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <chk_chr+0x26>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d1f2      	bne.n	8002d98 <chk_chr+0xc>
	return *str;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	781b      	ldrb	r3, [r3, #0]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e038      	b.n	8002e46 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8002dd4:	492f      	ldr	r1, [pc, #188]	; (8002e94 <chk_lock+0xd4>)
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d029      	beq.n	8002e3c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002de8:	492a      	ldr	r1, [pc, #168]	; (8002e94 <chk_lock+0xd4>)
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11e      	bne.n	8002e40 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8002e02:	4924      	ldr	r1, [pc, #144]	; (8002e94 <chk_lock+0xd4>)
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3304      	adds	r3, #4
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d110      	bne.n	8002e40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002e1e:	491d      	ldr	r1, [pc, #116]	; (8002e94 <chk_lock+0xd4>)
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d102      	bne.n	8002e40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002e3a:	e007      	b.n	8002e4c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d9c3      	bls.n	8002dd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d109      	bne.n	8002e66 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <chk_lock+0x9e>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d101      	bne.n	8002e62 <chk_lock+0xa2>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e013      	b.n	8002e8a <chk_lock+0xca>
 8002e62:	2312      	movs	r3, #18
 8002e64:	e011      	b.n	8002e8a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <chk_lock+0xc4>
 8002e6c:	4909      	ldr	r1, [pc, #36]	; (8002e94 <chk_lock+0xd4>)
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	330a      	adds	r3, #10
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e82:	d101      	bne.n	8002e88 <chk_lock+0xc8>
 8002e84:	2310      	movs	r3, #16
 8002e86:	e000      	b.n	8002e8a <chk_lock+0xca>
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	2000004c 	.word	0x2000004c

08002e98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	e002      	b.n	8002eaa <enq_lock+0x12>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d809      	bhi.n	8002ec4 <enq_lock+0x2c>
 8002eb0:	490a      	ldr	r1, [pc, #40]	; (8002edc <enq_lock+0x44>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ef      	bne.n	8002ea4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000004c 	.word	0x2000004c

08002ee0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e02b      	b.n	8002f48 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8002ef0:	4955      	ldr	r1, [pc, #340]	; (8003048 <inc_lock+0x168>)
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d11b      	bne.n	8002f42 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8002f0a:	494f      	ldr	r1, [pc, #316]	; (8003048 <inc_lock+0x168>)
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3304      	adds	r3, #4
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10d      	bne.n	8002f42 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8002f26:	4948      	ldr	r1, [pc, #288]	; (8003048 <inc_lock+0x168>)
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3308      	adds	r3, #8
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d006      	beq.n	8002f50 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d9d0      	bls.n	8002ef0 <inc_lock+0x10>
 8002f4e:	e000      	b.n	8002f52 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8002f50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d145      	bne.n	8002fe4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e002      	b.n	8002f64 <inc_lock+0x84>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3301      	adds	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d809      	bhi.n	8002f7e <inc_lock+0x9e>
 8002f6a:	4937      	ldr	r1, [pc, #220]	; (8003048 <inc_lock+0x168>)
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ef      	bne.n	8002f5e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d101      	bne.n	8002f88 <inc_lock+0xa8>
 8002f84:	2300      	movs	r3, #0
 8002f86:	e05a      	b.n	800303e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8002f8e:	482e      	ldr	r0, [pc, #184]	; (8003048 <inc_lock+0x168>)
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8002fa4:	4828      	ldr	r0, [pc, #160]	; (8003048 <inc_lock+0x168>)
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4403      	add	r3, r0
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8002fbc:	4922      	ldr	r1, [pc, #136]	; (8003048 <inc_lock+0x168>)
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3308      	adds	r3, #8
 8002fcc:	4602      	mov	r2, r0
 8002fce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002fd0:	491d      	ldr	r1, [pc, #116]	; (8003048 <inc_lock+0x168>)
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	330a      	adds	r3, #10
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <inc_lock+0x124>
 8002fea:	4917      	ldr	r1, [pc, #92]	; (8003048 <inc_lock+0x168>)
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	330a      	adds	r3, #10
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <inc_lock+0x124>
 8003000:	2300      	movs	r3, #0
 8003002:	e01c      	b.n	800303e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <inc_lock+0x142>
 800300a:	490f      	ldr	r1, [pc, #60]	; (8003048 <inc_lock+0x168>)
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	330a      	adds	r3, #10
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	b299      	uxth	r1, r3
 8003020:	e001      	b.n	8003026 <inc_lock+0x146>
 8003022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003026:	4808      	ldr	r0, [pc, #32]	; (8003048 <inc_lock+0x168>)
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4403      	add	r3, r0
 8003034:	330a      	adds	r3, #10
 8003036:	460a      	mov	r2, r1
 8003038:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3301      	adds	r3, #1
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	2000004c 	.word	0x2000004c

0800304c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d82e      	bhi.n	80030be <dec_lock+0x72>
		n = Files[i].ctr;
 8003060:	491b      	ldr	r1, [pc, #108]	; (80030d0 <dec_lock+0x84>)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	330a      	adds	r3, #10
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d101      	bne.n	8003080 <dec_lock+0x34>
 800307c:	2300      	movs	r3, #0
 800307e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <dec_lock+0x40>
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	3b01      	subs	r3, #1
 800308a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800308c:	4910      	ldr	r1, [pc, #64]	; (80030d0 <dec_lock+0x84>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	330a      	adds	r3, #10
 800309c:	89fa      	ldrh	r2, [r7, #14]
 800309e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <dec_lock+0x6c>
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <dec_lock+0x84>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	737b      	strb	r3, [r7, #13]
 80030bc:	e001      	b.n	80030c2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80030be:	2302      	movs	r3, #2
 80030c0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000004c 	.word	0x2000004c

080030d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e016      	b.n	8003110 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80030e2:	490f      	ldr	r1, [pc, #60]	; (8003120 <clear_lock+0x4c>)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d108      	bne.n	800310a <clear_lock+0x36>
 80030f8:	4909      	ldr	r1, [pc, #36]	; (8003120 <clear_lock+0x4c>)
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d9e5      	bls.n	80030e2 <clear_lock+0xe>
	}
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	2000004c 	.word	0x2000004c

08003124 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003136:	2b00      	cmp	r3, #0
 8003138:	d038      	beq.n	80031ac <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003140:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	2301      	movs	r3, #1
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	f7ff fd83 	bl	8002c58 <disk_write>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e026      	b.n	80031ac <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003176:	429a      	cmp	r2, r3
 8003178:	d218      	bcs.n	80031ac <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	e010      	b.n	80031a6 <sync_window+0x82>
					wsect += fs->fsize;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	2301      	movs	r3, #1
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	f7ff fd5c 	bl	8002c58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d8eb      	bhi.n	8003184 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d01b      	beq.n	8003208 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ffa7 	bl	8003124 <sync_window>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d113      	bne.n	8003208 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	2301      	movs	r3, #1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	f7ff fd14 	bl	8002c18 <disk_read>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff82 	bl	8003124 <sync_window>
 8003220:	4603      	mov	r3, r0
 8003222:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 809b 	bne.w	8003362 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003232:	2b03      	cmp	r3, #3
 8003234:	f040 8088 	bne.w	8003348 <sync_fs+0x136>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800323e:	2b01      	cmp	r3, #1
 8003240:	f040 8082 	bne.w	8003348 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fd5e 	bl	8002d0e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2255      	movs	r2, #85	; 0x55
 8003256:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	22aa      	movs	r2, #170	; 0xaa
 800325e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2252      	movs	r2, #82	; 0x52
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2252      	movs	r2, #82	; 0x52
 800326c:	705a      	strb	r2, [r3, #1]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2261      	movs	r2, #97	; 0x61
 8003272:	709a      	strb	r2, [r3, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2241      	movs	r2, #65	; 0x41
 8003278:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2272      	movs	r2, #114	; 0x72
 800327e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2272      	movs	r2, #114	; 0x72
 8003286:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2241      	movs	r2, #65	; 0x41
 800328e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2261      	movs	r2, #97	; 0x61
 8003296:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80032d2:	0e1b      	lsrs	r3, r3, #24
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	b2da      	uxtb	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003314:	0e1b      	lsrs	r3, r3, #24
 8003316:	b2da      	uxtb	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800333a:	2301      	movs	r3, #1
 800333c:	f7ff fc8c 	bl	8002c58 <disk_write>
			fs->fsi_flag = 0;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fca0 	bl	8002c98 <disk_ioctl>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	3b02      	subs	r3, #2
 800337a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003382:	3b02      	subs	r3, #2
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d301      	bcc.n	800338e <clust2sect+0x22>
 800338a:	2300      	movs	r3, #0
 800338c:	e00a      	b.n	80033a4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003394:	461a      	mov	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	fb03 f202 	mul.w	r2, r3, r2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80033a2:	4413      	add	r3, r2
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d905      	bls.n	80033ca <get_fat+0x1c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <get_fat+0x22>
		val = 1;	/* Internal error */
 80033ca:	2301      	movs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e0a0      	b.n	8003512 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d044      	beq.n	800346a <get_fat+0xbc>
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d063      	beq.n	80034ac <get_fat+0xfe>
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 808a 	bne.w	80034fe <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0a5b      	lsrs	r3, r3, #9
 8003402:	4413      	add	r3, r2
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fed5 	bl	80031b6 <move_window>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d178      	bne.n	8003504 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	0a5b      	lsrs	r3, r3, #9
 800342c:	4413      	add	r3, r2
 800342e:	4619      	mov	r1, r3
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fec0 	bl	80031b6 <move_window>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d165      	bne.n	8003508 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <get_fat+0xb2>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	e002      	b.n	8003466 <get_fat+0xb8>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	617b      	str	r3, [r7, #20]
			break;
 8003468:	e053      	b.n	8003512 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	4413      	add	r3, r2
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fe9c 	bl	80031b6 <move_window>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d143      	bne.n	800350c <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b21a      	sxth	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	617b      	str	r3, [r7, #20]
			break;
 80034aa:	e032      	b.n	8003512 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	09db      	lsrs	r3, r3, #7
 80034b6:	4413      	add	r3, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fe7b 	bl	80031b6 <move_window>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d124      	bne.n	8003510 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	3303      	adds	r3, #3
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	061a      	lsls	r2, r3, #24
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3302      	adds	r3, #2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	4313      	orrs	r3, r2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	3201      	adds	r2, #1
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	0212      	lsls	r2, r2, #8
 80034ee:	4313      	orrs	r3, r2
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	7812      	ldrb	r2, [r2, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034fa:	617b      	str	r3, [r7, #20]
			break;
 80034fc:	e009      	b.n	8003512 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80034fe:	2301      	movs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e006      	b.n	8003512 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003504:	bf00      	nop
 8003506:	e004      	b.n	8003512 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003508:	bf00      	nop
 800350a:	e002      	b.n	8003512 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003510:	bf00      	nop
		}
	}

	return val;
 8003512:	697b      	ldr	r3, [r7, #20]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d905      	bls.n	800353a <put_fat+0x1e>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <put_fat+0x24>
		res = FR_INT_ERR;
 800353a:	2302      	movs	r3, #2
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e0f3      	b.n	8003728 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003546:	2b02      	cmp	r3, #2
 8003548:	d074      	beq.n	8003634 <put_fat+0x118>
 800354a:	2b03      	cmp	r3, #3
 800354c:	f000 8099 	beq.w	8003682 <put_fat+0x166>
 8003550:	2b01      	cmp	r3, #1
 8003552:	f040 80df 	bne.w	8003714 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4413      	add	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0a5b      	lsrs	r3, r3, #9
 800356e:	4413      	add	r3, r2
 8003570:	4619      	mov	r1, r3
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff fe1f 	bl	80031b6 <move_window>
 8003578:	4603      	mov	r3, r0
 800357a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 80cb 	bne.w	800371a <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	617a      	str	r2, [r7, #20]
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <put_fat+0x9e>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	b25a      	sxtb	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e001      	b.n	80035be <put_fat+0xa2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	0a5b      	lsrs	r3, r3, #9
 80035d4:	4413      	add	r3, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fdec 	bl	80031b6 <move_window>
 80035de:	4603      	mov	r3, r0
 80035e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80035e2:	7ffb      	ldrb	r3, [r7, #31]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 809a 	bne.w	800371e <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <put_fat+0xec>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e00e      	b.n	8003626 <put_fat+0x10a>
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b25b      	sxtb	r3, r3
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	b25a      	sxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	b25b      	sxtb	r3, r3
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b25b      	sxtb	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b25b      	sxtb	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003632:	e079      	b.n	8003728 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	4413      	add	r3, r2
 8003640:	4619      	mov	r1, r3
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fdb7 	bl	80031b6 <move_window>
 8003648:	4603      	mov	r3, r0
 800364a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800364c:	7ffb      	ldrb	r3, [r7, #31]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d167      	bne.n	8003722 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	b29b      	uxth	r3, r3
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	b29a      	uxth	r2, r3
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003680:	e052      	b.n	8003728 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	09db      	lsrs	r3, r3, #7
 800368c:	4413      	add	r3, r2
 800368e:	4619      	mov	r1, r3
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff fd90 	bl	80031b6 <move_window>
 8003696:	4603      	mov	r3, r0
 8003698:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d142      	bne.n	8003726 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3303      	adds	r3, #3
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	061a      	lsls	r2, r3, #24
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3302      	adds	r3, #2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	4313      	orrs	r3, r2
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	3201      	adds	r2, #1
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	0212      	lsls	r2, r2, #8
 80036c8:	4313      	orrs	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0c1a      	lsrs	r2, r3, #16
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	3302      	adds	r3, #2
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0e1a      	lsrs	r2, r3, #24
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	3303      	adds	r3, #3
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003712:	e009      	b.n	8003728 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8003714:	2302      	movs	r3, #2
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e006      	b.n	8003728 <put_fat+0x20c>
			if (res != FR_OK) break;
 800371a:	bf00      	nop
 800371c:	e004      	b.n	8003728 <put_fat+0x20c>
			if (res != FR_OK) break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <put_fat+0x20c>
			if (res != FR_OK) break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <put_fat+0x20c>
			if (res != FR_OK) break;
 8003726:	bf00      	nop
		}
	}

	return res;
 8003728:	7ffb      	ldrb	r3, [r7, #31]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d905      	bls.n	800374e <remove_chain+0x1c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <remove_chain+0x22>
		res = FR_INT_ERR;
 800374e:	2302      	movs	r3, #2
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e043      	b.n	80037dc <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003758:	e036      	b.n	80037c8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fe26 	bl	80033ae <get_fat>
 8003762:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d035      	beq.n	80037d6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <remove_chain+0x44>
 8003770:	2302      	movs	r3, #2
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e032      	b.n	80037dc <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d102      	bne.n	8003784 <remove_chain+0x52>
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e02b      	b.n	80037dc <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003784:	2200      	movs	r2, #0
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fec7 	bl	800351c <put_fat>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d120      	bne.n	80037da <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d00f      	beq.n	80037c4 <remove_chain+0x92>
				fs->free_clust++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3c2      	bcc.n	800375a <remove_chain+0x28>
 80037d4:	e002      	b.n	80037dc <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <remove_chain+0xaa>
			if (res != FR_OK) break;
 80037da:	bf00      	nop
		}
	}

	return res;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80037fc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <create_chain+0x2a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d31c      	bcc.n	800384a <create_chain+0x64>
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e019      	b.n	800384a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fdc8 	bl	80033ae <get_fat>
 800381e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d801      	bhi.n	800382a <create_chain+0x44>
 8003826:	2301      	movs	r3, #1
 8003828:	e076      	b.n	8003918 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d101      	bne.n	8003836 <create_chain+0x50>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	e070      	b.n	8003918 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d201      	bcs.n	8003846 <create_chain+0x60>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	e068      	b.n	8003918 <create_chain+0x132>
		scl = clst;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3301      	adds	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	d307      	bcc.n	8003870 <create_chain+0x8a>
			ncl = 2;
 8003860:	2302      	movs	r3, #2
 8003862:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d901      	bls.n	8003870 <create_chain+0x8a>
 800386c:	2300      	movs	r3, #0
 800386e:	e053      	b.n	8003918 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fd9b 	bl	80033ae <get_fat>
 8003878:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d002      	beq.n	800388e <create_chain+0xa8>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <create_chain+0xac>
			return cs;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	e042      	b.n	8003918 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	429a      	cmp	r2, r3
 8003898:	d1d9      	bne.n	800384e <create_chain+0x68>
 800389a:	2300      	movs	r3, #0
 800389c:	e03c      	b.n	8003918 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800389e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80038a0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80038a4:	6979      	ldr	r1, [r7, #20]
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fe38 	bl	800351c <put_fat>
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <create_chain+0xe4>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fe2b 	bl	800351c <put_fat>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11a      	bne.n	8003906 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d018      	beq.n	8003916 <create_chain+0x130>
			fs->free_clust--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8003904:	e007      	b.n	8003916 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <create_chain+0x12c>
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	e000      	b.n	8003914 <create_chain+0x12e>
 8003912:	2301      	movs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003916:	697b      	ldr	r3, [r7, #20]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003930:	3304      	adds	r3, #4
 8003932:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	0a5b      	lsrs	r3, r3, #9
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800393e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003942:	fbb3 f3f2 	udiv	r3, r3, r2
 8003946:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	613a      	str	r2, [r7, #16]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <clmt_clust+0x3c>
 8003958:	2300      	movs	r3, #0
 800395a:	e010      	b.n	800397e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d307      	bcc.n	8003974 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3304      	adds	r3, #4
 8003970:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003972:	e7e9      	b.n	8003948 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8003974:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	4413      	add	r3, r2
}
 800397e:	4618      	mov	r0, r3
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80039a2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d007      	beq.n	80039ba <dir_sdi+0x32>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d301      	bcc.n	80039be <dir_sdi+0x36>
		return FR_INT_ERR;
 80039ba:	2302      	movs	r3, #2
 80039bc:	e074      	b.n	8003aa8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <dir_sdi+0x56>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d105      	bne.n	80039de <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80039dc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80039ee:	461a      	mov	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d301      	bcc.n	80039fa <dir_sdi+0x72>
			return FR_INT_ERR;
 80039f6:	2302      	movs	r3, #2
 80039f8:	e056      	b.n	8003aa8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a00:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e032      	b.n	8003a6e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a0e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a16:	e01e      	b.n	8003a56 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fcc4 	bl	80033ae <get_fat>
 8003a26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d101      	bne.n	8003a34 <dir_sdi+0xac>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e039      	b.n	8003aa8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d907      	bls.n	8003a4a <dir_sdi+0xc2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d301      	bcc.n	8003a4e <dir_sdi+0xc6>
				return FR_INT_ERR;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e02c      	b.n	8003aa8 <dir_sdi+0x120>
			idx -= ic;
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d2dc      	bcs.n	8003a18 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fc80 	bl	800336c <clust2sect>
 8003a6c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <dir_sdi+0xf8>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e013      	b.n	8003aa8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	091a      	lsrs	r2, r3, #4
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a94:	461a      	mov	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	015b      	lsls	r3, r3, #5
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <dir_next+0x26>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <dir_next+0x2a>
		return FR_NO_FILE;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	e0dd      	b.n	8003c96 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 80c6 	bne.w	8003c72 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b04:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f0c0 80b0 	bcc.w	8003c72 <dir_next+0x1c2>
				return FR_NO_FILE;
 8003b12:	2304      	movs	r3, #4
 8003b14:	e0bf      	b.n	8003c96 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003b20:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003b24:	3a01      	subs	r2, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 80a2 	bne.w	8003c72 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7ff fc36 	bl	80033ae <get_fat>
 8003b42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d801      	bhi.n	8003b4e <dir_next+0x9e>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0a3      	b.n	8003c96 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d101      	bne.n	8003b5a <dir_next+0xaa>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e09d      	b.n	8003c96 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d374      	bcc.n	8003c54 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <dir_next+0xc4>
 8003b70:	2304      	movs	r3, #4
 8003b72:	e090      	b.n	8003c96 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7ff fe2f 	bl	80037e6 <create_chain>
 8003b88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <dir_next+0xe4>
 8003b90:	2307      	movs	r3, #7
 8003b92:	e080      	b.n	8003c96 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <dir_next+0xee>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e07b      	b.n	8003c96 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d101      	bne.n	8003baa <dir_next+0xfa>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e075      	b.n	8003c96 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fab7 	bl	8003124 <sync_window>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <dir_next+0x110>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06a      	b.n	8003c96 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff f89e 	bl	8002d0e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8003bde:	6979      	ldr	r1, [r7, #20]
 8003be0:	4610      	mov	r0, r2
 8003be2:	f7ff fbc3 	bl	800336c <clust2sect>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e01b      	b.n	8003c2a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fa8d 	bl	8003124 <sync_window>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <dir_next+0x164>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e040      	b.n	8003c96 <dir_next+0x1e6>
						dp->fs->winsect++;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c1a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003c1e:	3201      	adds	r2, #1
 8003c20:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	3301      	adds	r3, #1
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c30:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003c34:	461a      	mov	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d3da      	bcc.n	8003bf2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c42:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	1a8a      	subs	r2, r1, r2
 8003c50:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c62:	6979      	ldr	r1, [r7, #20]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fb81 	bl	800336c <clust2sect>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}

08003c9e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe6c 	bl	8003988 <dir_sdi>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d131      	bne.n	8003d1e <dir_alloc+0x80>
		n = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7ff fa72 	bl	80031b6 <move_window>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11f      	bne.n	8003d1c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2be5      	cmp	r3, #229	; 0xe5
 8003ce6:	d005      	beq.n	8003cf4 <dir_alloc+0x56>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d102      	bne.n	8003d08 <dir_alloc+0x6a>
 8003d02:	e00c      	b.n	8003d1e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003d04:	2300      	movs	r3, #0
 8003d06:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003d08:	2101      	movs	r1, #1
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fed0 	bl	8003ab0 <dir_next>
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0d1      	beq.n	8003cbe <dir_alloc+0x20>
 8003d1a:	e000      	b.n	8003d1e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8003d1c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d101      	bne.n	8003d28 <dir_alloc+0x8a>
 8003d24:	2307      	movs	r3, #7
 8003d26:	73fb      	strb	r3, [r7, #15]
	return res;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	331b      	adds	r3, #27
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	331a      	adds	r3, #26
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d10f      	bne.n	8003d80 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	3315      	adds	r3, #21
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	b21a      	sxth	r2, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

	return cl;
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	331a      	adds	r3, #26
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	331b      	adds	r3, #27
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	0c1a      	lsrs	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3314      	adds	r3, #20
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3315      	adds	r3, #21
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003de0:	2100      	movs	r1, #0
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fdd0 	bl	8003988 <dir_sdi>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <dir_find+0x1e>
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	e03b      	b.n	8003e6e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7ff f9d6 	bl	80031b6 <move_window>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d128      	bne.n	8003e66 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e1a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <dir_find+0x56>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	75fb      	strb	r3, [r7, #23]
 8003e2c:	e01e      	b.n	8003e6c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	330b      	adds	r3, #11
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <dir_find+0x7a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003e42:	220b      	movs	r2, #11
 8003e44:	4619      	mov	r1, r3
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f7fe ff7a 	bl	8002d40 <mem_cmp>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe2b 	bl	8003ab0 <dir_next>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0c8      	beq.n	8003df6 <dir_find+0x1e>
 8003e64:	e002      	b.n	8003e6c <dir_find+0x94>
		if (res != FR_OK) break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <dir_find+0x94>
			break;
 8003e6a:	bf00      	nop

	return res;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003e7e:	2101      	movs	r1, #1
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff0c 	bl	8003c9e <dir_alloc>
 8003e86:	4603      	mov	r3, r0
 8003e88:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d126      	bne.n	8003ede <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7ff f989 	bl	80031b6 <move_window>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d117      	bne.n	8003ede <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe ff28 	bl	8002d0e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003eca:	220b      	movs	r2, #11
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f7fe ff01 	bl	8002cd4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e002      	b.n	8003f00 <create_name+0x18>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b2f      	cmp	r3, #47	; 0x2f
 8003f06:	d0f8      	beq.n	8003efa <create_name+0x12>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f0e:	d0f4      	beq.n	8003efa <create_name+0x12>
	sfn = dp->fn;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f16:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003f18:	220b      	movs	r2, #11
 8003f1a:	2120      	movs	r1, #32
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f7fe fef6 	bl	8002d0e <mem_set>
	si = i = b = 0; ni = 8;
 8003f22:	2300      	movs	r3, #0
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	2308      	movs	r3, #8
 8003f30:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	617a      	str	r2, [r7, #20]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8003f40:	7fbb      	ldrb	r3, [r7, #30]
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d953      	bls.n	8003fee <create_name+0x106>
 8003f46:	7fbb      	ldrb	r3, [r7, #30]
 8003f48:	2b2f      	cmp	r3, #47	; 0x2f
 8003f4a:	d050      	beq.n	8003fee <create_name+0x106>
 8003f4c:	7fbb      	ldrb	r3, [r7, #30]
 8003f4e:	2b5c      	cmp	r3, #92	; 0x5c
 8003f50:	d04d      	beq.n	8003fee <create_name+0x106>
		if (c == '.' || i >= ni) {
 8003f52:	7fbb      	ldrb	r3, [r7, #30]
 8003f54:	2b2e      	cmp	r3, #46	; 0x2e
 8003f56:	d003      	beq.n	8003f60 <create_name+0x78>
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d30f      	bcc.n	8003f80 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d102      	bne.n	8003f6c <create_name+0x84>
 8003f66:	7fbb      	ldrb	r3, [r7, #30]
 8003f68:	2b2e      	cmp	r3, #46	; 0x2e
 8003f6a:	d001      	beq.n	8003f70 <create_name+0x88>
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	e073      	b.n	8004058 <create_name+0x170>
			i = 8; ni = 11;
 8003f70:	2308      	movs	r3, #8
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	230b      	movs	r3, #11
 8003f76:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8003f78:	7ffb      	ldrb	r3, [r7, #31]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e035      	b.n	8003fec <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003f80:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da08      	bge.n	8003f9a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	f043 0303 	orr.w	r3, r3, #3
 8003f8e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003f90:	7fbb      	ldrb	r3, [r7, #30]
 8003f92:	3b80      	subs	r3, #128	; 0x80
 8003f94:	4a32      	ldr	r2, [pc, #200]	; (8004060 <create_name+0x178>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8003f9a:	7fbb      	ldrb	r3, [r7, #30]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4831      	ldr	r0, [pc, #196]	; (8004064 <create_name+0x17c>)
 8003fa0:	f7fe fef4 	bl	8002d8c <chk_chr>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <create_name+0xc6>
				return FR_INVALID_NAME;
 8003faa:	2306      	movs	r3, #6
 8003fac:	e054      	b.n	8004058 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8003fae:	7fbb      	ldrb	r3, [r7, #30]
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d907      	bls.n	8003fc4 <create_name+0xdc>
 8003fb4:	7fbb      	ldrb	r3, [r7, #30]
 8003fb6:	2b5a      	cmp	r3, #90	; 0x5a
 8003fb8:	d804      	bhi.n	8003fc4 <create_name+0xdc>
				b |= 2;
 8003fba:	7ffb      	ldrb	r3, [r7, #31]
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e00c      	b.n	8003fde <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8003fc4:	7fbb      	ldrb	r3, [r7, #30]
 8003fc6:	2b60      	cmp	r3, #96	; 0x60
 8003fc8:	d909      	bls.n	8003fde <create_name+0xf6>
 8003fca:	7fbb      	ldrb	r3, [r7, #30]
 8003fcc:	2b7a      	cmp	r3, #122	; 0x7a
 8003fce:	d806      	bhi.n	8003fde <create_name+0xf6>
					b |= 1; c -= 0x20;
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	7fbb      	ldrb	r3, [r7, #30]
 8003fda:	3b20      	subs	r3, #32
 8003fdc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	613a      	str	r2, [r7, #16]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	7fba      	ldrb	r2, [r7, #30]
 8003fea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003fec:	e7a1      	b.n	8003f32 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003ff8:	7fbb      	ldrb	r3, [r7, #30]
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d801      	bhi.n	8004002 <create_name+0x11a>
 8003ffe:	2304      	movs	r3, #4
 8004000:	e000      	b.n	8004004 <create_name+0x11c>
 8004002:	2300      	movs	r3, #0
 8004004:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <create_name+0x128>
 800400c:	2306      	movs	r3, #6
 800400e:	e023      	b.n	8004058 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2be5      	cmp	r3, #229	; 0xe5
 8004016:	d102      	bne.n	800401e <create_name+0x136>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2205      	movs	r2, #5
 800401c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d102      	bne.n	800402a <create_name+0x142>
 8004024:	7ffb      	ldrb	r3, [r7, #31]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800402a:	7ffb      	ldrb	r3, [r7, #31]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d103      	bne.n	800403c <create_name+0x154>
 8004034:	7fbb      	ldrb	r3, [r7, #30]
 8004036:	f043 0310 	orr.w	r3, r3, #16
 800403a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800403c:	7ffb      	ldrb	r3, [r7, #31]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b04      	cmp	r3, #4
 8004044:	d103      	bne.n	800404e <create_name+0x166>
 8004046:	7fbb      	ldrb	r3, [r7, #30]
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	330b      	adds	r3, #11
 8004052:	7fba      	ldrb	r2, [r7, #30]
 8004054:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004056:	2300      	movs	r3, #0
#endif
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	08005d2c 	.word	0x08005d2c
 8004064:	08005cd0 	.word	0x08005cd0

08004068 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b2f      	cmp	r3, #47	; 0x2f
 8004078:	d003      	beq.n	8004082 <follow_path+0x1a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b5c      	cmp	r3, #92	; 0x5c
 8004080:	d102      	bne.n	8004088 <follow_path+0x20>
		path++;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b1f      	cmp	r3, #31
 8004096:	d80a      	bhi.n	80040ae <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004098:	2100      	movs	r1, #0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fc74 	bl	8003988 <dir_sdi>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040ac:	e045      	b.n	800413a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80040ae:	463b      	mov	r3, r7
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff18 	bl	8003ee8 <create_name>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d136      	bne.n	8004130 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fe88 	bl	8003dd8 <dir_find>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040d2:	7adb      	ldrb	r3, [r3, #11]
 80040d4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d128      	bne.n	8004134 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d123      	bne.n	8004134 <follow_path+0xcc>
 80040ec:	2305      	movs	r3, #5
 80040ee:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80040f0:	e020      	b.n	8004134 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80040f2:	7bbb      	ldrb	r3, [r7, #14]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11d      	bne.n	8004138 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004102:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	330b      	adds	r3, #11
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8004112:	2305      	movs	r3, #5
 8004114:	73fb      	strb	r3, [r7, #15]
 8004116:	e010      	b.n	800413a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fe06 	bl	8003d32 <ld_clust>
 8004126:	4602      	mov	r2, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800412e:	e7be      	b.n	80040ae <follow_path+0x46>
			if (res != FR_OK) break;
 8004130:	bf00      	nop
 8004132:	e002      	b.n	800413a <follow_path+0xd2>
				break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004138:	bf00      	nop
		}
	}

	return res;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d031      	beq.n	80041be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e002      	b.n	8004168 <get_ldnumber+0x24>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3301      	adds	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b20      	cmp	r3, #32
 800416e:	d903      	bls.n	8004178 <get_ldnumber+0x34>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b3a      	cmp	r3, #58	; 0x3a
 8004176:	d1f4      	bne.n	8004162 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b3a      	cmp	r3, #58	; 0x3a
 800417e:	d11c      	bne.n	80041ba <get_ldnumber+0x76>
			tp = *path;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	60fa      	str	r2, [r7, #12]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	3b30      	subs	r3, #48	; 0x30
 8004190:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b09      	cmp	r3, #9
 8004196:	d80e      	bhi.n	80041b6 <get_ldnumber+0x72>
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	d10a      	bne.n	80041b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <get_ldnumber+0x72>
					vol = (int)i;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3301      	adds	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	e002      	b.n	80041c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80041be:	693b      	ldr	r3, [r7, #16]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
	...

080041cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe ffe3 	bl	80031b6 <move_window>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <check_fs+0x2e>
		return 3;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e04a      	b.n	8004290 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004200:	3301      	adds	r3, #1
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	b21a      	sxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800420e:	b21b      	sxth	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	b21b      	sxth	r3, r3
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <check_fs+0xcc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d001      	beq.n	800421e <check_fs+0x52>
		return 2;
 800421a:	2302      	movs	r3, #2
 800421c:	e038      	b.n	8004290 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3336      	adds	r3, #54	; 0x36
 8004222:	3303      	adds	r3, #3
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	061a      	lsls	r2, r3, #24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3336      	adds	r3, #54	; 0x36
 800422c:	3302      	adds	r3, #2
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	4313      	orrs	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	3236      	adds	r2, #54	; 0x36
 8004238:	3201      	adds	r2, #1
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	0212      	lsls	r2, r2, #8
 800423e:	4313      	orrs	r3, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004246:	4313      	orrs	r3, r2
 8004248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <check_fs+0xd0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <check_fs+0x8a>
		return 0;
 8004252:	2300      	movs	r3, #0
 8004254:	e01c      	b.n	8004290 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3352      	adds	r3, #82	; 0x52
 800425a:	3303      	adds	r3, #3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	061a      	lsls	r2, r3, #24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3352      	adds	r3, #82	; 0x52
 8004264:	3302      	adds	r3, #2
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	4313      	orrs	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	3252      	adds	r2, #82	; 0x52
 8004270:	3201      	adds	r2, #1
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	0212      	lsls	r2, r2, #8
 8004276:	4313      	orrs	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800427e:	4313      	orrs	r3, r2
 8004280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <check_fs+0xd0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <check_fs+0xc2>
		return 0;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <check_fs+0xc4>

	return 1;
 800428e:	2301      	movs	r3, #1
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	ffffaa55 	.word	0xffffaa55
 800429c:	00544146 	.word	0x00544146

080042a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b096      	sub	sp, #88	; 0x58
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80042b4:	68b8      	ldr	r0, [r7, #8]
 80042b6:	f7ff ff45 	bl	8004144 <get_ldnumber>
 80042ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da01      	bge.n	80042c6 <find_volume+0x26>
 80042c2:	230b      	movs	r3, #11
 80042c4:	e2aa      	b.n	800481c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80042c6:	4a9e      	ldr	r2, [pc, #632]	; (8004540 <find_volume+0x2a0>)
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <find_volume+0x3a>
 80042d6:	230c      	movs	r3, #12
 80042d8:	e2a0      	b.n	800481c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01b      	beq.n	8004322 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fc51 	bl	8002b98 <disk_status>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80042fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10c      	bne.n	8004322 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <find_volume+0x7e>
 800430e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800431a:	230a      	movs	r3, #10
 800431c:	e27e      	b.n	800481c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800431e:	2300      	movs	r3, #0
 8004320:	e27c      	b.n	800481c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fc46 	bl	8002bcc <disk_initialize>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004352:	2303      	movs	r3, #3
 8004354:	e262      	b.n	800481c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <find_volume+0xcc>
 800435c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004368:	230a      	movs	r3, #10
 800436a:	e257      	b.n	800481c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004370:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004374:	f7ff ff2a 	bl	80041cc <check_fs>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800437e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004382:	2b01      	cmp	r3, #1
 8004384:	d155      	bne.n	8004432 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004386:	2300      	movs	r3, #0
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
 800438a:	e029      	b.n	80043e0 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800438c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004396:	4413      	add	r3, r2
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	3304      	adds	r3, #4
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <find_volume+0x12a>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	330b      	adds	r3, #11
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	061a      	lsls	r2, r3, #24
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	330a      	adds	r3, #10
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	4313      	orrs	r3, r2
 80043b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b8:	3209      	adds	r2, #9
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	0212      	lsls	r2, r2, #8
 80043be:	4313      	orrs	r3, r2
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	3208      	adds	r2, #8
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	e000      	b.n	80043cc <find_volume+0x12c>
 80043ca:	2200      	movs	r2, #0
 80043cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80043d4:	440b      	add	r3, r1
 80043d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	3301      	adds	r3, #1
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
 80043e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d9d2      	bls.n	800438c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80043e6:	2300      	movs	r3, #0
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <find_volume+0x156>
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	3b01      	subs	r3, #1
 80043f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80043f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80043fe:	4413      	add	r3, r2
 8004400:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <find_volume+0x178>
 800440c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800440e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004410:	f7ff fedc 	bl	80041cc <check_fs>
 8004414:	4603      	mov	r3, r0
 8004416:	e000      	b.n	800441a <find_volume+0x17a>
 8004418:	2302      	movs	r3, #2
 800441a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800441e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <find_volume+0x192>
 8004426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004428:	3301      	adds	r3, #1
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	2b03      	cmp	r3, #3
 8004430:	d9e1      	bls.n	80043f6 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004436:	2b03      	cmp	r3, #3
 8004438:	d101      	bne.n	800443e <find_volume+0x19e>
 800443a:	2301      	movs	r3, #1
 800443c:	e1ee      	b.n	800481c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800443e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <find_volume+0x1aa>
 8004446:	230d      	movs	r3, #13
 8004448:	e1e8      	b.n	800481c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	7b1b      	ldrb	r3, [r3, #12]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	b21a      	sxth	r2, r3
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	7adb      	ldrb	r3, [r3, #11]
 8004456:	b21b      	sxth	r3, r3
 8004458:	4313      	orrs	r3, r2
 800445a:	b21b      	sxth	r3, r3
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d001      	beq.n	8004466 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8004462:	230d      	movs	r3, #13
 8004464:	e1da      	b.n	800481c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	7ddb      	ldrb	r3, [r3, #23]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	b21a      	sxth	r2, r3
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	7d9b      	ldrb	r3, [r3, #22]
 8004472:	b21b      	sxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	b21b      	sxth	r3, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d112      	bne.n	80044a8 <find_volume+0x208>
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004488:	061a      	lsls	r2, r3, #24
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	4313      	orrs	r3, r2
 8004494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004496:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800449a:	0212      	lsls	r2, r2, #8
 800449c:	4313      	orrs	r3, r2
 800449e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80044a4:	4313      	orrs	r3, r2
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	7c1a      	ldrb	r2, [r3, #16]
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d006      	beq.n	80044d2 <find_volume+0x232>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d001      	beq.n	80044d2 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80044ce:	230d      	movs	r3, #13
 80044d0:	e1a4      	b.n	800481c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80044d8:	461a      	mov	r2, r3
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	7b5a      	ldrb	r2, [r3, #13]
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <find_volume+0x26c>
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80044fc:	461a      	mov	r2, r3
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004504:	3b01      	subs	r3, #1
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800450c:	230d      	movs	r3, #13
 800450e:	e185      	b.n	800481c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	7c9b      	ldrb	r3, [r3, #18]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	b21a      	sxth	r2, r3
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	7c5b      	ldrb	r3, [r3, #17]
 800451c:	b21b      	sxth	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b21b      	sxth	r3, r3
 8004522:	b29a      	uxth	r2, r3
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800453a:	230d      	movs	r3, #13
 800453c:	e16e      	b.n	800481c <find_volume+0x57c>
 800453e:	bf00      	nop
 8004540:	20000044 	.word	0x20000044

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	7d1b      	ldrb	r3, [r3, #20]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	b21a      	sxth	r2, r3
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	7cdb      	ldrb	r3, [r3, #19]
 8004550:	b21b      	sxth	r3, r3
 8004552:	4313      	orrs	r3, r2
 8004554:	b21b      	sxth	r3, r3
 8004556:	b29b      	uxth	r3, r3
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800455a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455c:	2b00      	cmp	r3, #0
 800455e:	d112      	bne.n	8004586 <find_volume+0x2e6>
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004566:	061a      	lsls	r2, r3, #24
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	4313      	orrs	r3, r2
 8004572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004574:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004578:	0212      	lsls	r2, r2, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004582:	4313      	orrs	r3, r2
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	7bdb      	ldrb	r3, [r3, #15]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	b21a      	sxth	r2, r3
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	7b9b      	ldrb	r3, [r3, #14]
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800459a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <find_volume+0x304>
 80045a0:	230d      	movs	r3, #13
 80045a2:	e13b      	b.n	800481c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80045a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80045a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a8:	4413      	add	r3, r2
 80045aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ac:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80045b0:	0912      	lsrs	r2, r2, #4
 80045b2:	b292      	uxth	r2, r2
 80045b4:	4413      	add	r3, r2
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80045b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	429a      	cmp	r2, r3
 80045be:	d201      	bcs.n	80045c4 <find_volume+0x324>
 80045c0:	230d      	movs	r3, #13
 80045c2:	e12b      	b.n	800481c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80045c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045cc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80045d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <find_volume+0x340>
 80045dc:	230d      	movs	r3, #13
 80045de:	e11d      	b.n	800481c <find_volume+0x57c>
	fmt = FS_FAT12;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d902      	bls.n	80045f6 <find_volume+0x356>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d902      	bls.n	8004606 <find_volume+0x366>
 8004600:	2303      	movs	r3, #3
 8004602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004614:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461c:	441a      	add	r2, r3
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	441a      	add	r2, r3
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004634:	2b03      	cmp	r3, #3
 8004636:	d121      	bne.n	800467c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <find_volume+0x3a6>
 8004642:	230d      	movs	r3, #13
 8004644:	e0ea      	b.n	800481c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	4313      	orrs	r3, r2
 8004658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800465a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800465e:	0212      	lsls	r2, r2, #8
 8004660:	4313      	orrs	r3, r2
 8004662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004664:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004668:	431a      	orrs	r2, r3
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
 800467a:	e025      	b.n	80046c8 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <find_volume+0x3ea>
 8004686:	230d      	movs	r3, #13
 8004688:	e0c8      	b.n	800481c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	441a      	add	r2, r3
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800469a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d104      	bne.n	80046ac <find_volume+0x40c>
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	e00c      	b.n	80046c6 <find_volume+0x426>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	085a      	lsrs	r2, r3, #1
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d201      	bcs.n	80046de <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 80046da:	230d      	movs	r3, #13
 80046dc:	e09e      	b.n	800481c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80046fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004700:	2b03      	cmp	r3, #3
 8004702:	d177      	bne.n	80047f4 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	b21a      	sxth	r2, r3
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004714:	b21b      	sxth	r3, r3
 8004716:	4313      	orrs	r3, r2
 8004718:	b21b      	sxth	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d16a      	bne.n	80047f4 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800471e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004720:	3301      	adds	r3, #1
 8004722:	4619      	mov	r1, r3
 8004724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004726:	f7fe fd46 	bl	80031b6 <move_window>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d161      	bne.n	80047f4 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	b21a      	sxth	r2, r3
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004748:	b21b      	sxth	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	b21b      	sxth	r3, r3
 800474e:	4a35      	ldr	r2, [pc, #212]	; (8004824 <find_volume+0x584>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d14f      	bne.n	80047f4 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	061a      	lsls	r2, r3, #24
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	789b      	ldrb	r3, [r3, #2]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	4313      	orrs	r3, r2
 8004762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004764:	7852      	ldrb	r2, [r2, #1]
 8004766:	0212      	lsls	r2, r2, #8
 8004768:	4313      	orrs	r3, r2
 800476a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <find_volume+0x588>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d13e      	bne.n	80047f4 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800477c:	061a      	lsls	r2, r3, #24
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	4313      	orrs	r3, r2
 8004788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800478a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800478e:	0212      	lsls	r2, r2, #8
 8004790:	4313      	orrs	r3, r2
 8004792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004794:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004798:	4313      	orrs	r3, r2
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <find_volume+0x58c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d129      	bne.n	80047f4 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80047a6:	061a      	lsls	r2, r3, #24
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	4313      	orrs	r3, r2
 80047b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80047b8:	0212      	lsls	r2, r2, #8
 80047ba:	4313      	orrs	r3, r2
 80047bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047be:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80047c2:	431a      	orrs	r2, r3
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80047d0:	061a      	lsls	r2, r3, #24
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	4313      	orrs	r3, r2
 80047dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047de:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80047e2:	0212      	lsls	r2, r2, #8
 80047e4:	4313      	orrs	r3, r2
 80047e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047e8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80047ec:	431a      	orrs	r2, r3
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80047fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80047fe:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <find_volume+0x590>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <find_volume+0x590>)
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <find_volume+0x590>)
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004816:	f7fe fc5d 	bl	80030d4 <clear_lock>
#endif

	return FR_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3758      	adds	r7, #88	; 0x58
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	ffffaa55 	.word	0xffffaa55
 8004828:	41615252 	.word	0x41615252
 800482c:	61417272 	.word	0x61417272
 8004830:	20000048 	.word	0x20000048

08004834 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d022      	beq.n	800488c <validate+0x58>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01d      	beq.n	800488c <validate+0x58>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004856:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <validate+0x58>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004864:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800486e:	429a      	cmp	r2, r3
 8004870:	d10c      	bne.n	800488c <validate+0x58>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004878:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe f98b 	bl	8002b98 <disk_status>
 8004882:	4603      	mov	r3, r0
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800488c:	2309      	movs	r3, #9
 800488e:	e000      	b.n	8004892 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80048ae:	f107 0310 	add.w	r3, r7, #16
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fc46 	bl	8004144 <get_ldnumber>
 80048b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da01      	bge.n	80048c4 <f_mount+0x28>
 80048c0:	230b      	movs	r3, #11
 80048c2:	e02d      	b.n	8004920 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <f_mount+0x8c>)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80048d4:	69b8      	ldr	r0, [r7, #24]
 80048d6:	f7fe fbfd 	bl	80030d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	490d      	ldr	r1, [pc, #52]	; (8004928 <f_mount+0x8c>)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <f_mount+0x6a>
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <f_mount+0x6e>
 8004906:	2300      	movs	r3, #0
 8004908:	e00a      	b.n	8004920 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800490a:	f107 0108 	add.w	r1, r7, #8
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	2200      	movs	r2, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fcc3 	bl	80042a0 <find_volume>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000044 	.word	0x20000044

0800492c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8004932:	af00      	add	r7, sp, #0
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	6018      	str	r0, [r3, #0]
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	1dfb      	adds	r3, r7, #7
 8004942:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <f_open+0x26>
 800494e:	2309      	movs	r3, #9
 8004950:	e1f2      	b.n	8004d38 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	1dfa      	adds	r2, r7, #7
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	f002 021f 	and.w	r2, r2, #31
 8004968:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	f107 0108 	add.w	r1, r7, #8
 8004978:	f107 0320 	add.w	r3, r7, #32
 800497c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fc8d 	bl	80042a0 <find_volume>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800498c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 81cf 	bne.w	8004d34 <f_open+0x408>
		INIT_BUF(dj);
 8004996:	f107 0320 	add.w	r3, r7, #32
 800499a:	f107 0214 	add.w	r2, r7, #20
 800499e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80049a2:	f107 0308 	add.w	r3, r7, #8
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	f107 0320 	add.w	r3, r7, #32
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fb5a 	bl	8004068 <follow_path>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80049ba:	f107 0320 	add.w	r3, r7, #32
 80049be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049c2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80049c6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11a      	bne.n	8004a04 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80049ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <f_open+0xb2>
				res = FR_INVALID_NAME;
 80049d6:	2306      	movs	r3, #6
 80049d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80049dc:	e012      	b.n	8004a04 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	f107 0320 	add.w	r3, r7, #32
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f9e1 	bl	8002dc0 <chk_lock>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004a04:	1dfb      	adds	r3, r7, #7
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	f003 031c 	and.w	r3, r3, #28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80cc 	beq.w	8004baa <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8004a12:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01f      	beq.n	8004a5a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004a1a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d10e      	bne.n	8004a40 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004a22:	f7fe fa39 	bl	8002e98 <enq_lock>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <f_open+0x10e>
 8004a2c:	f107 0320 	add.w	r3, r7, #32
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fa20 	bl	8003e76 <dir_register>
 8004a36:	4603      	mov	r3, r0
 8004a38:	e000      	b.n	8004a3c <f_open+0x110>
 8004a3a:	2312      	movs	r3, #18
 8004a3c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	1dfa      	adds	r2, r7, #7
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8004a4c:	f107 0320 	add.w	r3, r7, #32
 8004a50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a54:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004a58:	e014      	b.n	8004a84 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004a5a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004a5e:	330b      	adds	r3, #11
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	f003 0311 	and.w	r3, r3, #17
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <f_open+0x146>
					res = FR_DENIED;
 8004a6a:	2307      	movs	r3, #7
 8004a6c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004a70:	e008      	b.n	8004a84 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004a72:	1dfb      	adds	r3, r7, #7
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <f_open+0x158>
						res = FR_EXIST;
 8004a7e:	2308      	movs	r3, #8
 8004a80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004a84:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f040 80af 	bne.w	8004bec <f_open+0x2c0>
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a8 	beq.w	8004bec <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8004a9c:	f7fe f820 	bl	8002ae0 <get_fattime>
 8004aa0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004aa4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004aa8:	330e      	adds	r3, #14
 8004aaa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ac0:	330f      	adds	r3, #15
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004aca:	0c1a      	lsrs	r2, r3, #16
 8004acc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ada:	0e1a      	lsrs	r2, r3, #24
 8004adc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ae0:	3311      	adds	r3, #17
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004ae6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004aea:	330b      	adds	r3, #11
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8004af0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004af4:	331c      	adds	r3, #28
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004afe:	331d      	adds	r3, #29
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b08:	331e      	adds	r3, #30
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b12:	331f      	adds	r3, #31
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004b18:	f107 0320 	add.w	r3, r7, #32
 8004b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b20:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff f904 	bl	8003d32 <ld_clust>
 8004b2a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8004b2e:	2100      	movs	r1, #0
 8004b30:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8004b34:	f7ff f92a 	bl	8003d8c <st_clust>
				dj.fs->wflag = 1;
 8004b38:	f107 0320 	add.w	r3, r7, #32
 8004b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8004b46:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d04e      	beq.n	8004bec <f_open+0x2c0>
					dw = dj.fs->winsect;
 8004b4e:	f107 0320 	add.w	r3, r7, #32
 8004b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b56:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004b5a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8004b5e:	f107 0320 	add.w	r3, r7, #32
 8004b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b66:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fde1 	bl	8003732 <remove_chain>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8004b76:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d136      	bne.n	8004bec <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004b7e:	f107 0320 	add.w	r3, r7, #32
 8004b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b86:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8004b90:	f107 0320 	add.w	r3, r7, #32
 8004b94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b98:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fb0a 	bl	80031b6 <move_window>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004ba8:	e020      	b.n	8004bec <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004baa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d11c      	bne.n	8004bec <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004bb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bb6:	330b      	adds	r3, #11
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <f_open+0x29e>
					res = FR_NO_FILE;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004bc8:	e010      	b.n	8004bec <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004bca:	1dfb      	adds	r3, r7, #7
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <f_open+0x2c0>
 8004bd6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004bda:	330b      	adds	r3, #11
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <f_open+0x2c0>
						res = FR_DENIED;
 8004be6:	2307      	movs	r3, #7
 8004be8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8004bec:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d13d      	bne.n	8004c70 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8004c00:	1dfb      	adds	r3, r7, #7
 8004c02:	1dfa      	adds	r2, r7, #7
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	f042 0220 	orr.w	r2, r2, #32
 8004c0a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004c0c:	f107 0320 	add.w	r3, r7, #32
 8004c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c14:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004c2c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c30:	1dfb      	adds	r3, r7, #7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	f107 0320 	add.w	r3, r7, #32
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe f948 	bl	8002ee0 <inc_lock>
 8004c50:	4602      	mov	r2, r0
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <f_open+0x344>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8004c70:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d15d      	bne.n	8004d34 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8004c78:	f107 030c 	add.w	r3, r7, #12
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	1dfa      	adds	r2, r7, #7
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004c92:	f107 0320 	add.w	r3, r7, #32
 8004c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c9a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff f847 	bl	8003d32 <ld_clust>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004cb0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cb4:	331f      	adds	r3, #31
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	061a      	lsls	r2, r3, #24
 8004cba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cbe:	331e      	adds	r3, #30
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004cca:	321d      	adds	r2, #29
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	0212      	lsls	r2, r2, #8
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004cd6:	321c      	adds	r2, #28
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8004cfe:	f107 030c 	add.w	r3, r7, #12
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8004d0a:	f107 0320 	add.w	r3, r7, #32
 8004d0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d12:	f107 030c 	add.w	r3, r7, #12
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8004d1c:	f107 030c 	add.w	r3, r7, #12
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d26:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8004d2a:	f107 030c 	add.w	r3, r7, #12
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8004d34:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b08c      	sub	sp, #48	; 0x30
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fd6a 	bl	8004834 <validate>
 8004d60:	4603      	mov	r3, r0
 8004d62:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <f_read+0x2c>
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	e150      	b.n	8005010 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004d7e:	e147      	b.n	8005010 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004d8e:	2307      	movs	r3, #7
 8004d90:	e13e      	b.n	8005010 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	f240 812d 	bls.w	8005006 <f_read+0x2c4>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004db0:	e129      	b.n	8005006 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 80f2 	bne.w	8004fa6 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004dc8:	0a5b      	lsrs	r3, r3, #9
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	4013      	ands	r3, r2
 8004ddc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d139      	bne.n	8004e58 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e018      	b.n	8004e2a <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004e08:	4619      	mov	r1, r3
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7fe fd88 	bl	8003920 <clmt_clust>
 8004e10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e12:	e00a      	b.n	8004e2a <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f7fe fac3 	bl	80033ae <get_fat>
 8004e28:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d805      	bhi.n	8004e3c <f_read+0xfa>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0e9      	b.n	8005010 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d105      	bne.n	8004e50 <f_read+0x10e>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0df      	b.n	8005010 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fe fa80 	bl	800336c <clust2sect>
 8004e6c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <f_read+0x13e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e0c7      	b.n	8005010 <f_read+0x2ce>
			sect += csect;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0a5b      	lsrs	r3, r3, #9
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d046      	beq.n	8004f22 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004e94:	7dfa      	ldrb	r2, [r7, #23]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	4413      	add	r3, r2
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004ea0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d908      	bls.n	8004eba <f_read+0x178>
					cc = fp->fs->csize - csect;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ec0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	f7fd fea5 	bl	8002c18 <disk_read>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d015      	beq.n	8004f1a <f_read+0x1d8>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d90d      	bls.n	8004f1a <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	025b      	lsls	r3, r3, #9
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fd fedd 	bl	8002cd4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	025b      	lsls	r3, r3, #9
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8004f20:	e05b      	b.n	8004fda <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d037      	beq.n	8004f9e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01d      	beq.n	8004f78 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f42:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f7fd fe82 	bl	8002c58 <disk_write>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004f62:	2301      	movs	r3, #1
 8004f64:	e054      	b.n	8005010 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f7e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	2301      	movs	r3, #1
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	f7fd fe46 	bl	8002c18 <disk_read>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e038      	b.n	8005010 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8004fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d901      	bls.n	8004fc2 <f_read+0x280>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6a38      	ldr	r0, [r7, #32]
 8004fd6:	f7fd fe7d 	bl	8002cd4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004fda:	6a3a      	ldr	r2, [r7, #32]
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	4413      	add	r3, r2
 8004fe0:	623b      	str	r3, [r7, #32]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	441a      	add	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	441a      	add	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f47f aed2 	bne.w	8004db2 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fbff 	bl	8004834 <validate>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <f_write+0x2c>
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	e192      	b.n	800536a <f_write+0x352>
	if (fp->err)							/* Check error */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005054:	e189      	b.n	800536a <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005064:	2307      	movs	r3, #7
 8005066:	e180      	b.n	800536a <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005078:	429a      	cmp	r2, r3
 800507a:	f080 8158 	bcs.w	800532e <f_write+0x316>
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005082:	e154      	b.n	800532e <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800508a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 8114 	bne.w	80052bc <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800509a:	0a5b      	lsrs	r3, r3, #9
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050a4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4013      	ands	r3, r2
 80050ae:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80050b0:	7dbb      	ldrb	r3, [r7, #22]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d151      	bne.n	800515a <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10f      	bne.n	80050e0 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d121      	bne.n	8005112 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fb85 	bl	80037e6 <create_chain>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24
 80050de:	e018      	b.n	8005112 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80050f0:	4619      	mov	r1, r3
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7fe fc14 	bl	8003920 <clmt_clust>
 80050f8:	6278      	str	r0, [r7, #36]	; 0x24
 80050fa:	e00a      	b.n	8005112 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fe fb6b 	bl	80037e6 <create_chain>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 810f 	beq.w	8005338 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <f_write+0x114>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005128:	2302      	movs	r3, #2
 800512a:	e11e      	b.n	800536a <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d105      	bne.n	8005140 <f_write+0x128>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800513c:	2301      	movs	r3, #1
 800513e:	e114      	b.n	800536a <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <f_write+0x142>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01d      	beq.n	80051a4 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800516e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800517a:	2301      	movs	r3, #1
 800517c:	f7fd fd6c 	bl	8002c58 <disk_write>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800518e:	2301      	movs	r3, #1
 8005190:	e0eb      	b.n	800536a <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fe f8da 	bl	800336c <clust2sect>
 80051b8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <f_write+0x1b4>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80051c8:	2302      	movs	r3, #2
 80051ca:	e0ce      	b.n	800536a <f_write+0x352>
			sect += csect;
 80051cc:	7dbb      	ldrb	r3, [r7, #22]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	0a5b      	lsrs	r3, r3, #9
 80051d8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d048      	beq.n	8005272 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80051e0:	7dba      	ldrb	r2, [r7, #22]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80051ec:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d908      	bls.n	8005206 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80051fe:	461a      	mov	r2, r3
 8005200:	7dbb      	ldrb	r3, [r7, #22]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800520c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	69b9      	ldr	r1, [r7, #24]
 8005216:	f7fd fd1f 	bl	8002c58 <disk_write>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005228:	2301      	movs	r3, #1
 800522a:	e09e      	b.n	800536a <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	429a      	cmp	r2, r3
 800523a:	d916      	bls.n	800526a <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005252:	4619      	mov	r1, r3
 8005254:	f7fd fd3e 	bl	8002cd4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800525e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	623b      	str	r3, [r7, #32]
				continue;
 8005270:	e047      	b.n	8005302 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d01a      	beq.n	80052b4 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800528a:	429a      	cmp	r2, r3
 800528c:	d212      	bcs.n	80052b4 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005294:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	2301      	movs	r3, #1
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	f7fd fcbb 	bl	8002c18 <disk_read>
 80052a2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80052b0:	2301      	movs	r3, #1
 80052b2:	e05a      	b.n	800536a <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052ca:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d901      	bls.n	80052d8 <f_write+0x2c0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	69b9      	ldr	r1, [r7, #24]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fcf2 	bl	8002cd4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80052f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	4413      	add	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	441a      	add	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	441a      	add	r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f aea7 	bne.w	8005084 <f_write+0x6c>
 8005336:	e000      	b.n	800533a <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005338:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005346:	429a      	cmp	r2, r3
 8005348:	d905      	bls.n	8005356 <f_write+0x33e>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800535c:	f043 0320 	orr.w	r3, r3, #32
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fa5a 	bl	8004834 <validate>
 8005380:	4603      	mov	r3, r0
 8005382:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 80a8 	bne.w	80054dc <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80a0 	beq.w	80054dc <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d019      	beq.n	80053de <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053b0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80053bc:	2301      	movs	r3, #1
 80053be:	f7fd fc4b 	bl	8002c58 <disk_write>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80053c8:	2301      	movs	r3, #1
 80053ca:	e088      	b.n	80054de <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80053d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fd fee2 	bl	80031b6 <move_window>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d16f      	bne.n	80054dc <f_sync+0x16a>
				dir = fp->dir_ptr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005402:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	330b      	adds	r3, #11
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	330b      	adds	r3, #11
 800540e:	f042 0220 	orr.w	r2, r2, #32
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	331c      	adds	r3, #28
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800542a:	b29b      	uxth	r3, r3
 800542c:	0a1b      	lsrs	r3, r3, #8
 800542e:	b29a      	uxth	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	331d      	adds	r3, #29
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800543e:	0c1a      	lsrs	r2, r3, #16
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	331e      	adds	r3, #30
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800544e:	0e1a      	lsrs	r2, r3, #24
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	331f      	adds	r3, #31
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800545e:	4619      	mov	r1, r3
 8005460:	6938      	ldr	r0, [r7, #16]
 8005462:	f7fe fc93 	bl	8003d8c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005466:	f7fd fb3b 	bl	8002ae0 <get_fattime>
 800546a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	3316      	adds	r3, #22
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	b29b      	uxth	r3, r3
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	b29a      	uxth	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3317      	adds	r3, #23
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	0c1a      	lsrs	r2, r3, #16
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3318      	adds	r3, #24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	0e1a      	lsrs	r2, r3, #24
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3319      	adds	r3, #25
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3312      	adds	r3, #18
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3313      	adds	r3, #19
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80054b4:	f023 0320 	bic.w	r3, r3, #32
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd fe9d 	bl	8003212 <sync_fs>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff3f 	bl	8005372 <f_sync>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f998 	bl	8004834 <validate>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10e      	bne.n	800552c <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005514:	4618      	mov	r0, r3
 8005516:	f7fd fd99 	bl	800304c <dec_lock>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b090      	sub	sp, #64	; 0x40
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff f977 	bl	8004834 <validate>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800554c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <f_lseek+0x24>
 8005554:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005558:	e247      	b.n	80059ea <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800556a:	e23e      	b.n	80059ea <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80f2 	beq.w	800575c <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d164      	bne.n	800564a <f_lseek+0x114>
			tbl = fp->cltbl;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	627a      	str	r2, [r7, #36]	; 0x24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	2302      	movs	r3, #2
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d041      	beq.n	8005628 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	3302      	adds	r3, #2
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	3301      	adds	r3, #1
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fd fef2 	bl	80033ae <get_fat>
 80055ca:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d805      	bhi.n	80055de <f_lseek+0xa8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80055da:	2302      	movs	r3, #2
 80055dc:	e205      	b.n	80059ea <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d105      	bne.n	80055f2 <f_lseek+0xbc>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80055ee:	2301      	movs	r3, #1
 80055f0:	e1fb      	b.n	80059ea <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d0da      	beq.n	80055b2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80055fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	429a      	cmp	r2, r3
 8005602:	d809      	bhi.n	8005618 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	1d1a      	adds	r2, r3, #4
 8005608:	627a      	str	r2, [r7, #36]	; 0x24
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	627a      	str	r2, [r7, #36]	; 0x24
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800561e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	429a      	cmp	r2, r3
 8005626:	d3bd      	bcc.n	80055a4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8005632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	429a      	cmp	r2, r3
 8005638:	d803      	bhi.n	8005642 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e1d1      	b.n	80059e6 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005642:	2311      	movs	r3, #17
 8005644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005648:	e1cd      	b.n	80059e6 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d903      	bls.n	800565e <f_lseek+0x128>
				ofs = fp->fsize;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800565c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 81bc 	beq.w	80059e6 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fe f953 	bl	8003920 <clmt_clust>
 800567a:	4602      	mov	r2, r0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fd fe6b 	bl	800336c <clust2sect>
 8005696:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <f_lseek+0x174>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80056a6:	2302      	movs	r3, #2
 80056a8:	e19f      	b.n	80059ea <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	0a5b      	lsrs	r3, r3, #9
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80056b6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80056ba:	3a01      	subs	r2, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4413      	add	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8189 	beq.w	80059e6 <f_lseek+0x4b0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	f000 8182 	beq.w	80059e6 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01d      	beq.n	800572c <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056f6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005702:	2301      	movs	r3, #1
 8005704:	f7fd faa8 	bl	8002c58 <disk_write>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005716:	2301      	movs	r3, #1
 8005718:	e167      	b.n	80059ea <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	b2da      	uxtb	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005732:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	2301      	movs	r3, #1
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	f7fd fa6c 	bl	8002c18 <disk_read>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800574e:	2301      	movs	r3, #1
 8005750:	e14b      	b.n	80059ea <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800575a:	e144      	b.n	80059e6 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d90a      	bls.n	800577e <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800577c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005784:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80c6 	beq.w	8005926 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01e      	beq.n	80057ec <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	1e59      	subs	r1, r3, #1
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d312      	bcc.n	80057ec <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	425b      	negs	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ea:	e029      	b.n	8005840 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11e      	bne.n	8005838 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f7fd ffef 	bl	80037e6 <create_chain>
 8005808:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b01      	cmp	r3, #1
 800580e:	d105      	bne.n	800581c <f_lseek+0x2e6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005818:	2302      	movs	r3, #2
 800581a:	e0e6      	b.n	80059ea <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d105      	bne.n	8005830 <f_lseek+0x2fa>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800582c:	2301      	movs	r3, #1
 800582e:	e0dc      	b.n	80059ea <f_lseek+0x4b4>
					fp->sclust = clst;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005834:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800583c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d06f      	beq.n	8005926 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8005846:	e047      	b.n	80058d8 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800585c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd ffc1 	bl	80037e6 <create_chain>
 8005864:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <f_lseek+0x34c>
							ofs = bcs; break;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	e036      	b.n	80058e0 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587a:	4618      	mov	r0, r3
 800587c:	f7fd fd97 	bl	80033ae <get_fat>
 8005880:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d105      	bne.n	8005896 <f_lseek+0x360>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005892:	2301      	movs	r3, #1
 8005894:	e0a9      	b.n	80059ea <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b01      	cmp	r3, #1
 800589a:	d907      	bls.n	80058ac <f_lseek+0x376>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d305      	bcc.n	80058b8 <f_lseek+0x382>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80058b4:	2302      	movs	r3, #2
 80058b6:	e098      	b.n	80059ea <f_lseek+0x4b4>
					fp->clust = clst;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d8b3      	bhi.n	8005848 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d015      	beq.n	8005926 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fd32 	bl	800336c <clust2sect>
 8005908:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <f_lseek+0x3e6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005918:	2302      	movs	r3, #2
 800591a:	e066      	b.n	80059ea <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	0a5b      	lsrs	r3, r3, #9
 8005920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005922:	4413      	add	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	2b00      	cmp	r3, #0
 8005932:	d041      	beq.n	80059b8 <f_lseek+0x482>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800593a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593c:	429a      	cmp	r2, r3
 800593e:	d03b      	beq.n	80059b8 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01d      	beq.n	800598a <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005954:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005960:	2301      	movs	r3, #1
 8005962:	f7fd f979 	bl	8002c58 <disk_write>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005974:	2301      	movs	r3, #1
 8005976:	e038      	b.n	80059ea <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	b2da      	uxtb	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005990:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	2301      	movs	r3, #1
 8005998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599a:	f7fd f93d 	bl	8002c18 <disk_read>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80059ac:	2301      	movs	r3, #1
 80059ae:	e01c      	b.n	80059ea <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d90e      	bls.n	80059e6 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80059da:	f043 0320 	orr.w	r3, r3, #32
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80059e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3740      	adds	r7, #64	; 0x40
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	2b0a      	cmp	r3, #10
 8005a02:	d103      	bne.n	8005a0c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005a04:	210d      	movs	r1, #13
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fff3 	bl	80059f2 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db25      	blt.n	8005a64 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	60fa      	str	r2, [r7, #12]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b3c      	cmp	r3, #60	; 0x3c
 8005a2a:	dd12      	ble.n	8005a52 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f103 010c 	add.w	r1, r3, #12
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f107 0308 	add.w	r3, r7, #8
 8005a3c:	f7ff faec 	bl	8005018 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d101      	bne.n	8005a4c <putc_bfd+0x5a>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e001      	b.n	8005a50 <putc_bfd+0x5e>
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a50:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]
 8005a62:	e000      	b.n	8005a66 <putc_bfd+0x74>
	if (i < 0) return;
 8005a64:	bf00      	nop
}
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b097      	sub	sp, #92	; 0x5c
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8005a82:	e009      	b.n	8005a98 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	4611      	mov	r1, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ffad 	bl	80059f2 <putc_bfd>
	while (*str)			/* Put the string */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f1      	bne.n	8005a84 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	db16      	blt.n	8005ad4 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	461c      	mov	r4, r3
 8005aac:	f107 0208 	add.w	r2, r7, #8
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	f103 010c 	add.w	r1, r3, #12
 8005ab8:	4613      	mov	r3, r2
 8005aba:	4622      	mov	r2, r4
 8005abc:	f7ff faac 	bl	8005018 <f_write>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d101      	bne.n	8005ad4 <f_puts+0x68>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e001      	b.n	8005ad8 <f_puts+0x6c>
	return EOF;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	375c      	adds	r7, #92	; 0x5c
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd90      	pop	{r4, r7, pc}

08005ae0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005af8:	7a5b      	ldrb	r3, [r3, #9]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d831      	bhi.n	8005b64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005b00:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b02:	7a5b      	ldrb	r3, [r3, #9]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b10:	7a5b      	ldrb	r3, [r3, #9]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005b1e:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b20:	7a5b      	ldrb	r3, [r3, #9]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b28:	4413      	add	r3, r2
 8005b2a:	79fa      	ldrb	r2, [r7, #7]
 8005b2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b30:	7a5b      	ldrb	r3, [r3, #9]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	b2d1      	uxtb	r1, r2
 8005b38:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <FATFS_LinkDriverEx+0x90>)
 8005b3a:	7251      	strb	r1, [r2, #9]
 8005b3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	3330      	adds	r3, #48	; 0x30
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	223a      	movs	r2, #58	; 0x3a
 8005b4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3302      	adds	r3, #2
 8005b54:	222f      	movs	r2, #47	; 0x2f
 8005b56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	20000064 	.word	0x20000064

08005b74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b7e:	2200      	movs	r2, #0
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ffac 	bl	8005ae0 <FATFS_LinkDriverEx>
 8005b88:	4603      	mov	r3, r0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	2500      	movs	r5, #0
 8005b98:	4e0c      	ldr	r6, [pc, #48]	; (8005bcc <__libc_init_array+0x38>)
 8005b9a:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <__libc_init_array+0x3c>)
 8005b9c:	1ba4      	subs	r4, r4, r6
 8005b9e:	10a4      	asrs	r4, r4, #2
 8005ba0:	42a5      	cmp	r5, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	f000 f822 	bl	8005bec <_init>
 8005ba8:	2500      	movs	r5, #0
 8005baa:	4e0a      	ldr	r6, [pc, #40]	; (8005bd4 <__libc_init_array+0x40>)
 8005bac:	4c0a      	ldr	r4, [pc, #40]	; (8005bd8 <__libc_init_array+0x44>)
 8005bae:	1ba4      	subs	r4, r4, r6
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	42a5      	cmp	r5, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bbc:	4798      	blx	r3
 8005bbe:	3501      	adds	r5, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bc6:	4798      	blx	r3
 8005bc8:	3501      	adds	r5, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	08005dac 	.word	0x08005dac
 8005bd0:	08005dac 	.word	0x08005dac
 8005bd4:	08005dac 	.word	0x08005dac
 8005bd8:	08005db0 	.word	0x08005db0

08005bdc <memset>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4402      	add	r2, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <_init>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_fini>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr
